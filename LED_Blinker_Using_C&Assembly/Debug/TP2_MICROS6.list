
TP2_MICROS6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e9c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002024  08002024  00003024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002064  08002064  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002064  08002064  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002064  08002064  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002064  08002064  00003064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002068  08002068  00003068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800206c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002078  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002078  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e9a  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191a  00000000  00000000  0000ded6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0000f7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d6  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002542f  00000000  00000000  00010c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c30c  00000000  00000000  0003609d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9156  00000000  00000000  000423a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b4ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f10  00000000  00000000  0012b544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012e454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800200c 	.word	0x0800200c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800200c 	.word	0x0800200c

080001c8 <LED_On>:
  .equ GPIOA_ODR,    (0x48000014)
  .global LED_On
  .type  LED_On, %function
  .text
LED_On:
    PUSH {R4, LR}
 80001c8:	b510      	push	{r4, lr}

    // GPIOA enabled
    LDR R4, =RCC_AHB2ENR
 80001ca:	4c18      	ldr	r4, [pc, #96]	@ (800022c <End+0x6>)
    LDR R0, [R4]
 80001cc:	6820      	ldr	r0, [r4, #0]
    ORR R0, R0, #(1 << 0)
 80001ce:	f040 0001 	orr.w	r0, r0, #1
    STR R0, [R4]
 80001d2:	6020      	str	r0, [r4, #0]

    // Configurer PA5 en mode sortie
    LDR R4, =GPIOA_MODER
 80001d4:	f04f 4490 	mov.w	r4, #1207959552	@ 0x48000000
    LDR R0, [R4]
 80001d8:	6820      	ldr	r0, [r4, #0]
    BIC R0, R0, #(0b11 << (5 * 2))
 80001da:	f420 6040 	bic.w	r0, r0, #3072	@ 0xc00
    ORR R0, R0, #(0b01 << (5 * 2))
 80001de:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    STR R0, [R4]
 80001e2:	6020      	str	r0, [r4, #0]

    // Allumer/Ã©teindre la LED
    LDR R4, =GPIOA_ODR
 80001e4:	4c12      	ldr	r4, [pc, #72]	@ (8000230 <End+0xa>)
    LDR R0, [R4]
 80001e6:	6820      	ldr	r0, [r4, #0]
    ORR R0, R0, #(1 << 5)
 80001e8:	f040 0020 	orr.w	r0, r0, #32
    STR R0, [R4]
 80001ec:	6020      	str	r0, [r4, #0]

    POP {R4, PC}
 80001ee:	bd10      	pop	{r4, pc}

080001f0 <LED_Enable>:
  .global LED_Enable
  .type  LED_Enable, %function
  .text
LED_Enable:
    PUSH {R4, LR}
 80001f0:	b510      	push	{r4, lr}

    LDR R4, =RCC_AHB2ENR
 80001f2:	4c0e      	ldr	r4, [pc, #56]	@ (800022c <End+0x6>)
    LDR R0, [R4]
 80001f4:	6820      	ldr	r0, [r4, #0]
    ORR R0, R0, #(1 << 0)
 80001f6:	f040 0001 	orr.w	r0, r0, #1
    STR R0, [R4]
 80001fa:	6020      	str	r0, [r4, #0]

    POP {R4, PC}
 80001fc:	bd10      	pop	{r4, pc}

080001fe <LED_Configure>:
  .global LED_Configure
  .type  LED_Configure, %function
  .text
LED_Configure:
    PUSH {R4, LR}
 80001fe:	b510      	push	{r4, lr}

    LDR R4, =GPIOA_MODER
 8000200:	f04f 4490 	mov.w	r4, #1207959552	@ 0x48000000
    LDR R0, [R4]
 8000204:	6820      	ldr	r0, [r4, #0]
    BIC R0, R0, #(0b11 << (5 * 2))
 8000206:	f420 6040 	bic.w	r0, r0, #3072	@ 0xc00
    ORR R0, R0, #(0b01 << (5 * 2))
 800020a:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    STR R0, [R4]
 800020e:	6020      	str	r0, [r4, #0]

    POP {R4, PC}
 8000210:	bd10      	pop	{r4, pc}

08000212 <LED_DriveGreen>:
.global LED_DriveGreen
.type LED_DriveGreen, %function
.text

LED_DriveGreen:
    PUSH {R4, LR}
 8000212:	b510      	push	{r4, lr}

    LDR R4, =GPIOA_ODR
 8000214:	4c06      	ldr	r4, [pc, #24]	@ (8000230 <End+0xa>)
    LDR R1, [R4]
 8000216:	6821      	ldr	r1, [r4, #0]
    CMP R0, #0
 8000218:	2800      	cmp	r0, #0
    BEQ Turn_Off
 800021a:	d002      	beq.n	8000222 <Turn_Off>

    ORR R1, R1, #(1 << 5)
 800021c:	f041 0120 	orr.w	r1, r1, #32
    B End
 8000220:	e001      	b.n	8000226 <End>

08000222 <Turn_Off>:

Turn_Off:
    BIC R1, R1, #(1 << 5)
 8000222:	f021 0120 	bic.w	r1, r1, #32

08000226 <End>:

End:
    STR R1, [R4]
 8000226:	6021      	str	r1, [r4, #0]
    POP {R4, PC}
 8000228:	bd10      	pop	{r4, pc}
 800022a:	0000      	.short	0x0000
    LDR R4, =RCC_AHB2ENR
 800022c:	4002104c 	.word	0x4002104c
    LDR R4, =GPIOA_ODR
 8000230:	48000014 	.word	0x48000014

08000234 <BUTTON_Enable>:

int BUTTON_GetBlueLevel(void) {
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET ? 1 : 0;
}

void BUTTON_Enable(void) {
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
    // (bit 2 of RCC_AHB2ENR)
    *((volatile uint32_t *)0x4002104C) |= (1 << 2);
 8000238:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <BUTTON_Enable+0x1c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a04      	ldr	r2, [pc, #16]	@ (8000250 <BUTTON_Enable+0x1c>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	4002104c 	.word	0x4002104c

08000254 <BUTTON_Config>:


void BUTTON_Config(void) {
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0


    // (00 in MODER)
    GPIOC->MODER &= ~0x0C000000;
 8000258:	4b0b      	ldr	r3, [pc, #44]	@ (8000288 <BUTTON_Config+0x34>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <BUTTON_Config+0x34>)
 800025e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000262:	6013      	str	r3, [r2, #0]

    // (01 in PUPDR)
    GPIOC->PUPDR &= ~0x08000000;
 8000264:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <BUTTON_Config+0x34>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a07      	ldr	r2, [pc, #28]	@ (8000288 <BUTTON_Config+0x34>)
 800026a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800026e:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |=  0x04000000;
 8000270:	4b05      	ldr	r3, [pc, #20]	@ (8000288 <BUTTON_Config+0x34>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a04      	ldr	r2, [pc, #16]	@ (8000288 <BUTTON_Config+0x34>)
 8000276:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800027a:	60d3      	str	r3, [r2, #12]

}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	48000800 	.word	0x48000800

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	BUTTON_Enable();
 8000290:	f7ff ffd0 	bl	8000234 <BUTTON_Enable>
	BUTTON_Config();
 8000294:	f7ff ffde 	bl	8000254 <BUTTON_Config>

	setup();
 8000298:	f000 f9f6 	bl	8000688 <setup>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 fa26 	bl	80006ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f80a 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 f8c4 	bl	8000430 <MX_GPIO_Init>
  MX_TIM4_Init();
 80002a8:	f000 f874 	bl	8000394 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80002ac:	f000 f855 	bl	800035a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  LED_On();
 80002b0:	f7ff ff8a 	bl	80001c8 <LED_On>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <main+0x28>

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b096      	sub	sp, #88	@ 0x58
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0314 	add.w	r3, r7, #20
 80002c2:	2244      	movs	r2, #68	@ 0x44
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 fe74 	bl	8001fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002de:	f000 fd63 	bl	8000da8 <HAL_PWREx_ControlVoltageScaling>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002e8:	f000 f942 	bl	8000570 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ec:	2302      	movs	r3, #2
 80002ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fa:	2302      	movs	r3, #2
 80002fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fe:	2302      	movs	r3, #2
 8000300:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000302:	2301      	movs	r3, #1
 8000304:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000306:	230a      	movs	r3, #10
 8000308:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800030a:	2307      	movs	r3, #7
 800030c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800030e:	2302      	movs	r3, #2
 8000310:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000312:	2302      	movs	r3, #2
 8000314:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fd9a 	bl	8000e54 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000326:	f000 f923 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2303      	movs	r3, #3
 8000330:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800033e:	463b      	mov	r3, r7
 8000340:	2104      	movs	r1, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f962 	bl	800160c <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034e:	f000 f90f 	bl	8000570 <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3758      	adds	r7, #88	@ 0x58
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	2028      	movs	r0, #40	@ 0x28
 8000364:	f000 fb19 	bl	800099a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000368:	2028      	movs	r0, #40	@ 0x28
 800036a:	f000 fb32 	bl	80009d2 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	2100      	movs	r1, #0
 8000372:	2017      	movs	r0, #23
 8000374:	f000 fb11 	bl	800099a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000378:	2017      	movs	r0, #23
 800037a:	f000 fb2a 	bl	80009d2 <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	2100      	movs	r1, #0
 8000382:	201e      	movs	r0, #30
 8000384:	f000 fb09 	bl	800099a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000388:	201e      	movs	r0, #30
 800038a:	f000 fb22 	bl	80009d2 <HAL_NVIC_EnableIRQ>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <MX_TIM4_Init+0x94>)
 80003b4:	4a1d      	ldr	r2, [pc, #116]	@ (800042c <MX_TIM4_Init+0x98>)
 80003b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49;
 80003b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <MX_TIM4_Init+0x94>)
 80003ba:	2231      	movs	r2, #49	@ 0x31
 80003bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003be:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <MX_TIM4_Init+0x94>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7999;
 80003c4:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <MX_TIM4_Init+0x94>)
 80003c6:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80003ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003cc:	4b16      	ldr	r3, [pc, #88]	@ (8000428 <MX_TIM4_Init+0x94>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d2:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <MX_TIM4_Init+0x94>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003d8:	4813      	ldr	r0, [pc, #76]	@ (8000428 <MX_TIM4_Init+0x94>)
 80003da:	f001 fb03 	bl	80019e4 <HAL_TIM_Base_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80003e4:	f000 f8c4 	bl	8000570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480c      	ldr	r0, [pc, #48]	@ (8000428 <MX_TIM4_Init+0x94>)
 80003f6:	f001 fb4c 	bl	8001a92 <HAL_TIM_ConfigClockSource>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000400:	f000 f8b6 	bl	8000570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000404:	2300      	movs	r3, #0
 8000406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	4619      	mov	r1, r3
 8000410:	4805      	ldr	r0, [pc, #20]	@ (8000428 <MX_TIM4_Init+0x94>)
 8000412:	f001 fd47 	bl	8001ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800041c:	f000 f8a8 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000420:	bf00      	nop
 8000422:	3720      	adds	r7, #32
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000028 	.word	0x20000028
 800042c:	40000800 	.word	0x40000800

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	@ 0x28
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
 8000444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b47      	ldr	r3, [pc, #284]	@ (8000564 <MX_GPIO_Init+0x134>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800044a:	4a46      	ldr	r2, [pc, #280]	@ (8000564 <MX_GPIO_Init+0x134>)
 800044c:	f043 0304 	orr.w	r3, r3, #4
 8000450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000452:	4b44      	ldr	r3, [pc, #272]	@ (8000564 <MX_GPIO_Init+0x134>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000456:	f003 0304 	and.w	r3, r3, #4
 800045a:	613b      	str	r3, [r7, #16]
 800045c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800045e:	4b41      	ldr	r3, [pc, #260]	@ (8000564 <MX_GPIO_Init+0x134>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000462:	4a40      	ldr	r2, [pc, #256]	@ (8000564 <MX_GPIO_Init+0x134>)
 8000464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800046a:	4b3e      	ldr	r3, [pc, #248]	@ (8000564 <MX_GPIO_Init+0x134>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000476:	4b3b      	ldr	r3, [pc, #236]	@ (8000564 <MX_GPIO_Init+0x134>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047a:	4a3a      	ldr	r2, [pc, #232]	@ (8000564 <MX_GPIO_Init+0x134>)
 800047c:	f043 0302 	orr.w	r3, r3, #2
 8000480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000482:	4b38      	ldr	r3, [pc, #224]	@ (8000564 <MX_GPIO_Init+0x134>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000486:	f003 0302 	and.w	r3, r3, #2
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b35      	ldr	r3, [pc, #212]	@ (8000564 <MX_GPIO_Init+0x134>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000492:	4a34      	ldr	r2, [pc, #208]	@ (8000564 <MX_GPIO_Init+0x134>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800049a:	4b32      	ldr	r3, [pc, #200]	@ (8000564 <MX_GPIO_Init+0x134>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 80004a6:	2200      	movs	r2, #0
 80004a8:	f24c 0136 	movw	r1, #49206	@ 0xc036
 80004ac:	482e      	ldr	r0, [pc, #184]	@ (8000568 <MX_GPIO_Init+0x138>)
 80004ae:	f000 fc55 	bl	8000d5c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2180      	movs	r1, #128	@ 0x80
 80004b6:	482d      	ldr	r0, [pc, #180]	@ (800056c <MX_GPIO_Init+0x13c>)
 80004b8:	f000 fc50 	bl	8000d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c6:	f000 fc49 	bl	8000d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80004ca:	f44f 7358 	mov.w	r3, #864	@ 0x360
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004d0:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	4822      	ldr	r0, [pc, #136]	@ (800056c <MX_GPIO_Init+0x13c>)
 80004e2:	f000 fa91 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB15
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_15
 80004e6:	f24c 0336 	movw	r3, #49206	@ 0xc036
 80004ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	2301      	movs	r3, #1
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	4619      	mov	r1, r3
 80004fe:	481a      	ldr	r0, [pc, #104]	@ (8000568 <MX_GPIO_Init+0x138>)
 8000500:	f000 fa82 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800050a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	4813      	ldr	r0, [pc, #76]	@ (8000568 <MX_GPIO_Init+0x138>)
 800051c:	f000 fa74 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000520:	2380      	movs	r3, #128	@ 0x80
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	2301      	movs	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4619      	mov	r1, r3
 8000536:	480d      	ldr	r0, [pc, #52]	@ (800056c <MX_GPIO_Init+0x13c>)
 8000538:	f000 fa66 	bl	8000a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800053c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4619      	mov	r1, r3
 8000554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000558:	f000 fa56 	bl	8000a08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055c:	bf00      	nop
 800055e:	3728      	adds	r7, #40	@ 0x28
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000
 8000568:	48000400 	.word	0x48000400
 800056c:	48000800 	.word	0x48000800

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <Error_Handler+0x8>

0800057c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <HAL_MspInit+0x44>)
 8000584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000586:	4a0e      	ldr	r2, [pc, #56]	@ (80005c0 <HAL_MspInit+0x44>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6613      	str	r3, [r2, #96]	@ 0x60
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <HAL_MspInit+0x44>)
 8000590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <HAL_MspInit+0x44>)
 800059c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800059e:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <HAL_MspInit+0x44>)
 80005a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <HAL_MspInit+0x44>)
 80005a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0a      	ldr	r2, [pc, #40]	@ (80005fc <HAL_TIM_Base_MspInit+0x38>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d10b      	bne.n	80005ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <HAL_TIM_Base_MspInit+0x3c>)
 80005d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005da:	4a09      	ldr	r2, [pc, #36]	@ (8000600 <HAL_TIM_Base_MspInit+0x3c>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80005e2:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <HAL_TIM_Base_MspInit+0x3c>)
 80005e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40000800 	.word	0x40000800
 8000600:	40021000 	.word	0x40021000

08000604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <NMI_Handler+0x4>

0800060c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <HardFault_Handler+0x4>

08000614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <MemManage_Handler+0x4>

0800061c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <BusFault_Handler+0x4>

08000624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <UsageFault_Handler+0x4>

0800062c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr

0800063a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065a:	f000 f8a3 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	@ (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <setup>:

        UTILS_WaitN10ms(speed);
    }
}

void setup(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
//  it will be run once.
    LED_Enable();
 800068c:	f7ff fdb0 	bl	80001f0 <LED_Enable>
    LED_Configure();
 8000690:	f7ff fdb5 	bl	80001fe <LED_Configure>

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800069c:	f7ff ffe2 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	@ (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	@ (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c6:	f001 fc7d 	bl	8001fc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ca:	f7ff fddf 	bl	800028c <main>

080006ce <LoopForever>:

LoopForever:
    b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006dc:	0800206c 	.word	0x0800206c
  ldr r2, =_sbss
 80006e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006e4:	20000078 	.word	0x20000078

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <HAL_Init+0x3c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <HAL_Init+0x3c>)
 80006fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000700:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000702:	2003      	movs	r0, #3
 8000704:	f000 f93e 	bl	8000984 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000708:	2000      	movs	r0, #0
 800070a:	f000 f80f 	bl	800072c <HAL_InitTick>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	e001      	b.n	800071e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800071a:	f7ff ff2f 	bl	800057c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800071e:	79fb      	ldrb	r3, [r7, #7]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000738:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <HAL_InitTick+0x6c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d023      	beq.n	8000788 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <HAL_InitTick+0x70>)
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <HAL_InitTick+0x6c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f949 	bl	80009ee <HAL_SYSTICK_Config>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d10f      	bne.n	8000782 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d809      	bhi.n	800077c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f000 f913 	bl	800099a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000774:	4a0a      	ldr	r2, [pc, #40]	@ (80007a0 <HAL_InitTick+0x74>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	e007      	b.n	800078c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	73fb      	strb	r3, [r7, #15]
 8000780:	e004      	b.n	800078c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	73fb      	strb	r3, [r7, #15]
 8000786:	e001      	b.n	800078c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000788:	2301      	movs	r3, #1
 800078a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000008 	.word	0x20000008
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000074 	.word	0x20000074

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	@ (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000074 	.word	0x20000074

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db0b      	blt.n	8000872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f003 021f 	and.w	r2, r3, #31
 8000860:	4907      	ldr	r1, [pc, #28]	@ (8000880 <__NVIC_EnableIRQ+0x38>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	095b      	lsrs	r3, r3, #5
 8000868:	2001      	movs	r0, #1
 800086a:	fa00 f202 	lsl.w	r2, r0, r2
 800086e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	2b00      	cmp	r3, #0
 8000896:	db0a      	blt.n	80008ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	b2da      	uxtb	r2, r3
 800089c:	490c      	ldr	r1, [pc, #48]	@ (80008d0 <__NVIC_SetPriority+0x4c>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	b2d2      	uxtb	r2, r2
 80008a6:	440b      	add	r3, r1
 80008a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ac:	e00a      	b.n	80008c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4908      	ldr	r1, [pc, #32]	@ (80008d4 <__NVIC_SetPriority+0x50>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	3b04      	subs	r3, #4
 80008bc:	0112      	lsls	r2, r2, #4
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	440b      	add	r3, r1
 80008c2:	761a      	strb	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000e100 	.word	0xe000e100
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b089      	sub	sp, #36	@ 0x24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f1c3 0307 	rsb	r3, r3, #7
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	bf28      	it	cs
 80008f6:	2304      	movcs	r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3304      	adds	r3, #4
 80008fe:	2b06      	cmp	r3, #6
 8000900:	d902      	bls.n	8000908 <NVIC_EncodePriority+0x30>
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b03      	subs	r3, #3
 8000906:	e000      	b.n	800090a <NVIC_EncodePriority+0x32>
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	f04f 32ff 	mov.w	r2, #4294967295
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43da      	mvns	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	401a      	ands	r2, r3
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43d9      	mvns	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	4313      	orrs	r3, r2
         );
}
 8000932:	4618      	mov	r0, r3
 8000934:	3724      	adds	r7, #36	@ 0x24
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000950:	d301      	bcc.n	8000956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000952:	2301      	movs	r3, #1
 8000954:	e00f      	b.n	8000976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000956:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <SysTick_Config+0x40>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095e:	210f      	movs	r1, #15
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f7ff ff8e 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <SysTick_Config+0x40>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096e:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <SysTick_Config+0x40>)
 8000970:	2207      	movs	r2, #7
 8000972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	e000e010 	.word	0xe000e010

08000984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff29 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b086      	sub	sp, #24
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009ac:	f7ff ff3e 	bl	800082c <__NVIC_GetPriorityGrouping>
 80009b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	6978      	ldr	r0, [r7, #20]
 80009b8:	f7ff ff8e 	bl	80008d8 <NVIC_EncodePriority>
 80009bc:	4602      	mov	r2, r0
 80009be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff5d 	bl	8000884 <__NVIC_SetPriority>
}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff31 	bl	8000848 <__NVIC_EnableIRQ>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ffa2 	bl	8000940 <SysTick_Config>
 80009fc:	4603      	mov	r3, r0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a16:	e17f      	b.n	8000d18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	fa01 f303 	lsl.w	r3, r1, r3
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 8171 	beq.w	8000d12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d005      	beq.n	8000a48 <HAL_GPIO_Init+0x40>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d130      	bne.n	8000aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	2203      	movs	r2, #3
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a7e:	2201      	movs	r2, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	091b      	lsrs	r3, r3, #4
 8000a94:	f003 0201 	and.w	r2, r3, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d118      	bne.n	8000ae8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000abc:	2201      	movs	r2, #1
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	08db      	lsrs	r3, r3, #3
 8000ad2:	f003 0201 	and.w	r2, r3, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d017      	beq.n	8000b24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2203      	movs	r2, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0303 	and.w	r3, r3, #3
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d123      	bne.n	8000b78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	08da      	lsrs	r2, r3, #3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3208      	adds	r2, #8
 8000b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	f003 0307 	and.w	r3, r3, #7
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	220f      	movs	r2, #15
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	691a      	ldr	r2, [r3, #16]
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	08da      	lsrs	r2, r3, #3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3208      	adds	r2, #8
 8000b72:	6939      	ldr	r1, [r7, #16]
 8000b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0203 	and.w	r2, r3, #3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 80ac 	beq.w	8000d12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b5f      	ldr	r3, [pc, #380]	@ (8000d38 <HAL_GPIO_Init+0x330>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bbe:	4a5e      	ldr	r2, [pc, #376]	@ (8000d38 <HAL_GPIO_Init+0x330>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8000d38 <HAL_GPIO_Init+0x330>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd2:	4a5a      	ldr	r2, [pc, #360]	@ (8000d3c <HAL_GPIO_Init+0x334>)
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	3302      	adds	r3, #2
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	f003 0303 	and.w	r3, r3, #3
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	220f      	movs	r2, #15
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bfc:	d025      	beq.n	8000c4a <HAL_GPIO_Init+0x242>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4f      	ldr	r2, [pc, #316]	@ (8000d40 <HAL_GPIO_Init+0x338>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d01f      	beq.n	8000c46 <HAL_GPIO_Init+0x23e>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a4e      	ldr	r2, [pc, #312]	@ (8000d44 <HAL_GPIO_Init+0x33c>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d019      	beq.n	8000c42 <HAL_GPIO_Init+0x23a>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a4d      	ldr	r2, [pc, #308]	@ (8000d48 <HAL_GPIO_Init+0x340>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d013      	beq.n	8000c3e <HAL_GPIO_Init+0x236>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a4c      	ldr	r2, [pc, #304]	@ (8000d4c <HAL_GPIO_Init+0x344>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d00d      	beq.n	8000c3a <HAL_GPIO_Init+0x232>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a4b      	ldr	r2, [pc, #300]	@ (8000d50 <HAL_GPIO_Init+0x348>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d007      	beq.n	8000c36 <HAL_GPIO_Init+0x22e>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a4a      	ldr	r2, [pc, #296]	@ (8000d54 <HAL_GPIO_Init+0x34c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_GPIO_Init+0x22a>
 8000c2e:	2306      	movs	r3, #6
 8000c30:	e00c      	b.n	8000c4c <HAL_GPIO_Init+0x244>
 8000c32:	2307      	movs	r3, #7
 8000c34:	e00a      	b.n	8000c4c <HAL_GPIO_Init+0x244>
 8000c36:	2305      	movs	r3, #5
 8000c38:	e008      	b.n	8000c4c <HAL_GPIO_Init+0x244>
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	e006      	b.n	8000c4c <HAL_GPIO_Init+0x244>
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e004      	b.n	8000c4c <HAL_GPIO_Init+0x244>
 8000c42:	2302      	movs	r3, #2
 8000c44:	e002      	b.n	8000c4c <HAL_GPIO_Init+0x244>
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <HAL_GPIO_Init+0x244>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	f002 0203 	and.w	r2, r2, #3
 8000c52:	0092      	lsls	r2, r2, #2
 8000c54:	4093      	lsls	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c5c:	4937      	ldr	r1, [pc, #220]	@ (8000d3c <HAL_GPIO_Init+0x334>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d58 <HAL_GPIO_Init+0x350>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c8e:	4a32      	ldr	r2, [pc, #200]	@ (8000d58 <HAL_GPIO_Init+0x350>)
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c94:	4b30      	ldr	r3, [pc, #192]	@ (8000d58 <HAL_GPIO_Init+0x350>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cb8:	4a27      	ldr	r2, [pc, #156]	@ (8000d58 <HAL_GPIO_Init+0x350>)
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cbe:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <HAL_GPIO_Init+0x350>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d58 <HAL_GPIO_Init+0x350>)
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <HAL_GPIO_Init+0x350>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <HAL_GPIO_Init+0x350>)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	3301      	adds	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f47f ae78 	bne.w	8000a18 <HAL_GPIO_Init+0x10>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800
 8000d48:	48000c00 	.word	0x48000c00
 8000d4c:	48001000 	.word	0x48001000
 8000d50:	48001400 	.word	0x48001400
 8000d54:	48001800 	.word	0x48001800
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d6c:	787b      	ldrb	r3, [r7, #1]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d78:	e002      	b.n	8000d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d90:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40007000 	.word	0x40007000

08000da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000db6:	d130      	bne.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dc4:	d038      	beq.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dce:	4a1e      	ldr	r2, [pc, #120]	@ (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2232      	movs	r2, #50	@ 0x32
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	0c9b      	lsrs	r3, r3, #18
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dec:	e002      	b.n	8000df4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e00:	d102      	bne.n	8000e08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f2      	bne.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e14:	d110      	bne.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e00f      	b.n	8000e3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e26:	d007      	beq.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e30:	4a05      	ldr	r2, [pc, #20]	@ (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40007000 	.word	0x40007000
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	431bde83 	.word	0x431bde83

08000e54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e3ca      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e66:	4b97      	ldr	r3, [pc, #604]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e70:	4b94      	ldr	r3, [pc, #592]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0310 	and.w	r3, r3, #16
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f000 80e4 	beq.w	8001050 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <HAL_RCC_OscConfig+0x4a>
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b0c      	cmp	r3, #12
 8000e92:	f040 808b 	bne.w	8000fac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	f040 8087 	bne.w	8000fac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e9e:	4b89      	ldr	r3, [pc, #548]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d005      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x62>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e3a2      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1a      	ldr	r2, [r3, #32]
 8000eba:	4b82      	ldr	r3, [pc, #520]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d004      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x7c>
 8000ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000ece:	e005      	b.n	8000edc <HAL_RCC_OscConfig+0x88>
 8000ed0:	4b7c      	ldr	r3, [pc, #496]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d223      	bcs.n	8000f28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fd1d 	bl	8001924 <RCC_SetFlashLatencyFromMSIRange>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e383      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ef4:	4b73      	ldr	r3, [pc, #460]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a72      	ldr	r2, [pc, #456]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4b70      	ldr	r3, [pc, #448]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	496d      	ldr	r1, [pc, #436]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f12:	4b6c      	ldr	r3, [pc, #432]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	4968      	ldr	r1, [pc, #416]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	604b      	str	r3, [r1, #4]
 8000f26:	e025      	b.n	8000f74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f28:	4b66      	ldr	r3, [pc, #408]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a65      	ldr	r2, [pc, #404]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b63      	ldr	r3, [pc, #396]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	4960      	ldr	r1, [pc, #384]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f46:	4b5f      	ldr	r3, [pc, #380]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	495b      	ldr	r1, [pc, #364]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fcdd 	bl	8001924 <RCC_SetFlashLatencyFromMSIRange>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e343      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f74:	f000 fc4a 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b52      	ldr	r3, [pc, #328]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	4950      	ldr	r1, [pc, #320]	@ (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f86:	5ccb      	ldrb	r3, [r1, r3]
 8000f88:	f003 031f 	and.w	r3, r3, #31
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	4a4e      	ldr	r2, [pc, #312]	@ (80010cc <HAL_RCC_OscConfig+0x278>)
 8000f92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f94:	4b4e      	ldr	r3, [pc, #312]	@ (80010d0 <HAL_RCC_OscConfig+0x27c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fbc7 	bl	800072c <HAL_InitTick>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d052      	beq.n	800104e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	e327      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d032      	beq.n	800101a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fb4:	4b43      	ldr	r3, [pc, #268]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a42      	ldr	r2, [pc, #264]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fc04 	bl	80007cc <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fc00 	bl	80007cc <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e310      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fda:	4b3a      	ldr	r3, [pc, #232]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe6:	4b37      	ldr	r3, [pc, #220]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a36      	ldr	r2, [pc, #216]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b34      	ldr	r3, [pc, #208]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4931      	ldr	r1, [pc, #196]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8001000:	4313      	orrs	r3, r2
 8001002:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001004:	4b2f      	ldr	r3, [pc, #188]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	492c      	ldr	r1, [pc, #176]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
 8001018:	e01a      	b.n	8001050 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800101a:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a29      	ldr	r2, [pc, #164]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001026:	f7ff fbd1 	bl	80007cc <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800102e:	f7ff fbcd 	bl	80007cc <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e2dd      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001040:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f0      	bne.n	800102e <HAL_RCC_OscConfig+0x1da>
 800104c:	e000      	b.n	8001050 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800104e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d074      	beq.n	8001146 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2b08      	cmp	r3, #8
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x21a>
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	d10e      	bne.n	8001086 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d10b      	bne.n	8001086 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d064      	beq.n	8001144 <HAL_RCC_OscConfig+0x2f0>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d160      	bne.n	8001144 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e2ba      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800108e:	d106      	bne.n	800109e <HAL_RCC_OscConfig+0x24a>
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 8001096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	e026      	b.n	80010ec <HAL_RCC_OscConfig+0x298>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010a6:	d115      	bne.n	80010d4 <HAL_RCC_OscConfig+0x280>
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 80010ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a02      	ldr	r2, [pc, #8]	@ (80010c4 <HAL_RCC_OscConfig+0x270>)
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e014      	b.n	80010ec <HAL_RCC_OscConfig+0x298>
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000
 80010c8:	08002024 	.word	0x08002024
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000004 	.word	0x20000004
 80010d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80010da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d013      	beq.n	800111c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fb6a 	bl	80007cc <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fb66 	bl	80007cc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	@ 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e276      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110e:	4b92      	ldr	r3, [pc, #584]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0x2a8>
 800111a:	e014      	b.n	8001146 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111c:	f7ff fb56 	bl	80007cc <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fb52 	bl	80007cc <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	@ 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e262      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001136:	4b88      	ldr	r3, [pc, #544]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x2d0>
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d060      	beq.n	8001214 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b04      	cmp	r3, #4
 8001156:	d005      	beq.n	8001164 <HAL_RCC_OscConfig+0x310>
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2b0c      	cmp	r3, #12
 800115c:	d119      	bne.n	8001192 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d116      	bne.n	8001192 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001164:	4b7c      	ldr	r3, [pc, #496]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_OscConfig+0x328>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e23f      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117c:	4b76      	ldr	r3, [pc, #472]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	061b      	lsls	r3, r3, #24
 800118a:	4973      	ldr	r1, [pc, #460]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800118c:	4313      	orrs	r3, r2
 800118e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001190:	e040      	b.n	8001214 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d023      	beq.n	80011e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119a:	4b6f      	ldr	r3, [pc, #444]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a6e      	ldr	r2, [pc, #440]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80011a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fb11 	bl	80007cc <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fb0d 	bl	80007cc <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e21d      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c0:	4b65      	ldr	r3, [pc, #404]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b62      	ldr	r3, [pc, #392]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	061b      	lsls	r3, r3, #24
 80011da:	495f      	ldr	r1, [pc, #380]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	e018      	b.n	8001214 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80011e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ee:	f7ff faed 	bl	80007cc <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff fae9 	bl	80007cc <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e1f9      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001208:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f0      	bne.n	80011f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d03c      	beq.n	800129a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d01c      	beq.n	8001262 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001228:	4b4b      	ldr	r3, [pc, #300]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800122a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800122e:	4a4a      	ldr	r2, [pc, #296]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001238:	f7ff fac8 	bl	80007cc <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001240:	f7ff fac4 	bl	80007cc <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1d4      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001252:	4b41      	ldr	r3, [pc, #260]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 8001254:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0ef      	beq.n	8001240 <HAL_RCC_OscConfig+0x3ec>
 8001260:	e01b      	b.n	800129a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001262:	4b3d      	ldr	r3, [pc, #244]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 8001264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001268:	4a3b      	ldr	r2, [pc, #236]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800126a:	f023 0301 	bic.w	r3, r3, #1
 800126e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001272:	f7ff faab 	bl	80007cc <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127a:	f7ff faa7 	bl	80007cc <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1b7      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800128c:	4b32      	ldr	r3, [pc, #200]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800128e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1ef      	bne.n	800127a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80a6 	beq.w	80013f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10d      	bne.n	80012d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012bc:	4a26      	ldr	r2, [pc, #152]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80012be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c4:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 80012c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012d0:	2301      	movs	r3, #1
 80012d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012d4:	4b21      	ldr	r3, [pc, #132]	@ (800135c <HAL_RCC_OscConfig+0x508>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d118      	bne.n	8001312 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <HAL_RCC_OscConfig+0x508>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1d      	ldr	r2, [pc, #116]	@ (800135c <HAL_RCC_OscConfig+0x508>)
 80012e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fa6e 	bl	80007cc <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f4:	f7ff fa6a 	bl	80007cc <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e17a      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_RCC_OscConfig+0x508>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d108      	bne.n	800132c <HAL_RCC_OscConfig+0x4d8>
 800131a:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800131c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001320:	4a0d      	ldr	r2, [pc, #52]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800132a:	e029      	b.n	8001380 <HAL_RCC_OscConfig+0x52c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d115      	bne.n	8001360 <HAL_RCC_OscConfig+0x50c>
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 8001336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800133a:	4a07      	ldr	r2, [pc, #28]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 8001346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800134a:	4a03      	ldr	r2, [pc, #12]	@ (8001358 <HAL_RCC_OscConfig+0x504>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001354:	e014      	b.n	8001380 <HAL_RCC_OscConfig+0x52c>
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40007000 	.word	0x40007000
 8001360:	4b9c      	ldr	r3, [pc, #624]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 8001362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001366:	4a9b      	ldr	r2, [pc, #620]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001370:	4b98      	ldr	r3, [pc, #608]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 8001372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001376:	4a97      	ldr	r2, [pc, #604]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d016      	beq.n	80013b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001388:	f7ff fa20 	bl	80007cc <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001390:	f7ff fa1c 	bl	80007cc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e12a      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013a6:	4b8b      	ldr	r3, [pc, #556]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80013a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0ed      	beq.n	8001390 <HAL_RCC_OscConfig+0x53c>
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b6:	f7ff fa09 	bl	80007cc <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fa05 	bl	80007cc <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e113      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013d4:	4b7f      	ldr	r3, [pc, #508]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80013d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ed      	bne.n	80013be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e2:	7ffb      	ldrb	r3, [r7, #31]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e8:	4b7a      	ldr	r3, [pc, #488]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ec:	4a79      	ldr	r2, [pc, #484]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80013ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80fe 	beq.w	80015fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001402:	2b02      	cmp	r3, #2
 8001404:	f040 80d0 	bne.w	80015a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001408:	4b72      	ldr	r3, [pc, #456]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 0203 	and.w	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001418:	429a      	cmp	r2, r3
 800141a:	d130      	bne.n	800147e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	3b01      	subs	r3, #1
 8001428:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d127      	bne.n	800147e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001438:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d11f      	bne.n	800147e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001448:	2a07      	cmp	r2, #7
 800144a:	bf14      	ite	ne
 800144c:	2201      	movne	r2, #1
 800144e:	2200      	moveq	r2, #0
 8001450:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001452:	4293      	cmp	r3, r2
 8001454:	d113      	bne.n	800147e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001460:	085b      	lsrs	r3, r3, #1
 8001462:	3b01      	subs	r3, #1
 8001464:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d109      	bne.n	800147e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	3b01      	subs	r3, #1
 8001478:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800147a:	429a      	cmp	r2, r3
 800147c:	d06e      	beq.n	800155c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	d069      	beq.n	8001558 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001484:	4b53      	ldr	r3, [pc, #332]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001490:	4b50      	ldr	r3, [pc, #320]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0ad      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014a0:	4b4c      	ldr	r3, [pc, #304]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a4b      	ldr	r2, [pc, #300]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80014a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014ac:	f7ff f98e 	bl	80007cc <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff f98a 	bl	80007cc <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e09a      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014c6:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d2:	4b40      	ldr	r3, [pc, #256]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <HAL_RCC_OscConfig+0x784>)
 80014d8:	4013      	ands	r3, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80014e2:	3a01      	subs	r2, #1
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	4311      	orrs	r1, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80014ec:	0212      	lsls	r2, r2, #8
 80014ee:	4311      	orrs	r1, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80014f4:	0852      	lsrs	r2, r2, #1
 80014f6:	3a01      	subs	r2, #1
 80014f8:	0552      	lsls	r2, r2, #21
 80014fa:	4311      	orrs	r1, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001500:	0852      	lsrs	r2, r2, #1
 8001502:	3a01      	subs	r2, #1
 8001504:	0652      	lsls	r2, r2, #25
 8001506:	4311      	orrs	r1, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800150c:	0912      	lsrs	r2, r2, #4
 800150e:	0452      	lsls	r2, r2, #17
 8001510:	430a      	orrs	r2, r1
 8001512:	4930      	ldr	r1, [pc, #192]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 8001514:	4313      	orrs	r3, r2
 8001516:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001518:	4b2e      	ldr	r3, [pc, #184]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2d      	ldr	r2, [pc, #180]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800151e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001522:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001524:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a2a      	ldr	r2, [pc, #168]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800152a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800152e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001530:	f7ff f94c 	bl	80007cc <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff f948 	bl	80007cc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e058      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154a:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001556:	e050      	b.n	80015fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e04f      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d148      	bne.n	80015fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800156e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001572:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001574:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4a16      	ldr	r2, [pc, #88]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800157a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800157e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001580:	f7ff f924 	bl	80007cc <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff f920 	bl	80007cc <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e030      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x734>
 80015a6:	e028      	b.n	80015fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d023      	beq.n	80015f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_RCC_OscConfig+0x780>)
 80015b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff f907 	bl	80007cc <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c0:	e00c      	b.n	80015dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff f903 	bl	80007cc <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d905      	bls.n	80015dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e013      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
 80015d4:	40021000 	.word	0x40021000
 80015d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015dc:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_RCC_OscConfig+0x7b0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ec      	bne.n	80015c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_RCC_OscConfig+0x7b0>)
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	4905      	ldr	r1, [pc, #20]	@ (8001604 <HAL_RCC_OscConfig+0x7b0>)
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_RCC_OscConfig+0x7b4>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	60cb      	str	r3, [r1, #12]
 80015f4:	e001      	b.n	80015fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	feeefffc 	.word	0xfeeefffc

0800160c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0e7      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001620:	4b75      	ldr	r3, [pc, #468]	@ (80017f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d910      	bls.n	8001650 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b72      	ldr	r3, [pc, #456]	@ (80017f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 0207 	bic.w	r2, r3, #7
 8001636:	4970      	ldr	r1, [pc, #448]	@ (80017f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b6e      	ldr	r3, [pc, #440]	@ (80017f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0cf      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d010      	beq.n	800167e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	4b66      	ldr	r3, [pc, #408]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001668:	429a      	cmp	r2, r3
 800166a:	d908      	bls.n	800167e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166c:	4b63      	ldr	r3, [pc, #396]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4960      	ldr	r1, [pc, #384]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d04c      	beq.n	8001724 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b03      	cmp	r3, #3
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001692:	4b5a      	ldr	r3, [pc, #360]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d121      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0a6      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	4b54      	ldr	r3, [pc, #336]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d115      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e09a      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c2:	4b4e      	ldr	r3, [pc, #312]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d109      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e08e      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d2:	4b4a      	ldr	r3, [pc, #296]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e086      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016e2:	4b46      	ldr	r3, [pc, #280]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f023 0203 	bic.w	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4943      	ldr	r1, [pc, #268]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016f4:	f7ff f86a 	bl	80007cc <HAL_GetTick>
 80016f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fa:	e00a      	b.n	8001712 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff f866 	bl	80007cc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e06e      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	4b3a      	ldr	r3, [pc, #232]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 020c 	and.w	r2, r3, #12
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	429a      	cmp	r2, r3
 8001722:	d1eb      	bne.n	80016fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d010      	beq.n	8001752 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800173c:	429a      	cmp	r2, r3
 800173e:	d208      	bcs.n	8001752 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001740:	4b2e      	ldr	r3, [pc, #184]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	492b      	ldr	r1, [pc, #172]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001752:	4b29      	ldr	r3, [pc, #164]	@ (80017f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d210      	bcs.n	8001782 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001760:	4b25      	ldr	r3, [pc, #148]	@ (80017f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 0207 	bic.w	r2, r3, #7
 8001768:	4923      	ldr	r1, [pc, #140]	@ (80017f8 <HAL_RCC_ClockConfig+0x1ec>)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001770:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e036      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178e:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	4918      	ldr	r1, [pc, #96]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 800179c:	4313      	orrs	r3, r2
 800179e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4910      	ldr	r1, [pc, #64]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c0:	f000 f824 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017c4:	4602      	mov	r2, r0
 80017c6:	4b0d      	ldr	r3, [pc, #52]	@ (80017fc <HAL_RCC_ClockConfig+0x1f0>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	091b      	lsrs	r3, r3, #4
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	490b      	ldr	r1, [pc, #44]	@ (8001800 <HAL_RCC_ClockConfig+0x1f4>)
 80017d2:	5ccb      	ldrb	r3, [r1, r3]
 80017d4:	f003 031f 	and.w	r3, r3, #31
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
 80017dc:	4a09      	ldr	r2, [pc, #36]	@ (8001804 <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017e0:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_RCC_ClockConfig+0x1fc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe ffa1 	bl	800072c <HAL_InitTick>
 80017ea:	4603      	mov	r3, r0
 80017ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80017ee:	7afb      	ldrb	r3, [r7, #11]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40021000 	.word	0x40021000
 8001800:	08002024 	.word	0x08002024
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	@ 0x24
 8001810:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181a:	4b3e      	ldr	r3, [pc, #248]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001824:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x34>
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d121      	bne.n	800187e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d11e      	bne.n	800187e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001840:	4b34      	ldr	r3, [pc, #208]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800184c:	4b31      	ldr	r3, [pc, #196]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e005      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800185c:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001868:	4a2b      	ldr	r2, [pc, #172]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x10c>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10d      	bne.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	2b04      	cmp	r3, #4
 8001882:	d102      	bne.n	800188a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <HAL_RCC_GetSysClockFreq+0x110>)
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	e004      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d101      	bne.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001890:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x114>)
 8001892:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d134      	bne.n	8001904 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800189a:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d003      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0xac>
 80018b0:	e005      	b.n	80018be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <HAL_RCC_GetSysClockFreq+0x110>)
 80018b4:	617b      	str	r3, [r7, #20]
      break;
 80018b6:	e005      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x114>)
 80018ba:	617b      	str	r3, [r7, #20]
      break;
 80018bc:	e002      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	617b      	str	r3, [r7, #20]
      break;
 80018c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018c4:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	3301      	adds	r3, #1
 80018d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018d2:	4b10      	ldr	r3, [pc, #64]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	fb03 f202 	mul.w	r2, r3, r2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	0e5b      	lsrs	r3, r3, #25
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	3301      	adds	r3, #1
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001904:	69bb      	ldr	r3, [r7, #24]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	08002034 	.word	0x08002034
 800191c:	00f42400 	.word	0x00f42400
 8001920:	007a1200 	.word	0x007a1200

08001924 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001930:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800193c:	f7ff fa26 	bl	8000d8c <HAL_PWREx_GetVoltageRange>
 8001940:	6178      	str	r0, [r7, #20]
 8001942:	e014      	b.n	800196e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001944:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	4a24      	ldr	r2, [pc, #144]	@ (80019dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800195c:	f7ff fa16 	bl	8000d8c <HAL_PWREx_GetVoltageRange>
 8001960:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001962:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001966:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001968:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800196c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001974:	d10b      	bne.n	800198e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b80      	cmp	r3, #128	@ 0x80
 800197a:	d919      	bls.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001980:	d902      	bls.n	8001988 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001982:	2302      	movs	r3, #2
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e013      	b.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001988:	2301      	movs	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	e010      	b.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b80      	cmp	r3, #128	@ 0x80
 8001992:	d902      	bls.n	800199a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001994:	2303      	movs	r3, #3
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	e00a      	b.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b80      	cmp	r3, #128	@ 0x80
 800199e:	d102      	bne.n	80019a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019a0:	2302      	movs	r3, #2
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	e004      	b.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b70      	cmp	r3, #112	@ 0x70
 80019aa:	d101      	bne.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019ac:	2301      	movs	r3, #1
 80019ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 0207 	bic.w	r2, r3, #7
 80019b8:	4909      	ldr	r1, [pc, #36]	@ (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019c0:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40022000 	.word	0x40022000

080019e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e049      	b.n	8001a8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe fdda 	bl	80005c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f000 f8fe 	bl	8001c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_TIM_ConfigClockSource+0x1c>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e0b6      	b.n	8001c1c <HAL_TIM_ConfigClockSource+0x18a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001acc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ad0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ad8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aea:	d03e      	beq.n	8001b6a <HAL_TIM_ConfigClockSource+0xd8>
 8001aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001af0:	f200 8087 	bhi.w	8001c02 <HAL_TIM_ConfigClockSource+0x170>
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af8:	f000 8086 	beq.w	8001c08 <HAL_TIM_ConfigClockSource+0x176>
 8001afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b00:	d87f      	bhi.n	8001c02 <HAL_TIM_ConfigClockSource+0x170>
 8001b02:	2b70      	cmp	r3, #112	@ 0x70
 8001b04:	d01a      	beq.n	8001b3c <HAL_TIM_ConfigClockSource+0xaa>
 8001b06:	2b70      	cmp	r3, #112	@ 0x70
 8001b08:	d87b      	bhi.n	8001c02 <HAL_TIM_ConfigClockSource+0x170>
 8001b0a:	2b60      	cmp	r3, #96	@ 0x60
 8001b0c:	d050      	beq.n	8001bb0 <HAL_TIM_ConfigClockSource+0x11e>
 8001b0e:	2b60      	cmp	r3, #96	@ 0x60
 8001b10:	d877      	bhi.n	8001c02 <HAL_TIM_ConfigClockSource+0x170>
 8001b12:	2b50      	cmp	r3, #80	@ 0x50
 8001b14:	d03c      	beq.n	8001b90 <HAL_TIM_ConfigClockSource+0xfe>
 8001b16:	2b50      	cmp	r3, #80	@ 0x50
 8001b18:	d873      	bhi.n	8001c02 <HAL_TIM_ConfigClockSource+0x170>
 8001b1a:	2b40      	cmp	r3, #64	@ 0x40
 8001b1c:	d058      	beq.n	8001bd0 <HAL_TIM_ConfigClockSource+0x13e>
 8001b1e:	2b40      	cmp	r3, #64	@ 0x40
 8001b20:	d86f      	bhi.n	8001c02 <HAL_TIM_ConfigClockSource+0x170>
 8001b22:	2b30      	cmp	r3, #48	@ 0x30
 8001b24:	d064      	beq.n	8001bf0 <HAL_TIM_ConfigClockSource+0x15e>
 8001b26:	2b30      	cmp	r3, #48	@ 0x30
 8001b28:	d86b      	bhi.n	8001c02 <HAL_TIM_ConfigClockSource+0x170>
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d060      	beq.n	8001bf0 <HAL_TIM_ConfigClockSource+0x15e>
 8001b2e:	2b20      	cmp	r3, #32
 8001b30:	d867      	bhi.n	8001c02 <HAL_TIM_ConfigClockSource+0x170>
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d05c      	beq.n	8001bf0 <HAL_TIM_ConfigClockSource+0x15e>
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d05a      	beq.n	8001bf0 <HAL_TIM_ConfigClockSource+0x15e>
 8001b3a:	e062      	b.n	8001c02 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b4c:	f000 f98a 	bl	8001e64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001b5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	609a      	str	r2, [r3, #8]
      break;
 8001b68:	e04f      	b.n	8001c0a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b7a:	f000 f973 	bl	8001e64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b8c:	609a      	str	r2, [r3, #8]
      break;
 8001b8e:	e03c      	b.n	8001c0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f000 f8e7 	bl	8001d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2150      	movs	r1, #80	@ 0x50
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f940 	bl	8001e2e <TIM_ITRx_SetConfig>
      break;
 8001bae:	e02c      	b.n	8001c0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f000 f906 	bl	8001dce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2160      	movs	r1, #96	@ 0x60
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 f930 	bl	8001e2e <TIM_ITRx_SetConfig>
      break;
 8001bce:	e01c      	b.n	8001c0a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f000 f8c7 	bl	8001d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2140      	movs	r1, #64	@ 0x40
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 f920 	bl	8001e2e <TIM_ITRx_SetConfig>
      break;
 8001bee:	e00c      	b.n	8001c0a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 f917 	bl	8001e2e <TIM_ITRx_SetConfig>
      break;
 8001c00:	e003      	b.n	8001c0a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
      break;
 8001c06:	e000      	b.n	8001c0a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001c08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a46      	ldr	r2, [pc, #280]	@ (8001d50 <TIM_Base_SetConfig+0x12c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <TIM_Base_SetConfig+0x40>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c42:	d00f      	beq.n	8001c64 <TIM_Base_SetConfig+0x40>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a43      	ldr	r2, [pc, #268]	@ (8001d54 <TIM_Base_SetConfig+0x130>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00b      	beq.n	8001c64 <TIM_Base_SetConfig+0x40>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a42      	ldr	r2, [pc, #264]	@ (8001d58 <TIM_Base_SetConfig+0x134>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <TIM_Base_SetConfig+0x40>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a41      	ldr	r2, [pc, #260]	@ (8001d5c <TIM_Base_SetConfig+0x138>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <TIM_Base_SetConfig+0x40>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a40      	ldr	r2, [pc, #256]	@ (8001d60 <TIM_Base_SetConfig+0x13c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d108      	bne.n	8001c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a35      	ldr	r2, [pc, #212]	@ (8001d50 <TIM_Base_SetConfig+0x12c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d01f      	beq.n	8001cbe <TIM_Base_SetConfig+0x9a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c84:	d01b      	beq.n	8001cbe <TIM_Base_SetConfig+0x9a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <TIM_Base_SetConfig+0x130>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d017      	beq.n	8001cbe <TIM_Base_SetConfig+0x9a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a31      	ldr	r2, [pc, #196]	@ (8001d58 <TIM_Base_SetConfig+0x134>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <TIM_Base_SetConfig+0x9a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a30      	ldr	r2, [pc, #192]	@ (8001d5c <TIM_Base_SetConfig+0x138>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00f      	beq.n	8001cbe <TIM_Base_SetConfig+0x9a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <TIM_Base_SetConfig+0x13c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00b      	beq.n	8001cbe <TIM_Base_SetConfig+0x9a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a2e      	ldr	r2, [pc, #184]	@ (8001d64 <TIM_Base_SetConfig+0x140>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d007      	beq.n	8001cbe <TIM_Base_SetConfig+0x9a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d68 <TIM_Base_SetConfig+0x144>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d003      	beq.n	8001cbe <TIM_Base_SetConfig+0x9a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001d6c <TIM_Base_SetConfig+0x148>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d108      	bne.n	8001cd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <TIM_Base_SetConfig+0x12c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00f      	beq.n	8001d1c <TIM_Base_SetConfig+0xf8>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <TIM_Base_SetConfig+0x13c>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00b      	beq.n	8001d1c <TIM_Base_SetConfig+0xf8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <TIM_Base_SetConfig+0x140>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <TIM_Base_SetConfig+0xf8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <TIM_Base_SetConfig+0x144>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d003      	beq.n	8001d1c <TIM_Base_SetConfig+0xf8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a15      	ldr	r2, [pc, #84]	@ (8001d6c <TIM_Base_SetConfig+0x148>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d103      	bne.n	8001d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d105      	bne.n	8001d42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f023 0201 	bic.w	r2, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	611a      	str	r2, [r3, #16]
  }
}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40000800 	.word	0x40000800
 8001d5c:	40000c00 	.word	0x40000c00
 8001d60:	40013400 	.word	0x40013400
 8001d64:	40014000 	.word	0x40014000
 8001d68:	40014400 	.word	0x40014400
 8001d6c:	40014800 	.word	0x40014800

08001d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	f023 0201 	bic.w	r2, r3, #1
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f023 030a 	bic.w	r3, r3, #10
 8001dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	621a      	str	r2, [r3, #32]
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b087      	sub	sp, #28
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f023 0210 	bic.w	r2, r3, #16
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	031b      	lsls	r3, r3, #12
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001e0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	621a      	str	r2, [r3, #32]
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b085      	sub	sp, #20
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f043 0307 	orr.w	r3, r3, #7
 8001e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	609a      	str	r2, [r3, #8]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	021a      	lsls	r2, r3, #8
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	609a      	str	r2, [r3, #8]
}
 8001e98:	bf00      	nop
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001eb8:	2302      	movs	r3, #2
 8001eba:	e068      	b.n	8001f8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8001f9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d108      	bne.n	8001f02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001ef6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1e      	ldr	r2, [pc, #120]	@ (8001f9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01d      	beq.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f2e:	d018      	beq.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00e      	beq.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a13      	ldr	r2, [pc, #76]	@ (8001fa0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a14      	ldr	r2, [pc, #80]	@ (8001fb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10c      	bne.n	8001f7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00
 8001fa0:	40013400 	.word	0x40013400
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40000c00 	.word	0x40000c00
 8001fb0:	40014000 	.word	0x40014000

08001fb4 <memset>:
 8001fb4:	4402      	add	r2, r0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d100      	bne.n	8001fbe <memset+0xa>
 8001fbc:	4770      	bx	lr
 8001fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8001fc2:	e7f9      	b.n	8001fb8 <memset+0x4>

08001fc4 <__libc_init_array>:
 8001fc4:	b570      	push	{r4, r5, r6, lr}
 8001fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8001ffc <__libc_init_array+0x38>)
 8001fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8002000 <__libc_init_array+0x3c>)
 8001fca:	1b64      	subs	r4, r4, r5
 8001fcc:	10a4      	asrs	r4, r4, #2
 8001fce:	2600      	movs	r6, #0
 8001fd0:	42a6      	cmp	r6, r4
 8001fd2:	d109      	bne.n	8001fe8 <__libc_init_array+0x24>
 8001fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8002004 <__libc_init_array+0x40>)
 8001fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8002008 <__libc_init_array+0x44>)
 8001fd8:	f000 f818 	bl	800200c <_init>
 8001fdc:	1b64      	subs	r4, r4, r5
 8001fde:	10a4      	asrs	r4, r4, #2
 8001fe0:	2600      	movs	r6, #0
 8001fe2:	42a6      	cmp	r6, r4
 8001fe4:	d105      	bne.n	8001ff2 <__libc_init_array+0x2e>
 8001fe6:	bd70      	pop	{r4, r5, r6, pc}
 8001fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fec:	4798      	blx	r3
 8001fee:	3601      	adds	r6, #1
 8001ff0:	e7ee      	b.n	8001fd0 <__libc_init_array+0xc>
 8001ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ff6:	4798      	blx	r3
 8001ff8:	3601      	adds	r6, #1
 8001ffa:	e7f2      	b.n	8001fe2 <__libc_init_array+0x1e>
 8001ffc:	08002064 	.word	0x08002064
 8002000:	08002064 	.word	0x08002064
 8002004:	08002064 	.word	0x08002064
 8002008:	08002068 	.word	0x08002068

0800200c <_init>:
 800200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200e:	bf00      	nop
 8002010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002012:	bc08      	pop	{r3}
 8002014:	469e      	mov	lr, r3
 8002016:	4770      	bx	lr

08002018 <_fini>:
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	bf00      	nop
 800201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800201e:	bc08      	pop	{r3}
 8002020:	469e      	mov	lr, r3
 8002022:	4770      	bx	lr
