
NMEA_Frame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800bcc8  0800bcc8  0000ccc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f0  0800c1f0  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1f0  0800c1f0  0000d1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1f8  0800c1f8  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1f8  0800c1f8  0000d1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1fc  0800c1fc  0000d1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c200  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001d4  0800c3d4  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800c3d4  0000e72c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cedc  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d33  00000000  00000000  0002b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  0002ee18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000141b  00000000  00000000  000307e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bca9  00000000  00000000  00031bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002150a  00000000  00000000  0005d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cf7d  00000000  00000000  0007edae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018bd2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080a0  00000000  00000000  0018bd70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00193e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcb0 	.word	0x0800bcb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800bcb0 	.word	0x0800bcb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9a0 	b.w	8000f40 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14e      	bne.n	8000d2e <__udivmoddi4+0xaa>
 8000c90:	4694      	mov	ip, r2
 8000c92:	458c      	cmp	ip, r1
 8000c94:	4686      	mov	lr, r0
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	d962      	bls.n	8000d62 <__udivmoddi4+0xde>
 8000c9c:	b14a      	cbz	r2, 8000cb2 <__udivmoddi4+0x2e>
 8000c9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ca2:	4091      	lsls	r1, r2
 8000ca4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	4319      	orrs	r1, r3
 8000cae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb6:	fa1f f68c 	uxth.w	r6, ip
 8000cba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb04 f106 	mul.w	r1, r4, r6
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x64>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cda:	f080 8112 	bcs.w	8000f02 <__udivmoddi4+0x27e>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 810f 	bls.w	8000f02 <__udivmoddi4+0x27e>
 8000ce4:	3c02      	subs	r4, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a59      	subs	r1, r3, r1
 8000cea:	fa1f f38e 	uxth.w	r3, lr
 8000cee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f606 	mul.w	r6, r0, r6
 8000cfe:	429e      	cmp	r6, r3
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x94>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0a:	f080 80fc 	bcs.w	8000f06 <__udivmoddi4+0x282>
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	f240 80f9 	bls.w	8000f06 <__udivmoddi4+0x282>
 8000d14:	4463      	add	r3, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	1b9b      	subs	r3, r3, r6
 8000d1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa6>
 8000d22:	40d3      	lsrs	r3, r2
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xba>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb4>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x150>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xcc>
 8000d4a:	4290      	cmp	r0, r2
 8000d4c:	f0c0 80f0 	bcc.w	8000f30 <__udivmoddi4+0x2ac>
 8000d50:	1a86      	subs	r6, r0, r2
 8000d52:	eb64 0303 	sbc.w	r3, r4, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	2d00      	cmp	r5, #0
 8000d5a:	d0e6      	beq.n	8000d2a <__udivmoddi4+0xa6>
 8000d5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d60:	e7e3      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x204>
 8000d68:	eba1 040c 	sub.w	r4, r1, ip
 8000d6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d70:	fa1f f78c 	uxth.w	r7, ip
 8000d74:	2101      	movs	r1, #1
 8000d76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb07 f006 	mul.w	r0, r7, r6
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x11c>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x11a>
 8000d98:	4298      	cmp	r0, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2b4>
 8000d9e:	4626      	mov	r6, r4
 8000da0:	1a1c      	subs	r4, r3, r0
 8000da2:	fa1f f38e 	uxth.w	r3, lr
 8000da6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000daa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db2:	fb00 f707 	mul.w	r7, r0, r7
 8000db6:	429f      	cmp	r7, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x148>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x146>
 8000dc4:	429f      	cmp	r7, r3
 8000dc6:	f200 80b0 	bhi.w	8000f2a <__udivmoddi4+0x2a6>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	1bdb      	subs	r3, r3, r7
 8000dce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x9c>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de4:	fa04 f301 	lsl.w	r3, r4, r1
 8000de8:	ea43 030c 	orr.w	r3, r3, ip
 8000dec:	40f4      	lsrs	r4, r6
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	0c38      	lsrs	r0, r7, #16
 8000df4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000df8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dfc:	fa1f fc87 	uxth.w	ip, r7
 8000e00:	fb00 441e 	mls	r4, r0, lr, r4
 8000e04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e08:	fb0e f90c 	mul.w	r9, lr, ip
 8000e0c:	45a1      	cmp	r9, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d90a      	bls.n	8000e2a <__udivmoddi4+0x1a6>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1a:	f080 8084 	bcs.w	8000f26 <__udivmoddi4+0x2a2>
 8000e1e:	45a1      	cmp	r9, r4
 8000e20:	f240 8081 	bls.w	8000f26 <__udivmoddi4+0x2a2>
 8000e24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	eba4 0409 	sub.w	r4, r4, r9
 8000e2e:	fa1f f983 	uxth.w	r9, r3
 8000e32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e36:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1d2>
 8000e46:	193c      	adds	r4, r7, r4
 8000e48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e4c:	d267      	bcs.n	8000f1e <__udivmoddi4+0x29a>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d965      	bls.n	8000f1e <__udivmoddi4+0x29a>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	429c      	cmp	r4, r3
 8000e64:	46ce      	mov	lr, r9
 8000e66:	469c      	mov	ip, r3
 8000e68:	d351      	bcc.n	8000f0e <__udivmoddi4+0x28a>
 8000e6a:	d04e      	beq.n	8000f0a <__udivmoddi4+0x286>
 8000e6c:	b155      	cbz	r5, 8000e84 <__udivmoddi4+0x200>
 8000e6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e72:	eb64 040c 	sbc.w	r4, r4, ip
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	40cb      	lsrs	r3, r1
 8000e7c:	431e      	orrs	r6, r3
 8000e7e:	40cc      	lsrs	r4, r1
 8000e80:	e9c5 6400 	strd	r6, r4, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	e750      	b.n	8000d2a <__udivmoddi4+0xa6>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e94:	fa24 f303 	lsr.w	r3, r4, r3
 8000e98:	4094      	lsls	r4, r2
 8000e9a:	430c      	orrs	r4, r1
 8000e9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eac:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb0:	0c23      	lsrs	r3, r4, #16
 8000eb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb6:	fb00 f107 	mul.w	r1, r0, r7
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x24c>
 8000ebe:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ec6:	d22c      	bcs.n	8000f22 <__udivmoddi4+0x29e>
 8000ec8:	4299      	cmp	r1, r3
 8000eca:	d92a      	bls.n	8000f22 <__udivmoddi4+0x29e>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ed8:	fb08 3311 	mls	r3, r8, r1, r3
 8000edc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee0:	fb01 f307 	mul.w	r3, r1, r7
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x276>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef0:	d213      	bcs.n	8000f1a <__udivmoddi4+0x296>
 8000ef2:	42a3      	cmp	r3, r4
 8000ef4:	d911      	bls.n	8000f1a <__udivmoddi4+0x296>
 8000ef6:	3902      	subs	r1, #2
 8000ef8:	4464      	add	r4, ip
 8000efa:	1ae4      	subs	r4, r4, r3
 8000efc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f00:	e739      	b.n	8000d76 <__udivmoddi4+0xf2>
 8000f02:	4604      	mov	r4, r0
 8000f04:	e6f0      	b.n	8000ce8 <__udivmoddi4+0x64>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e706      	b.n	8000d18 <__udivmoddi4+0x94>
 8000f0a:	45c8      	cmp	r8, r9
 8000f0c:	d2ae      	bcs.n	8000e6c <__udivmoddi4+0x1e8>
 8000f0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f16:	3801      	subs	r0, #1
 8000f18:	e7a8      	b.n	8000e6c <__udivmoddi4+0x1e8>
 8000f1a:	4631      	mov	r1, r6
 8000f1c:	e7ed      	b.n	8000efa <__udivmoddi4+0x276>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	e799      	b.n	8000e56 <__udivmoddi4+0x1d2>
 8000f22:	4630      	mov	r0, r6
 8000f24:	e7d4      	b.n	8000ed0 <__udivmoddi4+0x24c>
 8000f26:	46d6      	mov	lr, sl
 8000f28:	e77f      	b.n	8000e2a <__udivmoddi4+0x1a6>
 8000f2a:	4463      	add	r3, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e74d      	b.n	8000dcc <__udivmoddi4+0x148>
 8000f30:	4606      	mov	r6, r0
 8000f32:	4623      	mov	r3, r4
 8000f34:	4608      	mov	r0, r1
 8000f36:	e70f      	b.n	8000d58 <__udivmoddi4+0xd4>
 8000f38:	3e02      	subs	r6, #2
 8000f3a:	4463      	add	r3, ip
 8000f3c:	e730      	b.n	8000da0 <__udivmoddi4+0x11c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f66:	4b30      	ldr	r3, [pc, #192]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f68:	4a30      	ldr	r2, [pc, #192]	@ (800102c <MX_ADC1_Init+0xe8>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f72:	4b2d      	ldr	r3, [pc, #180]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f78:	4b2b      	ldr	r3, [pc, #172]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f8a:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f90:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f96:	4b24      	ldr	r3, [pc, #144]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f9c:	4b22      	ldr	r3, [pc, #136]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000fa4:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000fa6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000faa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000fae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fca:	4817      	ldr	r0, [pc, #92]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000fcc:	f001 fd74 	bl	8002ab8 <HAL_ADC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000fd6:	f000 fac9 	bl	800156c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4810      	ldr	r0, [pc, #64]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8000fe6:	f002 fd39 	bl	8003a5c <HAL_ADCEx_MultiModeConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000ff0:	f000 fabc 	bl	800156c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_ADC1_Init+0xec>)
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001000:	237f      	movs	r3, #127	@ 0x7f
 8001002:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001004:	2304      	movs	r3, #4
 8001006:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_ADC1_Init+0xe4>)
 8001012:	f002 f8d9 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800101c:	f000 faa6 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	@ 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001f0 	.word	0x200001f0
 800102c:	50040000 	.word	0x50040000
 8001030:	25b00200 	.word	0x25b00200

08001034 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b0ac      	sub	sp, #176	@ 0xb0
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2288      	movs	r2, #136	@ 0x88
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f008 fa72 	bl	800953e <memset>
  if(adcHandle->Instance==ADC1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a2b      	ldr	r2, [pc, #172]	@ (800110c <HAL_ADC_MspInit+0xd8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d14f      	bne.n	8001104 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001064:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001068:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800106a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800106e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001076:	2301      	movs	r3, #1
 8001078:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800107a:	2308      	movs	r3, #8
 800107c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800107e:	2307      	movs	r3, #7
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800108a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4618      	mov	r0, r3
 8001096:	f004 f86b 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80010a0:	f000 fa64 	bl	800156c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <HAL_ADC_MspInit+0xdc>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a19      	ldr	r2, [pc, #100]	@ (8001110 <HAL_ADC_MspInit+0xdc>)
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <HAL_ADC_MspInit+0xdc>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_ADC_MspInit+0xdc>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a13      	ldr	r2, [pc, #76]	@ (8001110 <HAL_ADC_MspInit+0xdc>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_ADC_MspInit+0xdc>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010d4:	2310      	movs	r3, #16
 80010d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010da:	230b      	movs	r3, #11
 80010dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f0:	f002 fe90 	bl	8003e14 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2012      	movs	r0, #18
 80010fa:	f002 fe17 	bl	8003d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010fe:	2012      	movs	r0, #18
 8001100:	f002 fe30 	bl	8003d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001104:	bf00      	nop
 8001106:	37b0      	adds	r7, #176	@ 0xb0
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	50040000 	.word	0x50040000
 8001110:	40021000 	.word	0x40021000

08001114 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a65      	ldr	r2, [pc, #404]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b63      	ldr	r3, [pc, #396]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	4b60      	ldr	r3, [pc, #384]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	4a5f      	ldr	r2, [pc, #380]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800114c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114e:	4b5d      	ldr	r3, [pc, #372]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115e:	4a59      	ldr	r2, [pc, #356]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001166:	4b57      	ldr	r3, [pc, #348]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b54      	ldr	r3, [pc, #336]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	4a53      	ldr	r2, [pc, #332]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117e:	4b51      	ldr	r3, [pc, #324]	@ (80012c4 <MX_GPIO_Init+0x1b0>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2101      	movs	r1, #1
 800118e:	484e      	ldr	r0, [pc, #312]	@ (80012c8 <MX_GPIO_Init+0x1b4>)
 8001190:	f002 ffea 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 611a 	mov.w	r1, #2464	@ 0x9a0
 800119a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119e:	f002 ffe3 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 80011a2:	2200      	movs	r2, #0
 80011a4:	f24e 0136 	movw	r1, #57398	@ 0xe036
 80011a8:	4848      	ldr	r0, [pc, #288]	@ (80012cc <MX_GPIO_Init+0x1b8>)
 80011aa:	f002 ffdd 	bl	8004168 <HAL_GPIO_WritePin>
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2180      	movs	r1, #128	@ 0x80
 80011b2:	4845      	ldr	r0, [pc, #276]	@ (80012c8 <MX_GPIO_Init+0x1b4>)
 80011b4:	f002 ffd8 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_ENN_GPIO_Port, STEPPER_ENN_Pin, GPIO_PIN_SET);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f002 ffd1 	bl	8004168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	483a      	ldr	r0, [pc, #232]	@ (80012c8 <MX_GPIO_Init+0x1b4>)
 80011de:	f002 fe19 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_0_Pin;
 80011e2:	2381      	movs	r3, #129	@ 0x81
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4833      	ldr	r0, [pc, #204]	@ (80012c8 <MX_GPIO_Init+0x1b4>)
 80011fa:	f002 fe0b 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAGNETO_STATUS_Pin;
 80011fe:	2302      	movs	r3, #2
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAGNETO_STATUS_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	482d      	ldr	r0, [pc, #180]	@ (80012c8 <MX_GPIO_Init+0x1b4>)
 8001212:	f002 fdff 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin
 8001216:	f44f 53cd 	mov.w	r3, #6560	@ 0x19a0
 800121a:	617b      	str	r3, [r7, #20]
                          |STEPPER_ENN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001232:	f002 fdef 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin|BTN_CENTER_Pin|BTN_LEFT_Pin|BTN_TOP_Pin
 8001236:	f44f 735c 	mov.w	r3, #880	@ 0x370
 800123a:	617b      	str	r3, [r7, #20]
                          |BTN_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800123c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	481e      	ldr	r0, [pc, #120]	@ (80012c8 <MX_GPIO_Init+0x1b4>)
 800124e:	f002 fde1 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MAGNETO_INT_Pin|BTN_BOTTOM_Pin;
 8001252:	f640 0301 	movw	r3, #2049	@ 0x801
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001258:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4818      	ldr	r0, [pc, #96]	@ (80012cc <MX_GPIO_Init+0x1b8>)
 800126a:	f002 fdd3 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 800126e:	f24e 0336 	movw	r3, #57398	@ 0xe036
 8001272:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4811      	ldr	r0, [pc, #68]	@ (80012cc <MX_GPIO_Init+0x1b8>)
 8001288:	f002 fdc4 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 800128c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a6:	f002 fdb5 	bl	8003e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2028      	movs	r0, #40	@ 0x28
 80012b0:	f002 fd3c 	bl	8003d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b4:	2028      	movs	r0, #40	@ 0x28
 80012b6:	f002 fd55 	bl	8003d64 <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	@ 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48000800 	.word	0x48000800
 80012cc:	48000400 	.word	0x48000400

080012d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_I2C1_Init+0x74>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <MX_I2C1_Init+0x78>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_I2C1_Init+0x74>)
 80012dc:	4a1b      	ldr	r2, [pc, #108]	@ (800134c <MX_I2C1_Init+0x7c>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_I2C1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_I2C1_Init+0x74>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_I2C1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_I2C1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_I2C1_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130a:	480e      	ldr	r0, [pc, #56]	@ (8001344 <MX_I2C1_Init+0x74>)
 800130c:	f002 ff67 	bl	80041de <HAL_I2C_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001316:	f000 f929 	bl	800156c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131a:	2100      	movs	r1, #0
 800131c:	4809      	ldr	r0, [pc, #36]	@ (8001344 <MX_I2C1_Init+0x74>)
 800131e:	f002 fff9 	bl	8004314 <HAL_I2CEx_ConfigAnalogFilter>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001328:	f000 f920 	bl	800156c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800132c:	2100      	movs	r1, #0
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_I2C1_Init+0x74>)
 8001330:	f003 f83b 	bl	80043aa <HAL_I2CEx_ConfigDigitalFilter>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800133a:	f000 f917 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000254 	.word	0x20000254
 8001348:	40005400 	.word	0x40005400
 800134c:	10909cec 	.word	0x10909cec

08001350 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0ac      	sub	sp, #176	@ 0xb0
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2288      	movs	r2, #136	@ 0x88
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f008 f8e4 	bl	800953e <memset>
  if(i2cHandle->Instance==I2C1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <HAL_I2C_MspInit+0xb0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d13a      	bne.n	80013f6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001380:	2340      	movs	r3, #64	@ 0x40
 8001382:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001384:	2300      	movs	r3, #0
 8001386:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4618      	mov	r0, r3
 800138e:	f003 feef 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001398:	f000 f8e8 	bl	800156c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <HAL_I2C_MspInit+0xb4>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a0:	4a18      	ldr	r2, [pc, #96]	@ (8001404 <HAL_I2C_MspInit+0xb4>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a8:	4b16      	ldr	r3, [pc, #88]	@ (8001404 <HAL_I2C_MspInit+0xb4>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013b4:	23c0      	movs	r3, #192	@ 0xc0
 80013b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ba:	2312      	movs	r3, #18
 80013bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013cc:	2304      	movs	r3, #4
 80013ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013d6:	4619      	mov	r1, r3
 80013d8:	480b      	ldr	r0, [pc, #44]	@ (8001408 <HAL_I2C_MspInit+0xb8>)
 80013da:	f002 fd1b 	bl	8003e14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_I2C_MspInit+0xb4>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	4a08      	ldr	r2, [pc, #32]	@ (8001404 <HAL_I2C_MspInit+0xb4>)
 80013e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_I2C_MspInit+0xb4>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013f6:	bf00      	nop
 80013f8:	37b0      	adds	r7, #176	@ 0xb0
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40005400 	.word	0x40005400
 8001404:	40021000 	.word	0x40021000
 8001408:	48000400 	.word	0x48000400

0800140c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001414:	1d39      	adds	r1, r7, #4
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	2201      	movs	r2, #1
 800141c:	4803      	ldr	r0, [pc, #12]	@ (800142c <__io_putchar+0x20>)
 800141e:	f005 fdeb 	bl	8006ff8 <HAL_UART_Transmit>
	return ch;
 8001422:	687b      	ldr	r3, [r7, #4]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200004c8 	.word	0x200004c8

08001430 <__io_getchar>:



int __io_getchar(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <__io_getchar+0x38>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2208      	movs	r2, #8
 8001440:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001442:	1df9      	adds	r1, r7, #7
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	2201      	movs	r2, #1
 800144a:	4807      	ldr	r0, [pc, #28]	@ (8001468 <__io_getchar+0x38>)
 800144c:	f005 fe5d 	bl	800710a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001450:	1df9      	adds	r1, r7, #7
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	2201      	movs	r2, #1
 8001458:	4803      	ldr	r0, [pc, #12]	@ (8001468 <__io_getchar+0x38>)
 800145a:	f005 fdcd 	bl	8006ff8 <HAL_UART_Transmit>
	return ch;
 800145e:	79fb      	ldrb	r3, [r7, #7]

}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200004c8 	.word	0x200004c8

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001470:	f001 f914 	bl	800269c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001474:	f000 f817 	bl	80014a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001478:	f7ff fe4c 	bl	8001114 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800147c:	f000 fcea 	bl	8001e54 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001480:	f7ff ff26 	bl	80012d0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001484:	f000 f878 	bl	8001578 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001488:	f000 faea 	bl	8001a60 <MX_TIM2_Init>
  MX_TIM3_Init();
 800148c:	f000 fb3c 	bl	8001b08 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001490:	f000 fcb0 	bl	8001df4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001494:	f7ff fd56 	bl	8000f44 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001498:	f000 fbae 	bl	8001bf8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800149c:	f000 fdac 	bl	8001ff8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80014a0:	f000 fdb4 	bl	800200c <loop>
 80014a4:	e7fc      	b.n	80014a0 <main+0x34>

080014a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b096      	sub	sp, #88	@ 0x58
 80014aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2244      	movs	r2, #68	@ 0x44
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f008 f842 	bl	800953e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ba:	463b      	mov	r3, r7
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014cc:	f002 ffc8 	bl	8004460 <HAL_PWREx_ControlVoltageScaling>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014d6:	f000 f849 	bl	800156c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014da:	2302      	movs	r3, #2
 80014dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e4:	2310      	movs	r3, #16
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e8:	2302      	movs	r3, #2
 80014ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ec:	2302      	movs	r3, #2
 80014ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014f4:	230a      	movs	r3, #10
 80014f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014f8:	2307      	movs	r3, #7
 80014fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4618      	mov	r0, r3
 800150a:	f002 ffff 	bl	800450c <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001514:	f000 f82a 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001518:	230f      	movs	r3, #15
 800151a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151c:	2303      	movs	r3, #3
 800151e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	2104      	movs	r1, #4
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fbc7 	bl	8004cc4 <HAL_RCC_ClockConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800153c:	f000 f816 	bl	800156c <Error_Handler>
  }
}
 8001540:	bf00      	nop
 8001542:	3758      	adds	r7, #88	@ 0x58
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155a:	f001 f8bf 	bl	80026dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40001000 	.word	0x40001000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
}
 8001572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <Error_Handler+0x8>

08001578 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <MX_SPI2_Init+0x74>)
 800157e:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <MX_SPI2_Init+0x78>)
 8001580:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001582:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <MX_SPI2_Init+0x74>)
 8001584:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001588:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <MX_SPI2_Init+0x74>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <MX_SPI2_Init+0x74>)
 8001592:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001596:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_SPI2_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015aa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015ae:	2230      	movs	r2, #48	@ 0x30
 80015b0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015c6:	2207      	movs	r2, #7
 80015c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_SPI2_Init+0x74>)
 80015d8:	f004 fa86 	bl	8005ae8 <HAL_SPI_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015e2:	f7ff ffc3 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200002a8 	.word	0x200002a8
 80015f0:	40003800 	.word	0x40003800

080015f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a25      	ldr	r2, [pc, #148]	@ (80016a8 <HAL_SPI_MspInit+0xb4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d144      	bne.n	80016a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001616:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <HAL_SPI_MspInit+0xb8>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161a:	4a24      	ldr	r2, [pc, #144]	@ (80016ac <HAL_SPI_MspInit+0xb8>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001620:	6593      	str	r3, [r2, #88]	@ 0x58
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <HAL_SPI_MspInit+0xb8>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_SPI_MspInit+0xb8>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <HAL_SPI_MspInit+0xb8>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <HAL_SPI_MspInit+0xb8>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_SPI_MspInit+0xb8>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <HAL_SPI_MspInit+0xb8>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <HAL_SPI_MspInit+0xb8>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800165e:	230c      	movs	r3, #12
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800166e:	2305      	movs	r3, #5
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <HAL_SPI_MspInit+0xbc>)
 800167a:	f002 fbcb 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800167e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001690:	2305      	movs	r3, #5
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <HAL_SPI_MspInit+0xc0>)
 800169c:	f002 fbba 	bl	8003e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	@ 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40003800 	.word	0x40003800
 80016ac:	40021000 	.word	0x40021000
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000400 	.word	0x48000400

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_MspInit+0x44>)
 80016c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c2:	4a0e      	ldr	r2, [pc, #56]	@ (80016fc <HAL_MspInit+0x44>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <HAL_MspInit+0x44>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b09      	ldr	r3, [pc, #36]	@ (80016fc <HAL_MspInit+0x44>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016da:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <HAL_MspInit+0x44>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_MspInit+0x44>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08e      	sub	sp, #56	@ 0x38
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800170e:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <HAL_InitTick+0xe0>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001712:	4a33      	ldr	r2, [pc, #204]	@ (80017e0 <HAL_InitTick+0xe0>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	6593      	str	r3, [r2, #88]	@ 0x58
 800171a:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <HAL_InitTick+0xe0>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001726:	f107 0210 	add.w	r2, r7, #16
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f003 fc8b 	bl	800504c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800173a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d103      	bne.n	8001748 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001740:	f003 fc58 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8001744:	6378      	str	r0, [r7, #52]	@ 0x34
 8001746:	e004      	b.n	8001752 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001748:	f003 fc54 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 800174c:	4603      	mov	r3, r0
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001754:	4a23      	ldr	r2, [pc, #140]	@ (80017e4 <HAL_InitTick+0xe4>)
 8001756:	fba2 2303 	umull	r2, r3, r2, r3
 800175a:	0c9b      	lsrs	r3, r3, #18
 800175c:	3b01      	subs	r3, #1
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001760:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <HAL_InitTick+0xe8>)
 8001762:	4a22      	ldr	r2, [pc, #136]	@ (80017ec <HAL_InitTick+0xec>)
 8001764:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <HAL_InitTick+0xe8>)
 8001768:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800176c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800176e:	4a1e      	ldr	r2, [pc, #120]	@ (80017e8 <HAL_InitTick+0xe8>)
 8001770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001772:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001774:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <HAL_InitTick+0xe8>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <HAL_InitTick+0xe8>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <HAL_InitTick+0xe8>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001786:	4818      	ldr	r0, [pc, #96]	@ (80017e8 <HAL_InitTick+0xe8>)
 8001788:	f004 fa51 	bl	8005c2e <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001792:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11b      	bne.n	80017d2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800179a:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <HAL_InitTick+0xe8>)
 800179c:	f004 fa9e 	bl	8005cdc <HAL_TIM_Base_Start_IT>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d111      	bne.n	80017d2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ae:	2036      	movs	r0, #54	@ 0x36
 80017b0:	f002 fad8 	bl	8003d64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b0f      	cmp	r3, #15
 80017b8:	d808      	bhi.n	80017cc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017ba:	2200      	movs	r2, #0
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	2036      	movs	r0, #54	@ 0x36
 80017c0:	f002 fab4 	bl	8003d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_InitTick+0xf0>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e002      	b.n	80017d2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3738      	adds	r7, #56	@ 0x38
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	2000030c 	.word	0x2000030c
 80017ec:	40001000 	.word	0x40001000
 80017f0:	20000004 	.word	0x20000004

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <NMI_Handler+0x4>

080017fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <MemManage_Handler+0x4>

0800180c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <UsageFault_Handler+0x4>

0800181c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <ADC1_2_IRQHandler+0x10>)
 800185a:	f001 fa7d 	bl	8002d58 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200001f0 	.word	0x200001f0

08001868 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <TIM4_IRQHandler+0x10>)
 800186e:	f004 fbac 	bl	8005fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200003f4 	.word	0x200003f4

0800187c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_BOTTOM_Pin);
 8001880:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001884:	f002 fc88 	bl	8004198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001888:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800188c:	f002 fc84 	bl	8004198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001890:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001894:	f002 fc80 	bl	8004198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <TIM6_DAC_IRQHandler+0x10>)
 80018a2:	f004 fb92 	bl	8005fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000030c 	.word	0x2000030c

080018b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_kill>:

int _kill(int pid, int sig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ca:	f007 feaf 	bl	800962c <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2216      	movs	r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
  return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_exit>:

void _exit (int status)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffe7 	bl	80018c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018f2:	bf00      	nop
 80018f4:	e7fd      	b.n	80018f2 <_exit+0x12>

080018f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e00a      	b.n	800191e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001908:	f7ff fd92 	bl	8001430 <__io_getchar>
 800190c:	4601      	mov	r1, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1c5a      	adds	r2, r3, #1
 8001912:	60ba      	str	r2, [r7, #8]
 8001914:	b2ca      	uxtb	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	dbf0      	blt.n	8001908 <_read+0x12>
  }

  return len;
 8001926:	687b      	ldr	r3, [r7, #4]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e009      	b.n	8001956 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	60ba      	str	r2, [r7, #8]
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fd5e 	bl	800140c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbf1      	blt.n	8001942 <_write+0x12>
  }
  return len;
 800195e:	687b      	ldr	r3, [r7, #4]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_close>:

int _close(int file)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001990:	605a      	str	r2, [r3, #4]
  return 0;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_isatty>:

int _isatty(int file)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f007 fe14 	bl	800962c <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20018000 	.word	0x20018000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	20000358 	.word	0x20000358
 8001a38:	20000730 	.word	0x20000730

08001a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	@ (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	@ 0x30
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2224      	movs	r2, #36	@ 0x24
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f007 fd65 	bl	800953e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <MX_TIM2_Init+0xa4>)
 8001a80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <MX_TIM2_Init+0xa4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <MX_TIM2_Init+0xa4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <MX_TIM2_Init+0xa4>)
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295
 8001a98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <MX_TIM2_Init+0xa4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa0:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <MX_TIM2_Init+0xa4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aba:	2300      	movs	r3, #0
 8001abc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <MX_TIM2_Init+0xa4>)
 8001ad2:	f004 f9d4 	bl	8005e7e <HAL_TIM_Encoder_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001adc:	f7ff fd46 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <MX_TIM2_Init+0xa4>)
 8001aee:	f005 f98f 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001af8:	f7ff fd38 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001afc:	bf00      	nop
 8001afe:	3730      	adds	r7, #48	@ 0x30
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	2000035c 	.word	0x2000035c

08001b08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08e      	sub	sp, #56	@ 0x38
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	615a      	str	r2, [r3, #20]
 8001b38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001b3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf4 <MX_TIM3_Init+0xec>)
 8001b3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b40:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b46:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b4c:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001b4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b54:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5a:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b60:	4823      	ldr	r0, [pc, #140]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001b62:	f004 f864 	bl	8005c2e <HAL_TIM_Base_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b6c:	f7ff fcfe 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	481c      	ldr	r0, [pc, #112]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001b7e:	f004 fc3f 	bl	8006400 <HAL_TIM_ConfigClockSource>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b88:	f7ff fcf0 	bl	800156c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b8c:	4818      	ldr	r0, [pc, #96]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001b8e:	f004 f915 	bl	8005dbc <HAL_TIM_PWM_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b98:	f7ff fce8 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4811      	ldr	r0, [pc, #68]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001bac:	f005 f930 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bb6:	f7ff fcd9 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bba:	2360      	movs	r3, #96	@ 0x60
 8001bbc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4807      	ldr	r0, [pc, #28]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001bd2:	f004 fb01 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001bdc:	f7ff fcc6 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001be0:	4803      	ldr	r0, [pc, #12]	@ (8001bf0 <MX_TIM3_Init+0xe8>)
 8001be2:	f000 f8d1 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8001be6:	bf00      	nop
 8001be8:	3738      	adds	r7, #56	@ 0x38
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200003a8 	.word	0x200003a8
 8001bf4:	40000400 	.word	0x40000400

08001bf8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <MX_TIM4_Init+0x94>)
 8001c18:	4a1d      	ldr	r2, [pc, #116]	@ (8001c90 <MX_TIM4_Init+0x98>)
 8001c1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <MX_TIM4_Init+0x94>)
 8001c1e:	224f      	movs	r2, #79	@ 0x4f
 8001c20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <MX_TIM4_Init+0x94>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <MX_TIM4_Init+0x94>)
 8001c2a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <MX_TIM4_Init+0x94>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <MX_TIM4_Init+0x94>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c3c:	4813      	ldr	r0, [pc, #76]	@ (8001c8c <MX_TIM4_Init+0x94>)
 8001c3e:	f003 fff6 	bl	8005c2e <HAL_TIM_Base_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001c48:	f7ff fc90 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c52:	f107 0310 	add.w	r3, r7, #16
 8001c56:	4619      	mov	r1, r3
 8001c58:	480c      	ldr	r0, [pc, #48]	@ (8001c8c <MX_TIM4_Init+0x94>)
 8001c5a:	f004 fbd1 	bl	8006400 <HAL_TIM_ConfigClockSource>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c64:	f7ff fc82 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <MX_TIM4_Init+0x94>)
 8001c76:	f005 f8cb 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c80:	f7ff fc74 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200003f4 	.word	0x200003f4
 8001c90:	40000800 	.word	0x40000800

08001c94 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	@ 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb4:	d128      	bne.n	8001d08 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cba:	4a15      	ldr	r2, [pc, #84]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc2:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cda:	4b0d      	ldr	r3, [pc, #52]	@ (8001d10 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d04:	f002 f886 	bl	8003e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	@ 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a16      	ldr	r2, [pc, #88]	@ (8001d7c <HAL_TIM_Base_MspInit+0x68>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d10c      	bne.n	8001d40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d26:	4b16      	ldr	r3, [pc, #88]	@ (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2a:	4a15      	ldr	r2, [pc, #84]	@ (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d32:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d3e:	e018      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0f      	ldr	r2, [pc, #60]	@ (8001d84 <HAL_TIM_Base_MspInit+0x70>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d113      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d56:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_TIM_Base_MspInit+0x6c>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	201e      	movs	r0, #30
 8001d68:	f001 ffe0 	bl	8003d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d6c:	201e      	movs	r0, #30
 8001d6e:	f001 fff9 	bl	8003d64 <HAL_NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40000800 	.word	0x40000800

08001d88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a11      	ldr	r2, [pc, #68]	@ (8001dec <HAL_TIM_MspPostInit+0x64>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d11c      	bne.n	8001de4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <HAL_TIM_MspPostInit+0x68>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	4a10      	ldr	r2, [pc, #64]	@ (8001df0 <HAL_TIM_MspPostInit+0x68>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <HAL_TIM_MspPostInit+0x68>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dc2:	2340      	movs	r3, #64	@ 0x40
 8001dc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de0:	f002 f818 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40021000 	.word	0x40021000

08001df4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001dfa:	4a15      	ldr	r2, [pc, #84]	@ (8001e50 <MX_USART1_UART_Init+0x5c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	@ (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e38:	f005 f890 	bl	8006f5c <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e42:	f7ff fb93 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000440 	.word	0x20000440
 8001e50:	40013800 	.word	0x40013800

08001e54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e5a:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <MX_USART2_UART_Init+0x5c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b09      	ldr	r3, [pc, #36]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <MX_USART2_UART_Init+0x58>)
 8001e98:	f005 f860 	bl	8006f5c <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ea2:	f7ff fb63 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200004c8 	.word	0x200004c8
 8001eb0:	40004400 	.word	0x40004400

08001eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0ae      	sub	sp, #184	@ 0xb8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	2288      	movs	r2, #136	@ 0x88
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f007 fb32 	bl	800953e <memset>
  if(uartHandle->Instance==USART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a43      	ldr	r2, [pc, #268]	@ (8001fec <HAL_UART_MspInit+0x138>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d13d      	bne.n	8001f60 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 f93d 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001efc:	f7ff fb36 	bl	800156c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f00:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f04:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f0a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f0c:	4b38      	ldr	r3, [pc, #224]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b35      	ldr	r3, [pc, #212]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1c:	4a34      	ldr	r2, [pc, #208]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f24:	4b32      	ldr	r3, [pc, #200]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f30:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f54:	4619      	mov	r1, r3
 8001f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f5a:	f001 ff5b 	bl	8003e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f5e:	e040      	b.n	8001fe2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a23      	ldr	r2, [pc, #140]	@ (8001ff4 <HAL_UART_MspInit+0x140>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d13b      	bne.n	8001fe2 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 f8fa 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001f82:	f7ff faf3 	bl	800156c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8a:	4a19      	ldr	r2, [pc, #100]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	4a13      	ldr	r2, [pc, #76]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001faa:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <HAL_UART_MspInit+0x13c>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fb6:	230c      	movs	r3, #12
 8001fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fce:	2307      	movs	r3, #7
 8001fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fde:	f001 ff19 	bl	8003e14 <HAL_GPIO_Init>
}
 8001fe2:	bf00      	nop
 8001fe4:	37b8      	adds	r7, #184	@ 0xb8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40013800 	.word	0x40013800
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40004400 	.word	0x40004400

08001ff8 <setup>:

// Global buffer and position data
char buffer[BUFFER_SIZE];
GPS_Data position;

void setup(void) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	 // This code will be run once

    // Initialize UART, GPIO, peripherals if necessary
    printf("System initialized. Waiting for GPS data...\n\r");
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <setup+0x10>)
 8001ffe:	f007 fa49 	bl	8009494 <iprintf>
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	0800bcc8 	.word	0x0800bcc8

0800200c <loop>:

void loop(void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af02      	add	r7, sp, #8
	 // This code will run indefinitly.
    int size = fillBuffer(buffer, BUFFER_SIZE);  // Step 1: Receive NMEA frame
 8002012:	2180      	movs	r1, #128	@ 0x80
 8002014:	483f      	ldr	r0, [pc, #252]	@ (8002114 <loop+0x108>)
 8002016:	f000 f88b 	bl	8002130 <fillBuffer>
 800201a:	6078      	str	r0, [r7, #4]

    if (size < 0) {
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	da03      	bge.n	800202a <loop+0x1e>
        printf("UART Read Error!\n\r");
 8002022:	483d      	ldr	r0, [pc, #244]	@ (8002118 <loop+0x10c>)
 8002024:	f007 fa36 	bl	8009494 <iprintf>
        return;  // Skip to the next loop iteration
 8002028:	e070      	b.n	800210c <loop+0x100>
    }

    // Step 2: Validate the frame using checksum and header
    if (!checkFrame(buffer)) {
 800202a:	483a      	ldr	r0, [pc, #232]	@ (8002114 <loop+0x108>)
 800202c:	f000 f9a3 	bl	8002376 <checkFrame>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <loop+0x32>
        printf("Corrupted or invalid NMEA frame!\n\r");
 8002036:	4839      	ldr	r0, [pc, #228]	@ (800211c <loop+0x110>)
 8002038:	f007 fa2c 	bl	8009494 <iprintf>
        return;
 800203c:	e066      	b.n	800210c <loop+0x100>
    }

    // Step 3: Extract latitude & longitude from the frame
    position.latitude = getLatitude(buffer);
 800203e:	4835      	ldr	r0, [pc, #212]	@ (8002114 <loop+0x108>)
 8002040:	f000 f9ee 	bl	8002420 <getLatitude>
 8002044:	eef0 7a40 	vmov.f32	s15, s0
 8002048:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <loop+0x114>)
 800204a:	edc3 7a00 	vstr	s15, [r3]
    position.longitude = getLongitude(buffer);
 800204e:	4831      	ldr	r0, [pc, #196]	@ (8002114 <loop+0x108>)
 8002050:	f000 fa70 	bl	8002534 <getLongitude>
 8002054:	eef0 7a40 	vmov.f32	s15, s0
 8002058:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <loop+0x114>)
 800205a:	edc3 7a01 	vstr	s15, [r3, #4]

    // Step 4: Determine N/S and E/W based on coordinates
    position.ns = (position.latitude >= 0) ? 'N' : 'S';
 800205e:	4b30      	ldr	r3, [pc, #192]	@ (8002120 <loop+0x114>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206c:	db01      	blt.n	8002072 <loop+0x66>
 800206e:	224e      	movs	r2, #78	@ 0x4e
 8002070:	e000      	b.n	8002074 <loop+0x68>
 8002072:	2253      	movs	r2, #83	@ 0x53
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <loop+0x114>)
 8002076:	721a      	strb	r2, [r3, #8]
    position.ew = (position.longitude >= 0) ? 'E' : 'W';
 8002078:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <loop+0x114>)
 800207a:	edd3 7a01 	vldr	s15, [r3, #4]
 800207e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	db01      	blt.n	800208c <loop+0x80>
 8002088:	2245      	movs	r2, #69	@ 0x45
 800208a:	e000      	b.n	800208e <loop+0x82>
 800208c:	2257      	movs	r2, #87	@ 0x57
 800208e:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <loop+0x114>)
 8002090:	725a      	strb	r2, [r3, #9]

    // Step 5: Display the extracted position
    printf("\n--- GPS Position ---\n\r");
 8002092:	4824      	ldr	r0, [pc, #144]	@ (8002124 <loop+0x118>)
 8002094:	f007 f9fe 	bl	8009494 <iprintf>
    printf("Latitude :  %.4f° %c\n\r", (position.latitude >= 0) ? position.latitude : -position.latitude, position.ns);
 8002098:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <loop+0x114>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a6:	db02      	blt.n	80020ae <loop+0xa2>
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <loop+0x114>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	e006      	b.n	80020bc <loop+0xb0>
 80020ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <loop+0x114>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	eef1 7a67 	vneg.f32	s15, s15
 80020b8:	ee17 3a90 	vmov	r3, s15
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fa43 	bl	8000548 <__aeabi_f2d>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4916      	ldr	r1, [pc, #88]	@ (8002120 <loop+0x114>)
 80020c8:	7a09      	ldrb	r1, [r1, #8]
 80020ca:	9100      	str	r1, [sp, #0]
 80020cc:	4816      	ldr	r0, [pc, #88]	@ (8002128 <loop+0x11c>)
 80020ce:	f007 f9e1 	bl	8009494 <iprintf>
    printf("Longitude:  %.4f° %c\n\r", (position.longitude >= 0) ? position.longitude : -position.longitude, position.ew);
 80020d2:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <loop+0x114>)
 80020d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80020d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e0:	db02      	blt.n	80020e8 <loop+0xdc>
 80020e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <loop+0x114>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	e006      	b.n	80020f6 <loop+0xea>
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <loop+0x114>)
 80020ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80020ee:	eef1 7a67 	vneg.f32	s15, s15
 80020f2:	ee17 3a90 	vmov	r3, s15
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fa26 	bl	8000548 <__aeabi_f2d>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4907      	ldr	r1, [pc, #28]	@ (8002120 <loop+0x114>)
 8002102:	7a49      	ldrb	r1, [r1, #9]
 8002104:	9100      	str	r1, [sp, #0]
 8002106:	4809      	ldr	r0, [pc, #36]	@ (800212c <loop+0x120>)
 8002108:	f007 f9c4 	bl	8009494 <iprintf>
}
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000550 	.word	0x20000550
 8002118:	0800bcf8 	.word	0x0800bcf8
 800211c:	0800bd0c 	.word	0x0800bd0c
 8002120:	200005d0 	.word	0x200005d0
 8002124:	0800bd30 	.word	0x0800bd30
 8002128:	0800bd48 	.word	0x0800bd48
 800212c:	0800bd60 	.word	0x0800bd60

08002130 <fillBuffer>:

int fillBuffer(char *buffer, int size) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
    int total = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
    char received_char = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
    int i;

    // Initialize the buffer with zeros
    for (i = 0; i < size; i++) {
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e007      	b.n	8002158 <fillBuffer+0x28>
        buffer[i] = 0;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++) {
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	3301      	adds	r3, #1
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf3      	blt.n	8002148 <fillBuffer+0x18>
    }

    // Abort any ongoing UART reception
    HAL_UART_Abort(&huart1);
 8002160:	4823      	ldr	r0, [pc, #140]	@ (80021f0 <fillBuffer+0xc0>)
 8002162:	f005 f89b 	bl	800729c <HAL_UART_Abort>

    // Wait for the start character '$'
    do {
        HAL_UART_Receive(&huart1, (uint8_t *)&received_char, 1, HAL_MAX_DELAY);
 8002166:	f107 010f 	add.w	r1, r7, #15
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	2201      	movs	r2, #1
 8002170:	481f      	ldr	r0, [pc, #124]	@ (80021f0 <fillBuffer+0xc0>)
 8002172:	f004 ffca 	bl	800710a <HAL_UART_Receive>
    } while (received_char != '$');
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	2b24      	cmp	r3, #36	@ 0x24
 800217a:	d1f4      	bne.n	8002166 <fillBuffer+0x36>

    // Store incoming characters until '\n' is received or buffer is full
    total = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]
    while (total < size - 1) {
 8002180:	e01b      	b.n	80021ba <fillBuffer+0x8a>
        buffer[total++] = received_char;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	617a      	str	r2, [r7, #20]
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	701a      	strb	r2, [r3, #0]

        // Receive the next character
        HAL_UART_Receive(&huart1, (uint8_t *)&received_char, 1, HAL_MAX_DELAY);
 8002192:	f107 010f 	add.w	r1, r7, #15
 8002196:	f04f 33ff 	mov.w	r3, #4294967295
 800219a:	2201      	movs	r2, #1
 800219c:	4814      	ldr	r0, [pc, #80]	@ (80021f0 <fillBuffer+0xc0>)
 800219e:	f004 ffb4 	bl	800710a <HAL_UART_Receive>

        // Stop if end-of-line is detected
        if (received_char == '\n') {
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b0a      	cmp	r3, #10
 80021a6:	d108      	bne.n	80021ba <fillBuffer+0x8a>
            buffer[total++] = received_char;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	617a      	str	r2, [r7, #20]
 80021ae:	461a      	mov	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	701a      	strb	r2, [r3, #0]
            break;
 80021b8:	e004      	b.n	80021c4 <fillBuffer+0x94>
    while (total < size - 1) {
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3b01      	subs	r3, #1
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbde      	blt.n	8002182 <fillBuffer+0x52>
        }
    }

    // Null-terminate the string to prevent buffer overflows
    if (total < size)
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	da05      	bge.n	80021d8 <fillBuffer+0xa8>
        buffer[total] = '\0';
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e005      	b.n	80021e4 <fillBuffer+0xb4>
    else
        buffer[size - 1] = '\0';
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3b01      	subs	r3, #1
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]

    return total;  // Return the number of characters read (including '\n')
 80021e4:	697b      	ldr	r3, [r7, #20]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000440 	.word	0x20000440

080021f4 <isGPGGA>:
int isGPGGA(char *frame) {
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
    const char prefix[] = "$GPGGA";  // Expected frame header
 80021fc:	4a14      	ldr	r2, [pc, #80]	@ (8002250 <isGPGGA+0x5c>)
 80021fe:	f107 030c 	add.w	r3, r7, #12
 8002202:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002206:	6018      	str	r0, [r3, #0]
 8002208:	3304      	adds	r3, #4
 800220a:	8019      	strh	r1, [r3, #0]
 800220c:	3302      	adds	r3, #2
 800220e:	0c0a      	lsrs	r2, r1, #16
 8002210:	701a      	strb	r2, [r3, #0]

    // Compare the first 6 characters of the frame
    for (int i = 0; i < 6; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	e010      	b.n	800223a <isGPGGA+0x46>
        if (prefix[i] != frame[i]) {
 8002218:	f107 020c 	add.w	r2, r7, #12
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4413      	add	r3, r2
 8002220:	781a      	ldrb	r2, [r3, #0]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	440b      	add	r3, r1
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d002      	beq.n	8002234 <isGPGGA+0x40>
            return -1;  // Prefix does not match
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
 8002232:	e006      	b.n	8002242 <isGPGGA+0x4e>
    for (int i = 0; i < 6; i++) {
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b05      	cmp	r3, #5
 800223e:	ddeb      	ble.n	8002218 <isGPGGA+0x24>
        }
    }
    return 1;  // Prefix matches
 8002240:	2301      	movs	r3, #1
}
 8002242:	4618      	mov	r0, r3
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	0800bd78 	.word	0x0800bd78

08002254 <extractChecksum>:
int extractChecksum(char *buffer) {
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    // Search for the '*' character indicating the checksum start
    while (*buffer != '*' && *buffer != '\0') {
 800225c:	e002      	b.n	8002264 <extractChecksum+0x10>
        buffer++;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3301      	adds	r3, #1
 8002262:	607b      	str	r3, [r7, #4]
    while (*buffer != '*' && *buffer != '\0') {
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b2a      	cmp	r3, #42	@ 0x2a
 800226a:	d003      	beq.n	8002274 <extractChecksum+0x20>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f4      	bne.n	800225e <extractChecksum+0xa>
    }

    if (*buffer == '\0') {
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <extractChecksum+0x2e>
        return -1;  // No checksum found
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
 8002280:	e051      	b.n	8002326 <extractChecksum+0xd2>
    }

    char hex1 = buffer[1];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	785b      	ldrb	r3, [r3, #1]
 8002286:	72fb      	strb	r3, [r7, #11]
    char hex2 = buffer[2];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	789b      	ldrb	r3, [r3, #2]
 800228c:	72bb      	strb	r3, [r7, #10]
    int checksum = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]

    // Convert first hex character to integer
    if (hex1 >= '0' && hex1 <= '9') checksum += (hex1 - '0') * 16;
 8002292:	7afb      	ldrb	r3, [r7, #11]
 8002294:	2b2f      	cmp	r3, #47	@ 0x2f
 8002296:	d909      	bls.n	80022ac <extractChecksum+0x58>
 8002298:	7afb      	ldrb	r3, [r7, #11]
 800229a:	2b39      	cmp	r3, #57	@ 0x39
 800229c:	d806      	bhi.n	80022ac <extractChecksum+0x58>
 800229e:	7afb      	ldrb	r3, [r7, #11]
 80022a0:	3b30      	subs	r3, #48	@ 0x30
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e018      	b.n	80022de <extractChecksum+0x8a>
    else if (hex1 >= 'A' && hex1 <= 'F') checksum += (hex1 - 'A' + 10) * 16;
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	2b40      	cmp	r3, #64	@ 0x40
 80022b0:	d909      	bls.n	80022c6 <extractChecksum+0x72>
 80022b2:	7afb      	ldrb	r3, [r7, #11]
 80022b4:	2b46      	cmp	r3, #70	@ 0x46
 80022b6:	d806      	bhi.n	80022c6 <extractChecksum+0x72>
 80022b8:	7afb      	ldrb	r3, [r7, #11]
 80022ba:	3b37      	subs	r3, #55	@ 0x37
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4413      	add	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e00b      	b.n	80022de <extractChecksum+0x8a>
    else if (hex1 >= 'a' && hex1 <= 'f') checksum += (hex1 - 'a' + 10) * 16;
 80022c6:	7afb      	ldrb	r3, [r7, #11]
 80022c8:	2b60      	cmp	r3, #96	@ 0x60
 80022ca:	d908      	bls.n	80022de <extractChecksum+0x8a>
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	2b66      	cmp	r3, #102	@ 0x66
 80022d0:	d805      	bhi.n	80022de <extractChecksum+0x8a>
 80022d2:	7afb      	ldrb	r3, [r7, #11]
 80022d4:	3b57      	subs	r3, #87	@ 0x57
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4413      	add	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

    // Convert second hex character to integer
    if (hex2 >= '0' && hex2 <= '9') checksum += (hex2 - '0');
 80022de:	7abb      	ldrb	r3, [r7, #10]
 80022e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80022e2:	d908      	bls.n	80022f6 <extractChecksum+0xa2>
 80022e4:	7abb      	ldrb	r3, [r7, #10]
 80022e6:	2b39      	cmp	r3, #57	@ 0x39
 80022e8:	d805      	bhi.n	80022f6 <extractChecksum+0xa2>
 80022ea:	7abb      	ldrb	r3, [r7, #10]
 80022ec:	3b30      	subs	r3, #48	@ 0x30
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4413      	add	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e016      	b.n	8002324 <extractChecksum+0xd0>
    else if (hex2 >= 'A' && hex2 <= 'F') checksum += (hex2 - 'A' + 10);
 80022f6:	7abb      	ldrb	r3, [r7, #10]
 80022f8:	2b40      	cmp	r3, #64	@ 0x40
 80022fa:	d908      	bls.n	800230e <extractChecksum+0xba>
 80022fc:	7abb      	ldrb	r3, [r7, #10]
 80022fe:	2b46      	cmp	r3, #70	@ 0x46
 8002300:	d805      	bhi.n	800230e <extractChecksum+0xba>
 8002302:	7abb      	ldrb	r3, [r7, #10]
 8002304:	3b37      	subs	r3, #55	@ 0x37
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e00a      	b.n	8002324 <extractChecksum+0xd0>
    else if (hex2 >= 'a' && hex2 <= 'f') checksum += (hex2 - 'a' + 10);
 800230e:	7abb      	ldrb	r3, [r7, #10]
 8002310:	2b60      	cmp	r3, #96	@ 0x60
 8002312:	d907      	bls.n	8002324 <extractChecksum+0xd0>
 8002314:	7abb      	ldrb	r3, [r7, #10]
 8002316:	2b66      	cmp	r3, #102	@ 0x66
 8002318:	d804      	bhi.n	8002324 <extractChecksum+0xd0>
 800231a:	7abb      	ldrb	r3, [r7, #10]
 800231c:	3b57      	subs	r3, #87	@ 0x57
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4413      	add	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

    return checksum;
 8002324:	68fb      	ldr	r3, [r7, #12]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <calculateChecksum>:
int calculateChecksum(char *buffer) {
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
    int checksum = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]

    // Skip the initial '$' character
    buffer++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3301      	adds	r3, #1
 8002342:	607b      	str	r3, [r7, #4]

    // XOR all characters until '*' or end of string
    while (*buffer != '*' && *buffer != '\0') {
 8002344:	e008      	b.n	8002358 <calculateChecksum+0x26>
        checksum ^= *buffer;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4053      	eors	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
        buffer++;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3301      	adds	r3, #1
 8002356:	607b      	str	r3, [r7, #4]
    while (*buffer != '*' && *buffer != '\0') {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b2a      	cmp	r3, #42	@ 0x2a
 800235e:	d003      	beq.n	8002368 <calculateChecksum+0x36>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ee      	bne.n	8002346 <calculateChecksum+0x14>
    }

    return checksum;
 8002368:	68fb      	ldr	r3, [r7, #12]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <checkFrame>:
int checkFrame(char *buffer) {
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
    if (buffer == NULL) return 0;  // Null pointer check
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <checkFrame+0x12>
 8002384:	2300      	movs	r3, #0
 8002386:	e01c      	b.n	80023c2 <checkFrame+0x4c>

    // Check if the frame is a GPGGA sentence
    if (isGPGGA(buffer) != 1) {
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff33 	bl	80021f4 <isGPGGA>
 800238e:	4603      	mov	r3, r0
 8002390:	2b01      	cmp	r3, #1
 8002392:	d001      	beq.n	8002398 <checkFrame+0x22>
        return 0;  // Not a valid GPGGA frame
 8002394:	2300      	movs	r3, #0
 8002396:	e014      	b.n	80023c2 <checkFrame+0x4c>
    }

    // Extract checksum from the frame
    int extracted = extractChecksum(buffer);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff5b 	bl	8002254 <extractChecksum>
 800239e:	60f8      	str	r0, [r7, #12]
    int calculated = calculateChecksum(buffer);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ffc6 	bl	8002332 <calculateChecksum>
 80023a6:	60b8      	str	r0, [r7, #8]

    // Validate checksums
    if (extracted == -1) {
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ae:	d101      	bne.n	80023b4 <checkFrame+0x3e>
        return 0;  // Extraction error
 80023b0:	2300      	movs	r3, #0
 80023b2:	e006      	b.n	80023c2 <checkFrame+0x4c>
    }

    return (extracted == calculated) ? 1 : 0;
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <recherchevirg>:
int recherchevirg(char *frame, int i) {
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
    if (frame == NULL) return -1;  // Null pointer check
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <recherchevirg+0x1c>
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	e018      	b.n	8002412 <recherchevirg+0x48>

    // Look for the next comma in the string
    while (frame[i] != ',' && frame[i] != '\0') {
        i++;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	603b      	str	r3, [r7, #0]
    while (frame[i] != ',' && frame[i] != '\0') {
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b2c      	cmp	r3, #44	@ 0x2c
 80023f0:	d005      	beq.n	80023fe <recherchevirg+0x34>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4413      	add	r3, r2
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <recherchevirg+0x16>
    }

    return (frame[i] == ',') ? i : -1;  // Return comma position or -1 if not found
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b2c      	cmp	r3, #44	@ 0x2c
 8002408:	d101      	bne.n	800240e <recherchevirg+0x44>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	e001      	b.n	8002412 <recherchevirg+0x48>
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <getLatitude>:
float getLatitude(char *frame) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	@ 0x38
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
    if (frame == NULL) return 0.0f;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <getLatitude+0x14>
 800242e:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8002528 <getLatitude+0x108>
 8002432:	e074      	b.n	800251e <getLatitude+0xfe>

    int count = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	637b      	str	r3, [r7, #52]	@ 0x34
    int index = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	633b      	str	r3, [r7, #48]	@ 0x30

    // Locate the 2nd comma, which precedes the latitude field
    while (count < 2) {
 800243c:	e00e      	b.n	800245c <getLatitude+0x3c>
        index = recherchevirg(frame, index);
 800243e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ffc2 	bl	80023ca <recherchevirg>
 8002446:	6338      	str	r0, [r7, #48]	@ 0x30
        if (index == -1) return 0.0f;
 8002448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244e:	d102      	bne.n	8002456 <getLatitude+0x36>
 8002450:	eddf 7a35 	vldr	s15, [pc, #212]	@ 8002528 <getLatitude+0x108>
 8002454:	e063      	b.n	800251e <getLatitude+0xfe>
        count++;
 8002456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002458:	3301      	adds	r3, #1
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (count < 2) {
 800245c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245e:	2b01      	cmp	r3, #1
 8002460:	dded      	ble.n	800243e <getLatitude+0x1e>
    }

    // Extract latitude string
    char latField[16];
    strncpy(latField, &frame[index + 1], 15);
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	3301      	adds	r3, #1
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	18d1      	adds	r1, r2, r3
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	220f      	movs	r2, #15
 8002470:	4618      	mov	r0, r3
 8002472:	f007 f87e 	bl	8009572 <strncpy>
    latField[15] = '\0';
 8002476:	2300      	movs	r3, #0
 8002478:	75fb      	strb	r3, [r7, #23]

    // Convert NMEA field to float
    float raw = atof(latField);
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	4618      	mov	r0, r3
 8002480:	f005 fcdb 	bl	8007e3a <atof>
 8002484:	ee07 0a90 	vmov	s15, r0
 8002488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    int degrees = (int)(raw / 100);  // Extract degrees
 8002490:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002494:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800252c <getLatitude+0x10c>
 8002498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a0:	ee17 3a90 	vmov	r3, s15
 80024a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    float minutes = raw - degrees * 100;  // Extract minutes
 80024a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a8:	2264      	movs	r2, #100	@ 0x64
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80024ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float latitude = degrees + minutes / 60.0f;
 80024c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80024d0:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 8002530 <getLatitude+0x110>
 80024d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024dc:	edc7 7a08 	vstr	s15, [r7, #32]

    // Determine hemisphere (N/S)
    int directionIndex = recherchevirg(frame, index);
 80024e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ff71 	bl	80023ca <recherchevirg>
 80024e8:	61f8      	str	r0, [r7, #28]
    if (directionIndex == -1) return 0.0f;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d102      	bne.n	80024f8 <getLatitude+0xd8>
 80024f2:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8002528 <getLatitude+0x108>
 80024f6:	e012      	b.n	800251e <getLatitude+0xfe>
    char ns = frame[directionIndex + 1];
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	3301      	adds	r3, #1
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	76fb      	strb	r3, [r7, #27]

    return (ns == 'N' || ns == 'n') ? latitude : -latitude;
 8002504:	7efb      	ldrb	r3, [r7, #27]
 8002506:	2b4e      	cmp	r3, #78	@ 0x4e
 8002508:	d007      	beq.n	800251a <getLatitude+0xfa>
 800250a:	7efb      	ldrb	r3, [r7, #27]
 800250c:	2b6e      	cmp	r3, #110	@ 0x6e
 800250e:	d004      	beq.n	800251a <getLatitude+0xfa>
 8002510:	edd7 7a08 	vldr	s15, [r7, #32]
 8002514:	eef1 7a67 	vneg.f32	s15, s15
 8002518:	e001      	b.n	800251e <getLatitude+0xfe>
 800251a:	edd7 7a08 	vldr	s15, [r7, #32]
}
 800251e:	eeb0 0a67 	vmov.f32	s0, s15
 8002522:	3738      	adds	r7, #56	@ 0x38
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	00000000 	.word	0x00000000
 800252c:	42c80000 	.word	0x42c80000
 8002530:	42700000 	.word	0x42700000

08002534 <getLongitude>:
float getLongitude(char *frame) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b08e      	sub	sp, #56	@ 0x38
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    if (frame == NULL) return 0.0f;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d102      	bne.n	8002548 <getLongitude+0x14>
 8002542:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 800263c <getLongitude+0x108>
 8002546:	e074      	b.n	8002632 <getLongitude+0xfe>

    int count = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
    int index = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	633b      	str	r3, [r7, #48]	@ 0x30

    // Locate the 4th comma, which precedes the longitude field
    while (count < 4) {
 8002550:	e00e      	b.n	8002570 <getLongitude+0x3c>
        index = recherchevirg(frame, index);
 8002552:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff38 	bl	80023ca <recherchevirg>
 800255a:	6338      	str	r0, [r7, #48]	@ 0x30
        if (index == -1) return 0.0f;
 800255c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002562:	d102      	bne.n	800256a <getLongitude+0x36>
 8002564:	eddf 7a35 	vldr	s15, [pc, #212]	@ 800263c <getLongitude+0x108>
 8002568:	e063      	b.n	8002632 <getLongitude+0xfe>
        count++;
 800256a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256c:	3301      	adds	r3, #1
 800256e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (count < 4) {
 8002570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002572:	2b03      	cmp	r3, #3
 8002574:	dded      	ble.n	8002552 <getLongitude+0x1e>
    }

    // Extract longitude string
    char longField[16];
    strncpy(longField, &frame[index + 1], 15);
 8002576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002578:	3301      	adds	r3, #1
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	18d1      	adds	r1, r2, r3
 800257e:	f107 0308 	add.w	r3, r7, #8
 8002582:	220f      	movs	r2, #15
 8002584:	4618      	mov	r0, r3
 8002586:	f006 fff4 	bl	8009572 <strncpy>
    longField[15] = '\0';
 800258a:	2300      	movs	r3, #0
 800258c:	75fb      	strb	r3, [r7, #23]

    // Convert NMEA field to float
    float raw = atof(longField);
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	4618      	mov	r0, r3
 8002594:	f005 fc51 	bl	8007e3a <atof>
 8002598:	ee07 0a90 	vmov	s15, r0
 800259c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    int degrees = (int)(raw / 100);  // Extract degrees
 80025a4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80025a8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002640 <getLongitude+0x10c>
 80025ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b4:	ee17 3a90 	vmov	r3, s15
 80025b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    float minutes = raw - degrees * 100;  // Extract minutes
 80025ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025bc:	2264      	movs	r2, #100	@ 0x64
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ca:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80025ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float longitude = degrees + minutes / 60.0f;
 80025d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80025e4:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 8002644 <getLongitude+0x110>
 80025e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80025ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f0:	edc7 7a08 	vstr	s15, [r7, #32]

    // Determine hemisphere (E/W)
    int directionIndex = recherchevirg(frame, index);
 80025f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fee7 	bl	80023ca <recherchevirg>
 80025fc:	61f8      	str	r0, [r7, #28]
    if (directionIndex == -1) return 0.0f;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002604:	d102      	bne.n	800260c <getLongitude+0xd8>
 8002606:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800263c <getLongitude+0x108>
 800260a:	e012      	b.n	8002632 <getLongitude+0xfe>
    char ew = frame[directionIndex + 1];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	3301      	adds	r3, #1
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	76fb      	strb	r3, [r7, #27]

    return (ew == 'E' || ew == 'e') ? longitude : -longitude;
 8002618:	7efb      	ldrb	r3, [r7, #27]
 800261a:	2b45      	cmp	r3, #69	@ 0x45
 800261c:	d007      	beq.n	800262e <getLongitude+0xfa>
 800261e:	7efb      	ldrb	r3, [r7, #27]
 8002620:	2b65      	cmp	r3, #101	@ 0x65
 8002622:	d004      	beq.n	800262e <getLongitude+0xfa>
 8002624:	edd7 7a08 	vldr	s15, [r7, #32]
 8002628:	eef1 7a67 	vneg.f32	s15, s15
 800262c:	e001      	b.n	8002632 <getLongitude+0xfe>
 800262e:	edd7 7a08 	vldr	s15, [r7, #32]
}
 8002632:	eeb0 0a67 	vmov.f32	s0, s15
 8002636:	3738      	adds	r7, #56	@ 0x38
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	00000000 	.word	0x00000000
 8002640:	42c80000 	.word	0x42c80000
 8002644:	42700000 	.word	0x42700000

08002648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002680 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800264c:	f7ff f9f6 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <LoopForever+0x6>)
  ldr r1, =_edata
 8002652:	490d      	ldr	r1, [pc, #52]	@ (8002688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002654:	4a0d      	ldr	r2, [pc, #52]	@ (800268c <LoopForever+0xe>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002658:	e002      	b.n	8002660 <LoopCopyDataInit>

0800265a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800265a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800265c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800265e:	3304      	adds	r3, #4

08002660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002664:	d3f9      	bcc.n	800265a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002668:	4c0a      	ldr	r4, [pc, #40]	@ (8002694 <LoopForever+0x16>)
  movs r3, #0
 800266a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800266c:	e001      	b.n	8002672 <LoopFillZerobss>

0800266e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800266e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002670:	3204      	adds	r2, #4

08002672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002674:	d3fb      	bcc.n	800266e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002676:	f006 ffdf 	bl	8009638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800267a:	f7fe fef7 	bl	800146c <main>

0800267e <LoopForever>:

LoopForever:
    b LoopForever
 800267e:	e7fe      	b.n	800267e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002680:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002688:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800268c:	0800c200 	.word	0x0800c200
  ldr r2, =_sbss
 8002690:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002694:	2000072c 	.word	0x2000072c

08002698 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002698:	e7fe      	b.n	8002698 <ADC3_IRQHandler>
	...

0800269c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a6:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <HAL_Init+0x3c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a0b      	ldr	r2, [pc, #44]	@ (80026d8 <HAL_Init+0x3c>)
 80026ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b2:	2003      	movs	r0, #3
 80026b4:	f001 fb2f 	bl	8003d16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026b8:	200f      	movs	r0, #15
 80026ba:	f7ff f821 	bl	8001700 <HAL_InitTick>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d002      	beq.n	80026ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	71fb      	strb	r3, [r7, #7]
 80026c8:	e001      	b.n	80026ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026ca:	f7fe fff5 	bl	80016b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026ce:	79fb      	ldrb	r3, [r7, #7]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40022000 	.word	0x40022000

080026dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_IncTick+0x20>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_IncTick+0x24>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_IncTick+0x24>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000008 	.word	0x20000008
 8002700:	200005dc 	.word	0x200005dc

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200005dc 	.word	0x200005dc

0800271c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	609a      	str	r2, [r3, #8]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	609a      	str	r2, [r3, #8]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3360      	adds	r3, #96	@ 0x60
 8002796:	461a      	mov	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <LL_ADC_SetOffset+0x44>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	03fff000 	.word	0x03fff000

080027cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3360      	adds	r3, #96	@ 0x60
 80027da:	461a      	mov	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3360      	adds	r3, #96	@ 0x60
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	431a      	orrs	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3330      	adds	r3, #48	@ 0x30
 8002864:	461a      	mov	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	4413      	add	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	211f      	movs	r1, #31
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	f003 011f 	and.w	r1, r3, #31
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	431a      	orrs	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b087      	sub	sp, #28
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3314      	adds	r3, #20
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	0e5b      	lsrs	r3, r3, #25
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	4413      	add	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0d1b      	lsrs	r3, r3, #20
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2107      	movs	r1, #7
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	0d1b      	lsrs	r3, r3, #20
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	431a      	orrs	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	43db      	mvns	r3, r3
 8002942:	401a      	ands	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f003 0318 	and.w	r3, r3, #24
 800294a:	4908      	ldr	r1, [pc, #32]	@ (800296c <LL_ADC_SetChannelSingleDiff+0x44>)
 800294c:	40d9      	lsrs	r1, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	400b      	ands	r3, r1
 8002952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002956:	431a      	orrs	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	0007ffff 	.word	0x0007ffff

08002970 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 031f 	and.w	r3, r3, #31
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80029b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6093      	str	r3, [r2, #8]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a30:	d101      	bne.n	8002a36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <LL_ADC_IsEnabled+0x18>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <LL_ADC_IsEnabled+0x1a>
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d101      	bne.n	8002a82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d101      	bne.n	8002aa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b089      	sub	sp, #36	@ 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e130      	b.n	8002d34 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fe faa7 	bl	8001034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff67 	bl	80029cc <LL_ADC_IsDeepPowerDownEnabled>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff4d 	bl	80029a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff82 	bl	8002a1c <LL_ADC_IsInternalRegulatorEnabled>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d115      	bne.n	8002b4a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff66 	bl	80029f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b28:	4b84      	ldr	r3, [pc, #528]	@ (8002d3c <HAL_ADC_Init+0x284>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	099b      	lsrs	r3, r3, #6
 8002b2e:	4a84      	ldr	r2, [pc, #528]	@ (8002d40 <HAL_ADC_Init+0x288>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	3301      	adds	r3, #1
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b3c:	e002      	b.n	8002b44 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f9      	bne.n	8002b3e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff64 	bl	8002a1c <LL_ADC_IsInternalRegulatorEnabled>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10d      	bne.n	8002b76 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5e:	f043 0210 	orr.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	f043 0201 	orr.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff ff75 	bl	8002a6a <LL_ADC_REG_IsConversionOngoing>
 8002b80:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 80c9 	bne.w	8002d22 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 80c5 	bne.w	8002d22 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ba0:	f043 0202 	orr.w	r2, r3, #2
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff49 	bl	8002a44 <LL_ADC_IsEnabled>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d115      	bne.n	8002be4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb8:	4862      	ldr	r0, [pc, #392]	@ (8002d44 <HAL_ADC_Init+0x28c>)
 8002bba:	f7ff ff43 	bl	8002a44 <LL_ADC_IsEnabled>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	4861      	ldr	r0, [pc, #388]	@ (8002d48 <HAL_ADC_Init+0x290>)
 8002bc2:	f7ff ff3f 	bl	8002a44 <LL_ADC_IsEnabled>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	431c      	orrs	r4, r3
 8002bca:	4860      	ldr	r0, [pc, #384]	@ (8002d4c <HAL_ADC_Init+0x294>)
 8002bcc:	f7ff ff3a 	bl	8002a44 <LL_ADC_IsEnabled>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4323      	orrs	r3, r4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	485c      	ldr	r0, [pc, #368]	@ (8002d50 <HAL_ADC_Init+0x298>)
 8002be0:	f7ff fd9c 	bl	800271c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7e5b      	ldrb	r3, [r3, #25]
 8002be8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002bf4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002bfa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c02:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d106      	bne.n	8002c20 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	3b01      	subs	r3, #1
 8002c18:	045b      	lsls	r3, r3, #17
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d009      	beq.n	8002c3c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c34:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4b44      	ldr	r3, [pc, #272]	@ (8002d54 <HAL_ADC_Init+0x29c>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	69b9      	ldr	r1, [r7, #24]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff1b 	bl	8002a90 <LL_ADC_INJ_IsConversionOngoing>
 8002c5a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d13d      	bne.n	8002cde <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d13a      	bne.n	8002cde <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c6c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c74:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c84:	f023 0302 	bic.w	r3, r3, #2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	69b9      	ldr	r1, [r7, #24]
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d118      	bne.n	8002cce <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ca6:	f023 0304 	bic.w	r3, r3, #4
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002cb8:	4311      	orrs	r1, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	611a      	str	r2, [r3, #16]
 8002ccc:	e007      	b.n	8002cde <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10c      	bne.n	8002d00 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	f023 010f 	bic.w	r1, r3, #15
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	1e5a      	subs	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cfe:	e007      	b.n	8002d10 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 020f 	bic.w	r2, r2, #15
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d14:	f023 0303 	bic.w	r3, r3, #3
 8002d18:	f043 0201 	orr.w	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d20:	e007      	b.n	8002d32 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	f043 0210 	orr.w	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3724      	adds	r7, #36	@ 0x24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	20000000 	.word	0x20000000
 8002d40:	053e2d63 	.word	0x053e2d63
 8002d44:	50040000 	.word	0x50040000
 8002d48:	50040100 	.word	0x50040100
 8002d4c:	50040200 	.word	0x50040200
 8002d50:	50040300 	.word	0x50040300
 8002d54:	fff0c007 	.word	0xfff0c007

08002d58 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	@ 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d74:	4882      	ldr	r0, [pc, #520]	@ (8002f80 <HAL_ADC_IRQHandler+0x228>)
 8002d76:	f7ff fdfb 	bl	8002970 <LL_ADC_GetMultimode>
 8002d7a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d017      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x5e>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d012      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 fe4d 	bl	8003a48 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2202      	movs	r2, #2
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_IRQHandler+0x72>
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8083 	beq.w	8002edc <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d07d      	beq.n	8002edc <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fd16 	bl	800282e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d062      	beq.n	8002ece <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f84 <HAL_ADC_IRQHandler+0x22c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d002      	beq.n	8002e18 <HAL_ADC_IRQHandler+0xc0>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	e000      	b.n	8002e1a <HAL_ADC_IRQHandler+0xc2>
 8002e18:	4b5b      	ldr	r3, [pc, #364]	@ (8002f88 <HAL_ADC_IRQHandler+0x230>)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d008      	beq.n	8002e34 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d002      	beq.n	8002e34 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2b09      	cmp	r3, #9
 8002e32:	d104      	bne.n	8002e3e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	e00c      	b.n	8002e58 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a50      	ldr	r2, [pc, #320]	@ (8002f84 <HAL_ADC_IRQHandler+0x22c>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d002      	beq.n	8002e4e <HAL_ADC_IRQHandler+0xf6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	e000      	b.n	8002e50 <HAL_ADC_IRQHandler+0xf8>
 8002e4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f88 <HAL_ADC_IRQHandler+0x230>)
 8002e50:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d135      	bne.n	8002ece <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d12e      	bne.n	8002ece <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fdf8 	bl	8002a6a <LL_ADC_REG_IsConversionOngoing>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11a      	bne.n	8002eb6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 020c 	bic.w	r2, r2, #12
 8002e8e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d112      	bne.n	8002ece <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002eb4:	e00b      	b.n	8002ece <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eba:	f043 0210 	orr.w	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec6:	f043 0201 	orr.w	r2, r3, #1
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f95c 	bl	800318c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	220c      	movs	r2, #12
 8002eda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <HAL_ADC_IRQHandler+0x198>
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 809f 	beq.w	800303a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 8099 	beq.w	800303a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f18:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff fcc1 	bl	80028ac <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f2a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fc7c 	bl	800282e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f36:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a11      	ldr	r2, [pc, #68]	@ (8002f84 <HAL_ADC_IRQHandler+0x22c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d002      	beq.n	8002f48 <HAL_ADC_IRQHandler+0x1f0>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	e000      	b.n	8002f4a <HAL_ADC_IRQHandler+0x1f2>
 8002f48:	4b0f      	ldr	r3, [pc, #60]	@ (8002f88 <HAL_ADC_IRQHandler+0x230>)
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d008      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d002      	beq.n	8002f64 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	d104      	bne.n	8002f6e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	623b      	str	r3, [r7, #32]
 8002f6c:	e013      	b.n	8002f96 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a04      	ldr	r2, [pc, #16]	@ (8002f84 <HAL_ADC_IRQHandler+0x22c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d009      	beq.n	8002f8c <HAL_ADC_IRQHandler+0x234>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	e007      	b.n	8002f8e <HAL_ADC_IRQHandler+0x236>
 8002f7e:	bf00      	nop
 8002f80:	50040300 	.word	0x50040300
 8002f84:	50040100 	.word	0x50040100
 8002f88:	50040000 	.word	0x50040000
 8002f8c:	4b7d      	ldr	r3, [pc, #500]	@ (8003184 <HAL_ADC_IRQHandler+0x42c>)
 8002f8e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d047      	beq.n	800302c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x25e>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d03f      	beq.n	800302c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d13a      	bne.n	800302c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc0:	2b40      	cmp	r3, #64	@ 0x40
 8002fc2:	d133      	bne.n	800302c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d12e      	bne.n	800302c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fd5c 	bl	8002a90 <LL_ADC_INJ_IsConversionOngoing>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d11a      	bne.n	8003014 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d112      	bne.n	800302c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
 8003012:	e00b      	b.n	800302c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003018:	f043 0210 	orr.w	r2, r3, #16
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fce3 	bl	80039f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2260      	movs	r2, #96	@ 0x60
 8003038:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b00      	cmp	r3, #0
 8003042:	d011      	beq.n	8003068 <HAL_ADC_IRQHandler+0x310>
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00c      	beq.n	8003068 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8a0 	bl	80031a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2280      	movs	r2, #128	@ 0x80
 8003066:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <HAL_ADC_IRQHandler+0x340>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00d      	beq.n	8003098 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003080:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fcc9 	bl	8003a20 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003096:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d012      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x370>
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00d      	beq.n	80030c8 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fcbb 	bl	8003a34 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d036      	beq.n	8003140 <HAL_ADC_IRQHandler+0x3e8>
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d031      	beq.n	8003140 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80030e4:	2301      	movs	r3, #1
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e8:	e014      	b.n	8003114 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030f0:	4825      	ldr	r0, [pc, #148]	@ (8003188 <HAL_ADC_IRQHandler+0x430>)
 80030f2:	f7ff fc4b 	bl	800298c <LL_ADC_GetMultiDMATransfer>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80030fc:	2301      	movs	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003100:	e008      	b.n	8003114 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8003110:	2301      	movs	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	2b01      	cmp	r3, #1
 8003118:	d10e      	bne.n	8003138 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312a:	f043 0202 	orr.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f83e 	bl	80031b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2210      	movs	r2, #16
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003146:	2b00      	cmp	r3, #0
 8003148:	d018      	beq.n	800317c <HAL_ADC_IRQHandler+0x424>
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003164:	f043 0208 	orr.w	r2, r3, #8
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003174:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fc48 	bl	8003a0c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800317c:	bf00      	nop
 800317e:	3728      	adds	r7, #40	@ 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	50040000 	.word	0x50040000
 8003188:	50040300 	.word	0x50040300

0800318c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b0b6      	sub	sp, #216	@ 0xd8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x22>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e3c9      	b.n	800397e <HAL_ADC_ConfigChannel+0x7b6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fc37 	bl	8002a6a <LL_ADC_REG_IsConversionOngoing>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 83aa 	bne.w	8003958 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b05      	cmp	r3, #5
 8003212:	d824      	bhi.n	800325e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	3b02      	subs	r3, #2
 800321a:	2b03      	cmp	r3, #3
 800321c:	d81b      	bhi.n	8003256 <HAL_ADC_ConfigChannel+0x8e>
 800321e:	a201      	add	r2, pc, #4	@ (adr r2, 8003224 <HAL_ADC_ConfigChannel+0x5c>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003235 	.word	0x08003235
 8003228:	0800323d 	.word	0x0800323d
 800322c:	08003245 	.word	0x08003245
 8003230:	0800324d 	.word	0x0800324d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003234:	230c      	movs	r3, #12
 8003236:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800323a:	e010      	b.n	800325e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800323c:	2312      	movs	r3, #18
 800323e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003242:	e00c      	b.n	800325e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003244:	2318      	movs	r3, #24
 8003246:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800324a:	e008      	b.n	800325e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800324c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003250:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003254:	e003      	b.n	800325e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003256:	2306      	movs	r3, #6
 8003258:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800325c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800326c:	f7ff faf2 	bl	8002854 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fbf8 	bl	8002a6a <LL_ADC_REG_IsConversionOngoing>
 800327a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fc04 	bl	8002a90 <LL_ADC_INJ_IsConversionOngoing>
 8003288:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800328c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 81a4 	bne.w	80035de <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 819f 	bne.w	80035de <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f7ff fb10 	bl	80028d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	08db      	lsrs	r3, r3, #3
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2b04      	cmp	r3, #4
 80032d2:	d00a      	beq.n	80032ea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6919      	ldr	r1, [r3, #16]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032e4:	f7ff fa4e 	bl	8002784 <LL_ADC_SetOffset>
 80032e8:	e179      	b.n	80035de <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fa6b 	bl	80027cc <LL_ADC_GetOffsetChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x14e>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fa60 	bl	80027cc <LL_ADC_GetOffsetChannel>
 800330c:	4603      	mov	r3, r0
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	e01e      	b.n	8003354 <HAL_ADC_ConfigChannel+0x18c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fa55 	bl	80027cc <LL_ADC_GetOffsetChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003334:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003338:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800333c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	e004      	b.n	8003352 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003348:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1a4>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	e018      	b.n	800339e <HAL_ADC_ConfigChannel+0x1d6>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e004      	b.n	800339e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800339e:	429a      	cmp	r2, r3
 80033a0:	d106      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fa24 	bl	80027f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fa08 	bl	80027cc <LL_ADC_GetOffsetChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x214>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2101      	movs	r1, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff f9fd 	bl	80027cc <LL_ADC_GetOffsetChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	f003 021f 	and.w	r2, r3, #31
 80033da:	e01e      	b.n	800341a <HAL_ADC_ConfigChannel+0x252>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff f9f2 	bl	80027cc <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80033fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800340a:	2320      	movs	r3, #32
 800340c:	e004      	b.n	8003418 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800340e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x26a>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	e018      	b.n	8003464 <HAL_ADC_ConfigChannel+0x29c>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003446:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800344a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800344e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e004      	b.n	8003464 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800345a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003464:	429a      	cmp	r2, r3
 8003466:	d106      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2200      	movs	r2, #0
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f9c1 	bl	80027f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff f9a5 	bl	80027cc <LL_ADC_GetOffsetChannel>
 8003482:	4603      	mov	r3, r0
 8003484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x2da>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f99a 	bl	80027cc <LL_ADC_GetOffsetChannel>
 8003498:	4603      	mov	r3, r0
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	f003 021f 	and.w	r2, r3, #31
 80034a0:	e01e      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x318>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff f98f 	bl	80027cc <LL_ADC_GetOffsetChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80034c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80034c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e004      	b.n	80034de <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80034d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d105      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x330>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	e014      	b.n	8003522 <HAL_ADC_ConfigChannel+0x35a>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003506:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003508:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800350c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e004      	b.n	8003522 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003518:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003522:	429a      	cmp	r2, r3
 8003524:	d106      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f962 	bl	80027f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2103      	movs	r1, #3
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff f946 	bl	80027cc <LL_ADC_GetOffsetChannel>
 8003540:	4603      	mov	r3, r0
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x398>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2103      	movs	r1, #3
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff f93b 	bl	80027cc <LL_ADC_GetOffsetChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	0e9b      	lsrs	r3, r3, #26
 800355a:	f003 021f 	and.w	r2, r3, #31
 800355e:	e017      	b.n	8003590 <HAL_ADC_ConfigChannel+0x3c8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2103      	movs	r1, #3
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff f930 	bl	80027cc <LL_ADC_GetOffsetChannel>
 800356c:	4603      	mov	r3, r0
 800356e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003570:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800357a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800357c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003582:	2320      	movs	r3, #32
 8003584:	e003      	b.n	800358e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003586:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x3e0>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	0e9b      	lsrs	r3, r3, #26
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	e011      	b.n	80035cc <HAL_ADC_ConfigChannel+0x404>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80035b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80035ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80035c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d106      	bne.n	80035de <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	2103      	movs	r1, #3
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff f90d 	bl	80027f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fa2e 	bl	8002a44 <LL_ADC_IsEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 8140 	bne.w	8003870 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6819      	ldr	r1, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	461a      	mov	r2, r3
 80035fe:	f7ff f993 	bl	8002928 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4a8f      	ldr	r2, [pc, #572]	@ (8003844 <HAL_ADC_ConfigChannel+0x67c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	f040 8131 	bne.w	8003870 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x46e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	0e9b      	lsrs	r3, r3, #26
 8003624:	3301      	adds	r3, #1
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2b09      	cmp	r3, #9
 800362c:	bf94      	ite	ls
 800362e:	2301      	movls	r3, #1
 8003630:	2300      	movhi	r3, #0
 8003632:	b2db      	uxtb	r3, r3
 8003634:	e019      	b.n	800366a <HAL_ADC_ConfigChannel+0x4a2>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003646:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800364e:	2320      	movs	r3, #32
 8003650:	e003      	b.n	800365a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003652:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2b09      	cmp	r3, #9
 8003662:	bf94      	ite	ls
 8003664:	2301      	movls	r3, #1
 8003666:	2300      	movhi	r3, #0
 8003668:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800366a:	2b00      	cmp	r3, #0
 800366c:	d079      	beq.n	8003762 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_ADC_ConfigChannel+0x4c2>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	3301      	adds	r3, #1
 8003682:	069b      	lsls	r3, r3, #26
 8003684:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003688:	e015      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x4ee>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800369a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800369c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80036a2:	2320      	movs	r3, #32
 80036a4:	e003      	b.n	80036ae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80036a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3301      	adds	r3, #1
 80036b0:	069b      	lsls	r3, r3, #26
 80036b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x50e>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0e9b      	lsrs	r3, r3, #26
 80036c8:	3301      	adds	r3, #1
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	2101      	movs	r1, #1
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	e017      	b.n	8003706 <HAL_ADC_ConfigChannel+0x53e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80036e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80036e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80036ee:	2320      	movs	r3, #32
 80036f0:	e003      	b.n	80036fa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80036f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	2101      	movs	r1, #1
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	ea42 0103 	orr.w	r1, r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10a      	bne.n	800372c <HAL_ADC_ConfigChannel+0x564>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	0e9b      	lsrs	r3, r3, #26
 800371c:	3301      	adds	r3, #1
 800371e:	f003 021f 	and.w	r2, r3, #31
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	051b      	lsls	r3, r3, #20
 800372a:	e018      	b.n	800375e <HAL_ADC_ConfigChannel+0x596>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003744:	2320      	movs	r3, #32
 8003746:	e003      	b.n	8003750 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	f003 021f 	and.w	r2, r3, #31
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800375e:	430b      	orrs	r3, r1
 8003760:	e081      	b.n	8003866 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_ADC_ConfigChannel+0x5b6>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	0e9b      	lsrs	r3, r3, #26
 8003774:	3301      	adds	r3, #1
 8003776:	069b      	lsls	r3, r3, #26
 8003778:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800377c:	e015      	b.n	80037aa <HAL_ADC_ConfigChannel+0x5e2>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800378c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003796:	2320      	movs	r3, #32
 8003798:	e003      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	fab3 f383 	clz	r3, r3
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	069b      	lsls	r3, r3, #26
 80037a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x602>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	3301      	adds	r3, #1
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	e017      	b.n	80037fa <HAL_ADC_ConfigChannel+0x632>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	61bb      	str	r3, [r7, #24]
  return result;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80037e2:	2320      	movs	r3, #32
 80037e4:	e003      	b.n	80037ee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2101      	movs	r1, #1
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	ea42 0103 	orr.w	r1, r2, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10d      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x65e>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	0e9b      	lsrs	r3, r3, #26
 8003810:	3301      	adds	r3, #1
 8003812:	f003 021f 	and.w	r2, r3, #31
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	3b1e      	subs	r3, #30
 800381e:	051b      	lsls	r3, r3, #20
 8003820:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003824:	e01e      	b.n	8003864 <HAL_ADC_ConfigChannel+0x69c>
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	fa93 f3a3 	rbit	r3, r3
 8003832:	60fb      	str	r3, [r7, #12]
  return result;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800383e:	2320      	movs	r3, #32
 8003840:	e006      	b.n	8003850 <HAL_ADC_ConfigChannel+0x688>
 8003842:	bf00      	nop
 8003844:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f003 021f 	and.w	r2, r3, #31
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	3b1e      	subs	r3, #30
 800385e:	051b      	lsls	r3, r3, #20
 8003860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003864:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386a:	4619      	mov	r1, r3
 800386c:	f7ff f831 	bl	80028d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b44      	ldr	r3, [pc, #272]	@ (8003988 <HAL_ADC_ConfigChannel+0x7c0>)
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d07a      	beq.n	8003972 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800387c:	4843      	ldr	r0, [pc, #268]	@ (800398c <HAL_ADC_ConfigChannel+0x7c4>)
 800387e:	f7fe ff73 	bl	8002768 <LL_ADC_GetCommonPathInternalCh>
 8003882:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a41      	ldr	r2, [pc, #260]	@ (8003990 <HAL_ADC_ConfigChannel+0x7c8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d12c      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d126      	bne.n	80038ea <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003994 <HAL_ADC_ConfigChannel+0x7cc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0x6e8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003998 <HAL_ADC_ConfigChannel+0x7d0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d15d      	bne.n	800396c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038b8:	4619      	mov	r1, r3
 80038ba:	4834      	ldr	r0, [pc, #208]	@ (800398c <HAL_ADC_ConfigChannel+0x7c4>)
 80038bc:	f7fe ff41 	bl	8002742 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038c0:	4b36      	ldr	r3, [pc, #216]	@ (800399c <HAL_ADC_ConfigChannel+0x7d4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	4a36      	ldr	r2, [pc, #216]	@ (80039a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	4613      	mov	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038da:	e002      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3b01      	subs	r3, #1
 80038e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f9      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e8:	e040      	b.n	800396c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a2d      	ldr	r2, [pc, #180]	@ (80039a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d118      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80038f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d112      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a23      	ldr	r2, [pc, #140]	@ (8003994 <HAL_ADC_ConfigChannel+0x7cc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_ADC_ConfigChannel+0x74c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a22      	ldr	r2, [pc, #136]	@ (8003998 <HAL_ADC_ConfigChannel+0x7d0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d12d      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003914:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003918:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800391c:	4619      	mov	r1, r3
 800391e:	481b      	ldr	r0, [pc, #108]	@ (800398c <HAL_ADC_ConfigChannel+0x7c4>)
 8003920:	f7fe ff0f 	bl	8002742 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003924:	e024      	b.n	8003970 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1f      	ldr	r2, [pc, #124]	@ (80039a8 <HAL_ADC_ConfigChannel+0x7e0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d120      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003930:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11a      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <HAL_ADC_ConfigChannel+0x7cc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d115      	bne.n	8003972 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800394a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800394e:	4619      	mov	r1, r3
 8003950:	480e      	ldr	r0, [pc, #56]	@ (800398c <HAL_ADC_ConfigChannel+0x7c4>)
 8003952:	f7fe fef6 	bl	8002742 <LL_ADC_SetCommonPathInternalCh>
 8003956:	e00c      	b.n	8003972 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800396a:	e002      	b.n	8003972 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800396c:	bf00      	nop
 800396e:	e000      	b.n	8003972 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003970:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800397a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800397e:	4618      	mov	r0, r3
 8003980:	37d8      	adds	r7, #216	@ 0xd8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	80080000 	.word	0x80080000
 800398c:	50040300 	.word	0x50040300
 8003990:	c7520000 	.word	0xc7520000
 8003994:	50040000 	.word	0x50040000
 8003998:	50040200 	.word	0x50040200
 800399c:	20000000 	.word	0x20000000
 80039a0:	053e2d63 	.word	0x053e2d63
 80039a4:	cb840000 	.word	0xcb840000
 80039a8:	80000001 	.word	0x80000001

080039ac <LL_ADC_IsEnabled>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <LL_ADC_IsEnabled+0x18>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <LL_ADC_IsEnabled+0x1a>
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d101      	bne.n	80039ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b09f      	sub	sp, #124	@ 0x7c
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e093      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003a82:	2300      	movs	r3, #0
 8003a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003a86:	2300      	movs	r3, #0
 8003a88:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a47      	ldr	r2, [pc, #284]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d102      	bne.n	8003a9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a94:	4b46      	ldr	r3, [pc, #280]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	e001      	b.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e072      	b.n	8003ba2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff87 	bl	80039d2 <LL_ADC_REG_IsConversionOngoing>
 8003ac4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ff81 	bl	80039d2 <LL_ADC_REG_IsConversionOngoing>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d154      	bne.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d151      	bne.n	8003b80 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003adc:	4b35      	ldr	r3, [pc, #212]	@ (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003ade:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02c      	beq.n	8003b42 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003afa:	035b      	lsls	r3, r3, #13
 8003afc:	430b      	orrs	r3, r1
 8003afe:	431a      	orrs	r2, r3
 8003b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b02:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b04:	4829      	ldr	r0, [pc, #164]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b06:	f7ff ff51 	bl	80039ac <LL_ADC_IsEnabled>
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	4828      	ldr	r0, [pc, #160]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b0e:	f7ff ff4d 	bl	80039ac <LL_ADC_IsEnabled>
 8003b12:	4603      	mov	r3, r0
 8003b14:	431c      	orrs	r4, r3
 8003b16:	4828      	ldr	r0, [pc, #160]	@ (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003b18:	f7ff ff48 	bl	80039ac <LL_ADC_IsEnabled>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4323      	orrs	r3, r4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d137      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b2c:	f023 030f 	bic.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	6811      	ldr	r1, [r2, #0]
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	6892      	ldr	r2, [r2, #8]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b40:	e028      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b4c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b4e:	4817      	ldr	r0, [pc, #92]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003b50:	f7ff ff2c 	bl	80039ac <LL_ADC_IsEnabled>
 8003b54:	4604      	mov	r4, r0
 8003b56:	4816      	ldr	r0, [pc, #88]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003b58:	f7ff ff28 	bl	80039ac <LL_ADC_IsEnabled>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	431c      	orrs	r4, r3
 8003b60:	4815      	ldr	r0, [pc, #84]	@ (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003b62:	f7ff ff23 	bl	80039ac <LL_ADC_IsEnabled>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4323      	orrs	r3, r4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d112      	bne.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b76:	f023 030f 	bic.w	r3, r3, #15
 8003b7a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b7c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b7e:	e009      	b.n	8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003b92:	e000      	b.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b9e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	377c      	adds	r7, #124	@ 0x7c
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd90      	pop	{r4, r7, pc}
 8003baa:	bf00      	nop
 8003bac:	50040000 	.word	0x50040000
 8003bb0:	50040100 	.word	0x50040100
 8003bb4:	50040300 	.word	0x50040300
 8003bb8:	50040200 	.word	0x50040200

08003bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bee:	4a04      	ldr	r2, [pc, #16]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	60d3      	str	r3, [r2, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <__NVIC_GetPriorityGrouping+0x18>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	f003 0307 	and.w	r3, r3, #7
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db0b      	blt.n	8003c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4907      	ldr	r1, [pc, #28]	@ (8003c58 <__NVIC_EnableIRQ+0x38>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2001      	movs	r0, #1
 8003c42:	fa00 f202 	lsl.w	r2, r0, r2
 8003c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db0a      	blt.n	8003c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	490c      	ldr	r1, [pc, #48]	@ (8003ca8 <__NVIC_SetPriority+0x4c>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c84:	e00a      	b.n	8003c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4908      	ldr	r1, [pc, #32]	@ (8003cac <__NVIC_SetPriority+0x50>)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3b04      	subs	r3, #4
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	761a      	strb	r2, [r3, #24]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0307 	rsb	r3, r3, #7
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	bf28      	it	cs
 8003cce:	2304      	movcs	r3, #4
 8003cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <NVIC_EncodePriority+0x30>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3b03      	subs	r3, #3
 8003cde:	e000      	b.n	8003ce2 <NVIC_EncodePriority+0x32>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	4313      	orrs	r3, r2
         );
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	@ 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ff4c 	bl	8003bbc <__NVIC_SetPriorityGrouping>
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3e:	f7ff ff61 	bl	8003c04 <__NVIC_GetPriorityGrouping>
 8003d42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	6978      	ldr	r0, [r7, #20]
 8003d4a:	f7ff ffb1 	bl	8003cb0 <NVIC_EncodePriority>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ff80 	bl	8003c5c <__NVIC_SetPriority>
}
 8003d5c:	bf00      	nop
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff ff54 	bl	8003c20 <__NVIC_EnableIRQ>
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d008      	beq.n	8003daa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e022      	b.n	8003df0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020e 	bic.w	r2, r2, #14
 8003db8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0201 	bic.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f003 021c 	and.w	r2, r3, #28
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ddc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e22:	e17f      	b.n	8004124 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	4013      	ands	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8171 	beq.w	800411e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d005      	beq.n	8003e54 <HAL_GPIO_Init+0x40>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d130      	bne.n	8003eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	2203      	movs	r2, #3
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0201 	and.w	r2, r3, #1
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d118      	bne.n	8003ef4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	08db      	lsrs	r3, r3, #3
 8003ede:	f003 0201 	and.w	r2, r3, #1
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d017      	beq.n	8003f30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d123      	bne.n	8003f84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	08da      	lsrs	r2, r3, #3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3208      	adds	r2, #8
 8003f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	220f      	movs	r2, #15
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	6939      	ldr	r1, [r7, #16]
 8003f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2203      	movs	r2, #3
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0203 	and.w	r2, r3, #3
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80ac 	beq.w	800411e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc6:	4b5f      	ldr	r3, [pc, #380]	@ (8004144 <HAL_GPIO_Init+0x330>)
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	4a5e      	ldr	r2, [pc, #376]	@ (8004144 <HAL_GPIO_Init+0x330>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004144 <HAL_GPIO_Init+0x330>)
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fde:	4a5a      	ldr	r2, [pc, #360]	@ (8004148 <HAL_GPIO_Init+0x334>)
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	3302      	adds	r3, #2
 8003fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f003 0303 	and.w	r3, r3, #3
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	220f      	movs	r2, #15
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4013      	ands	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004008:	d025      	beq.n	8004056 <HAL_GPIO_Init+0x242>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a4f      	ldr	r2, [pc, #316]	@ (800414c <HAL_GPIO_Init+0x338>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01f      	beq.n	8004052 <HAL_GPIO_Init+0x23e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a4e      	ldr	r2, [pc, #312]	@ (8004150 <HAL_GPIO_Init+0x33c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d019      	beq.n	800404e <HAL_GPIO_Init+0x23a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a4d      	ldr	r2, [pc, #308]	@ (8004154 <HAL_GPIO_Init+0x340>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_GPIO_Init+0x236>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4c      	ldr	r2, [pc, #304]	@ (8004158 <HAL_GPIO_Init+0x344>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00d      	beq.n	8004046 <HAL_GPIO_Init+0x232>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4b      	ldr	r2, [pc, #300]	@ (800415c <HAL_GPIO_Init+0x348>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <HAL_GPIO_Init+0x22e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4a      	ldr	r2, [pc, #296]	@ (8004160 <HAL_GPIO_Init+0x34c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_GPIO_Init+0x22a>
 800403a:	2306      	movs	r3, #6
 800403c:	e00c      	b.n	8004058 <HAL_GPIO_Init+0x244>
 800403e:	2307      	movs	r3, #7
 8004040:	e00a      	b.n	8004058 <HAL_GPIO_Init+0x244>
 8004042:	2305      	movs	r3, #5
 8004044:	e008      	b.n	8004058 <HAL_GPIO_Init+0x244>
 8004046:	2304      	movs	r3, #4
 8004048:	e006      	b.n	8004058 <HAL_GPIO_Init+0x244>
 800404a:	2303      	movs	r3, #3
 800404c:	e004      	b.n	8004058 <HAL_GPIO_Init+0x244>
 800404e:	2302      	movs	r3, #2
 8004050:	e002      	b.n	8004058 <HAL_GPIO_Init+0x244>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_GPIO_Init+0x244>
 8004056:	2300      	movs	r3, #0
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	f002 0203 	and.w	r2, r2, #3
 800405e:	0092      	lsls	r2, r2, #2
 8004060:	4093      	lsls	r3, r2
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004068:	4937      	ldr	r1, [pc, #220]	@ (8004148 <HAL_GPIO_Init+0x334>)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	3302      	adds	r3, #2
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004076:	4b3b      	ldr	r3, [pc, #236]	@ (8004164 <HAL_GPIO_Init+0x350>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43db      	mvns	r3, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800409a:	4a32      	ldr	r2, [pc, #200]	@ (8004164 <HAL_GPIO_Init+0x350>)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040a0:	4b30      	ldr	r3, [pc, #192]	@ (8004164 <HAL_GPIO_Init+0x350>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040c4:	4a27      	ldr	r2, [pc, #156]	@ (8004164 <HAL_GPIO_Init+0x350>)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040ca:	4b26      	ldr	r3, [pc, #152]	@ (8004164 <HAL_GPIO_Init+0x350>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004164 <HAL_GPIO_Init+0x350>)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <HAL_GPIO_Init+0x350>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4013      	ands	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004118:	4a12      	ldr	r2, [pc, #72]	@ (8004164 <HAL_GPIO_Init+0x350>)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	3301      	adds	r3, #1
 8004122:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	fa22 f303 	lsr.w	r3, r2, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	f47f ae78 	bne.w	8003e24 <HAL_GPIO_Init+0x10>
  }
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	40010000 	.word	0x40010000
 800414c:	48000400 	.word	0x48000400
 8004150:	48000800 	.word	0x48000800
 8004154:	48000c00 	.word	0x48000c00
 8004158:	48001000 	.word	0x48001000
 800415c:	48001400 	.word	0x48001400
 8004160:	48001800 	.word	0x48001800
 8004164:	40010400 	.word	0x40010400

08004168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
 8004174:	4613      	mov	r3, r2
 8004176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004178:	787b      	ldrb	r3, [r7, #1]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800417e:	887a      	ldrh	r2, [r7, #2]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004184:	e002      	b.n	800418c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004186:	887a      	ldrh	r2, [r7, #2]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041a2:	4b08      	ldr	r3, [pc, #32]	@ (80041c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d006      	beq.n	80041bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041ae:	4a05      	ldr	r2, [pc, #20]	@ (80041c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f806 	bl	80041c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40010400 	.word	0x40010400

080041c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e08d      	b.n	800430c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fd f8a3 	bl	8001350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2224      	movs	r2, #36	@ 0x24
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800422e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800423e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004254:	609a      	str	r2, [r3, #8]
 8004256:	e006      	b.n	8004266 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004264:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d108      	bne.n	8004280 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	e007      	b.n	8004290 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800428e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800429e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69d9      	ldr	r1, [r3, #28]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f042 0201 	orr.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	d138      	bne.n	800439c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004334:	2302      	movs	r3, #2
 8004336:	e032      	b.n	800439e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	@ 0x24
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004366:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d139      	bne.n	8004434 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e033      	b.n	8004436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2224      	movs	r2, #36	@ 0x24
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004448:	4b04      	ldr	r3, [pc, #16]	@ (800445c <HAL_PWREx_GetVoltageRange+0x18>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446e:	d130      	bne.n	80044d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004470:	4b23      	ldr	r3, [pc, #140]	@ (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800447c:	d038      	beq.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800447e:	4b20      	ldr	r3, [pc, #128]	@ (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004488:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800448c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800448e:	4b1d      	ldr	r3, [pc, #116]	@ (8004504 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2232      	movs	r2, #50	@ 0x32
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	4a1b      	ldr	r2, [pc, #108]	@ (8004508 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	0c9b      	lsrs	r3, r3, #18
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a4:	e002      	b.n	80044ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044ac:	4b14      	ldr	r3, [pc, #80]	@ (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b8:	d102      	bne.n	80044c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f2      	bne.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044cc:	d110      	bne.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e00f      	b.n	80044f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044de:	d007      	beq.n	80044f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044e0:	4b07      	ldr	r3, [pc, #28]	@ (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044e8:	4a05      	ldr	r2, [pc, #20]	@ (8004500 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40007000 	.word	0x40007000
 8004504:	20000000 	.word	0x20000000
 8004508:	431bde83 	.word	0x431bde83

0800450c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e3ca      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	4b97      	ldr	r3, [pc, #604]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004528:	4b94      	ldr	r3, [pc, #592]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80e4 	beq.w	8004708 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_RCC_OscConfig+0x4a>
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	f040 808b 	bne.w	8004664 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 8087 	bne.w	8004664 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004556:	4b89      	ldr	r3, [pc, #548]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x62>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e3a2      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1a      	ldr	r2, [r3, #32]
 8004572:	4b82      	ldr	r3, [pc, #520]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <HAL_RCC_OscConfig+0x7c>
 800457e:	4b7f      	ldr	r3, [pc, #508]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004586:	e005      	b.n	8004594 <HAL_RCC_OscConfig+0x88>
 8004588:	4b7c      	ldr	r3, [pc, #496]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 800458a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004594:	4293      	cmp	r3, r2
 8004596:	d223      	bcs.n	80045e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fd87 	bl	80050b0 <RCC_SetFlashLatencyFromMSIRange>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e383      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ac:	4b73      	ldr	r3, [pc, #460]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a72      	ldr	r2, [pc, #456]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045b2:	f043 0308 	orr.w	r3, r3, #8
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b70      	ldr	r3, [pc, #448]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	496d      	ldr	r1, [pc, #436]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045ca:	4b6c      	ldr	r3, [pc, #432]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	4968      	ldr	r1, [pc, #416]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	604b      	str	r3, [r1, #4]
 80045de:	e025      	b.n	800462c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e0:	4b66      	ldr	r3, [pc, #408]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a65      	ldr	r2, [pc, #404]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045e6:	f043 0308 	orr.w	r3, r3, #8
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	4b63      	ldr	r3, [pc, #396]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	4960      	ldr	r1, [pc, #384]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045fe:	4b5f      	ldr	r3, [pc, #380]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	495b      	ldr	r1, [pc, #364]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d109      	bne.n	800462c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	4618      	mov	r0, r3
 800461e:	f000 fd47 	bl	80050b0 <RCC_SetFlashLatencyFromMSIRange>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e343      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800462c:	f000 fc4a 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b52      	ldr	r3, [pc, #328]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	4950      	ldr	r1, [pc, #320]	@ (8004780 <HAL_RCC_OscConfig+0x274>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	4a4e      	ldr	r2, [pc, #312]	@ (8004784 <HAL_RCC_OscConfig+0x278>)
 800464a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800464c:	4b4e      	ldr	r3, [pc, #312]	@ (8004788 <HAL_RCC_OscConfig+0x27c>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f7fd f855 	bl	8001700 <HAL_InitTick>
 8004656:	4603      	mov	r3, r0
 8004658:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d052      	beq.n	8004706 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	e327      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d032      	beq.n	80046d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800466c:	4b43      	ldr	r3, [pc, #268]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a42      	ldr	r2, [pc, #264]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004678:	f7fe f844 	bl	8002704 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004680:	f7fe f840 	bl	8002704 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e310      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004692:	4b3a      	ldr	r3, [pc, #232]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800469e:	4b37      	ldr	r3, [pc, #220]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a36      	ldr	r2, [pc, #216]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80046a4:	f043 0308 	orr.w	r3, r3, #8
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	4b34      	ldr	r3, [pc, #208]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	4931      	ldr	r1, [pc, #196]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046bc:	4b2f      	ldr	r3, [pc, #188]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	492c      	ldr	r1, [pc, #176]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	604b      	str	r3, [r1, #4]
 80046d0:	e01a      	b.n	8004708 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046d2:	4b2a      	ldr	r3, [pc, #168]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a29      	ldr	r2, [pc, #164]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046de:	f7fe f811 	bl	8002704 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e6:	f7fe f80d 	bl	8002704 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e2dd      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f8:	4b20      	ldr	r3, [pc, #128]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x1da>
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004706:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d074      	beq.n	80047fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b08      	cmp	r3, #8
 8004718:	d005      	beq.n	8004726 <HAL_RCC_OscConfig+0x21a>
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d10e      	bne.n	800473e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d10b      	bne.n	800473e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004726:	4b15      	ldr	r3, [pc, #84]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d064      	beq.n	80047fc <HAL_RCC_OscConfig+0x2f0>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d160      	bne.n	80047fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e2ba      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x24a>
 8004748:	4b0c      	ldr	r3, [pc, #48]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a0b      	ldr	r2, [pc, #44]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e026      	b.n	80047a4 <HAL_RCC_OscConfig+0x298>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800475e:	d115      	bne.n	800478c <HAL_RCC_OscConfig+0x280>
 8004760:	4b06      	ldr	r3, [pc, #24]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a05      	ldr	r2, [pc, #20]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004766:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b03      	ldr	r3, [pc, #12]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a02      	ldr	r2, [pc, #8]	@ (800477c <HAL_RCC_OscConfig+0x270>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e014      	b.n	80047a4 <HAL_RCC_OscConfig+0x298>
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	0800bd80 	.word	0x0800bd80
 8004784:	20000000 	.word	0x20000000
 8004788:	20000004 	.word	0x20000004
 800478c:	4ba0      	ldr	r3, [pc, #640]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a9f      	ldr	r2, [pc, #636]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b9d      	ldr	r3, [pc, #628]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a9c      	ldr	r2, [pc, #624]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fd ffaa 	bl	8002704 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fd ffa6 	bl	8002704 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	@ 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e276      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c6:	4b92      	ldr	r3, [pc, #584]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x2a8>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd ff96 	bl	8002704 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fd ff92 	bl	8002704 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	@ 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e262      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047ee:	4b88      	ldr	r3, [pc, #544]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x2d0>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d060      	beq.n	80048cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d005      	beq.n	800481c <HAL_RCC_OscConfig+0x310>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	2b0c      	cmp	r3, #12
 8004814:	d119      	bne.n	800484a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d116      	bne.n	800484a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481c:	4b7c      	ldr	r3, [pc, #496]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_OscConfig+0x328>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e23f      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004834:	4b76      	ldr	r3, [pc, #472]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	061b      	lsls	r3, r3, #24
 8004842:	4973      	ldr	r1, [pc, #460]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004848:	e040      	b.n	80048cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d023      	beq.n	800489a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004852:	4b6f      	ldr	r3, [pc, #444]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6e      	ldr	r2, [pc, #440]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800485c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd ff51 	bl	8002704 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004866:	f7fd ff4d 	bl	8002704 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e21d      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004878:	4b65      	ldr	r3, [pc, #404]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004884:	4b62      	ldr	r3, [pc, #392]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	495f      	ldr	r1, [pc, #380]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]
 8004898:	e018      	b.n	80048cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489a:	4b5d      	ldr	r3, [pc, #372]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a5c      	ldr	r2, [pc, #368]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80048a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fd ff2d 	bl	8002704 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ae:	f7fd ff29 	bl	8002704 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e1f9      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048c0:	4b53      	ldr	r3, [pc, #332]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d03c      	beq.n	8004952 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01c      	beq.n	800491a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80048e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fd ff08 	bl	8002704 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fd ff04 	bl	8002704 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e1d4      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800490a:	4b41      	ldr	r3, [pc, #260]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 800490c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ef      	beq.n	80048f8 <HAL_RCC_OscConfig+0x3ec>
 8004918:	e01b      	b.n	8004952 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 800491c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004920:	4a3b      	ldr	r2, [pc, #236]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492a:	f7fd feeb 	bl	8002704 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004932:	f7fd fee7 	bl	8002704 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e1b7      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004944:	4b32      	ldr	r3, [pc, #200]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ef      	bne.n	8004932 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80a6 	beq.w	8004aac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004960:	2300      	movs	r3, #0
 8004962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004964:	4b2a      	ldr	r3, [pc, #168]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10d      	bne.n	800498c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004970:	4b27      	ldr	r3, [pc, #156]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004974:	4a26      	ldr	r2, [pc, #152]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800497a:	6593      	str	r3, [r2, #88]	@ 0x58
 800497c:	4b24      	ldr	r3, [pc, #144]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 800497e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004988:	2301      	movs	r3, #1
 800498a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800498c:	4b21      	ldr	r3, [pc, #132]	@ (8004a14 <HAL_RCC_OscConfig+0x508>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d118      	bne.n	80049ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004998:	4b1e      	ldr	r3, [pc, #120]	@ (8004a14 <HAL_RCC_OscConfig+0x508>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a14 <HAL_RCC_OscConfig+0x508>)
 800499e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a4:	f7fd feae 	bl	8002704 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ac:	f7fd feaa 	bl	8002704 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e17a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <HAL_RCC_OscConfig+0x508>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d108      	bne.n	80049e4 <HAL_RCC_OscConfig+0x4d8>
 80049d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049e2:	e029      	b.n	8004a38 <HAL_RCC_OscConfig+0x52c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	d115      	bne.n	8004a18 <HAL_RCC_OscConfig+0x50c>
 80049ec:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f2:	4a07      	ldr	r2, [pc, #28]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049fc:	4b04      	ldr	r3, [pc, #16]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	4a03      	ldr	r2, [pc, #12]	@ (8004a10 <HAL_RCC_OscConfig+0x504>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a0c:	e014      	b.n	8004a38 <HAL_RCC_OscConfig+0x52c>
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40007000 	.word	0x40007000
 8004a18:	4b9c      	ldr	r3, [pc, #624]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1e:	4a9b      	ldr	r2, [pc, #620]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a28:	4b98      	ldr	r3, [pc, #608]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a2e:	4a97      	ldr	r2, [pc, #604]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a30:	f023 0304 	bic.w	r3, r3, #4
 8004a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d016      	beq.n	8004a6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fd fe60 	bl	8002704 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fd fe5c 	bl	8002704 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e12a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0ed      	beq.n	8004a48 <HAL_RCC_OscConfig+0x53c>
 8004a6c:	e015      	b.n	8004a9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6e:	f7fd fe49 	bl	8002704 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a74:	e00a      	b.n	8004a8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a76:	f7fd fe45 	bl	8002704 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e113      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ed      	bne.n	8004a76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9a:	7ffb      	ldrb	r3, [r7, #31]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa0:	4b7a      	ldr	r3, [pc, #488]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	4a79      	ldr	r2, [pc, #484]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80fe 	beq.w	8004cb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	f040 80d0 	bne.w	8004c60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ac0:	4b72      	ldr	r3, [pc, #456]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f003 0203 	and.w	r2, r3, #3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d130      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d127      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d11f      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b00:	2a07      	cmp	r2, #7
 8004b02:	bf14      	ite	ne
 8004b04:	2201      	movne	r2, #1
 8004b06:	2200      	moveq	r2, #0
 8004b08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d113      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b18:	085b      	lsrs	r3, r3, #1
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d109      	bne.n	8004b36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d06e      	beq.n	8004c14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	d069      	beq.n	8004c10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b3c:	4b53      	ldr	r3, [pc, #332]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b48:	4b50      	ldr	r3, [pc, #320]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0ad      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b58:	4b4c      	ldr	r3, [pc, #304]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b64:	f7fd fdce 	bl	8002704 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd fdca 	bl	8002704 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e09a      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b7e:	4b43      	ldr	r3, [pc, #268]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8a:	4b40      	ldr	r3, [pc, #256]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	4b40      	ldr	r3, [pc, #256]	@ (8004c90 <HAL_RCC_OscConfig+0x784>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b9a:	3a01      	subs	r2, #1
 8004b9c:	0112      	lsls	r2, r2, #4
 8004b9e:	4311      	orrs	r1, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ba4:	0212      	lsls	r2, r2, #8
 8004ba6:	4311      	orrs	r1, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004bac:	0852      	lsrs	r2, r2, #1
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	0552      	lsls	r2, r2, #21
 8004bb2:	4311      	orrs	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004bb8:	0852      	lsrs	r2, r2, #1
 8004bba:	3a01      	subs	r2, #1
 8004bbc:	0652      	lsls	r2, r2, #25
 8004bbe:	4311      	orrs	r1, r2
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bc4:	0912      	lsrs	r2, r2, #4
 8004bc6:	0452      	lsls	r2, r2, #17
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	4930      	ldr	r1, [pc, #192]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004be2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004be6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004be8:	f7fd fd8c 	bl	8002704 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fd fd88 	bl	8002704 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e058      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c02:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c0e:	e050      	b.n	8004cb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e04f      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d148      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c20:	4b1a      	ldr	r3, [pc, #104]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a19      	ldr	r2, [pc, #100]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c2c:	4b17      	ldr	r3, [pc, #92]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a16      	ldr	r2, [pc, #88]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c38:	f7fd fd64 	bl	8002704 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fd fd60 	bl	8002704 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e030      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c52:	4b0e      	ldr	r3, [pc, #56]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x734>
 8004c5e:	e028      	b.n	8004cb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b0c      	cmp	r3, #12
 8004c64:	d023      	beq.n	8004cae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a08      	ldr	r2, [pc, #32]	@ (8004c8c <HAL_RCC_OscConfig+0x780>)
 8004c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c72:	f7fd fd47 	bl	8002704 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c78:	e00c      	b.n	8004c94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7a:	f7fd fd43 	bl	8002704 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d905      	bls.n	8004c94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e013      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c94:	4b09      	ldr	r3, [pc, #36]	@ (8004cbc <HAL_RCC_OscConfig+0x7b0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ec      	bne.n	8004c7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ca0:	4b06      	ldr	r3, [pc, #24]	@ (8004cbc <HAL_RCC_OscConfig+0x7b0>)
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	4905      	ldr	r1, [pc, #20]	@ (8004cbc <HAL_RCC_OscConfig+0x7b0>)
 8004ca6:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <HAL_RCC_OscConfig+0x7b4>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60cb      	str	r3, [r1, #12]
 8004cac:	e001      	b.n	8004cb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	feeefffc 	.word	0xfeeefffc

08004cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e0e7      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd8:	4b75      	ldr	r3, [pc, #468]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d910      	bls.n	8004d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce6:	4b72      	ldr	r3, [pc, #456]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 0207 	bic.w	r2, r3, #7
 8004cee:	4970      	ldr	r1, [pc, #448]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d001      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e0cf      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d010      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	4b66      	ldr	r3, [pc, #408]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d908      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d24:	4b63      	ldr	r3, [pc, #396]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4960      	ldr	r1, [pc, #384]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d04c      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d121      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e0a6      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d107      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d62:	4b54      	ldr	r3, [pc, #336]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d115      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e09a      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d107      	bne.n	8004d8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e08e      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e086      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d9a:	4b46      	ldr	r3, [pc, #280]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f023 0203 	bic.w	r2, r3, #3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4943      	ldr	r1, [pc, #268]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dac:	f7fd fcaa 	bl	8002704 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db4:	f7fd fca6 	bl	8002704 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e06e      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	4b3a      	ldr	r3, [pc, #232]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 020c 	and.w	r2, r3, #12
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d1eb      	bne.n	8004db4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d010      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	4b31      	ldr	r3, [pc, #196]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d208      	bcs.n	8004e0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df8:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	492b      	ldr	r1, [pc, #172]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e0a:	4b29      	ldr	r3, [pc, #164]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d210      	bcs.n	8004e3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e18:	4b25      	ldr	r3, [pc, #148]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 0207 	bic.w	r2, r3, #7
 8004e20:	4923      	ldr	r1, [pc, #140]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e28:	4b21      	ldr	r3, [pc, #132]	@ (8004eb0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d001      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e036      	b.n	8004ea8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e46:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	4918      	ldr	r1, [pc, #96]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e64:	4b13      	ldr	r3, [pc, #76]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	4910      	ldr	r1, [pc, #64]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e78:	f000 f824 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	490b      	ldr	r1, [pc, #44]	@ (8004eb8 <HAL_RCC_ClockConfig+0x1f4>)
 8004e8a:	5ccb      	ldrb	r3, [r1, r3]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
 8004e94:	4a09      	ldr	r2, [pc, #36]	@ (8004ebc <HAL_RCC_ClockConfig+0x1f8>)
 8004e96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e98:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <HAL_RCC_ClockConfig+0x1fc>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fc fc2f 	bl	8001700 <HAL_InitTick>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ea6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40022000 	.word	0x40022000
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	0800bd80 	.word	0x0800bd80
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	20000004 	.word	0x20000004

08004ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b089      	sub	sp, #36	@ 0x24
 8004ec8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
 8004eda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004edc:	4b3b      	ldr	r3, [pc, #236]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b0c      	cmp	r3, #12
 8004ef0:	d121      	bne.n	8004f36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d11e      	bne.n	8004f36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ef8:	4b34      	ldr	r3, [pc, #208]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f04:	4b31      	ldr	r3, [pc, #196]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	e005      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f14:	4b2d      	ldr	r3, [pc, #180]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f20:	4a2b      	ldr	r2, [pc, #172]	@ (8004fd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f34:	e00a      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d102      	bne.n	8004f42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f3c:	4b25      	ldr	r3, [pc, #148]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f3e:	61bb      	str	r3, [r7, #24]
 8004f40:	e004      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f48:	4b23      	ldr	r3, [pc, #140]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	d134      	bne.n	8004fbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f52:	4b1e      	ldr	r3, [pc, #120]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d003      	beq.n	8004f6a <HAL_RCC_GetSysClockFreq+0xa6>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d003      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0xac>
 8004f68:	e005      	b.n	8004f76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f6c:	617b      	str	r3, [r7, #20]
      break;
 8004f6e:	e005      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f70:	4b19      	ldr	r3, [pc, #100]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f72:	617b      	str	r3, [r7, #20]
      break;
 8004f74:	e002      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	617b      	str	r3, [r7, #20]
      break;
 8004f7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f7c:	4b13      	ldr	r3, [pc, #76]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	3301      	adds	r3, #1
 8004f88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f8a:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	fb03 f202 	mul.w	r2, r3, r2
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x108>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	0e5b      	lsrs	r3, r3, #25
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	3301      	adds	r3, #1
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3724      	adds	r7, #36	@ 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	0800bd98 	.word	0x0800bd98
 8004fd4:	00f42400 	.word	0x00f42400
 8004fd8:	007a1200 	.word	0x007a1200

08004fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe0:	4b03      	ldr	r3, [pc, #12]	@ (8004ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000000 	.word	0x20000000

08004ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ff8:	f7ff fff0 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	0a1b      	lsrs	r3, r3, #8
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4904      	ldr	r1, [pc, #16]	@ (800501c <HAL_RCC_GetPCLK1Freq+0x28>)
 800500a:	5ccb      	ldrb	r3, [r1, r3]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021000 	.word	0x40021000
 800501c:	0800bd90 	.word	0x0800bd90

08005020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005024:	f7ff ffda 	bl	8004fdc <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0adb      	lsrs	r3, r3, #11
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4904      	ldr	r1, [pc, #16]	@ (8005048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000
 8005048:	0800bd90 	.word	0x0800bd90

0800504c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	220f      	movs	r2, #15
 800505a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800505c:	4b12      	ldr	r3, [pc, #72]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0203 	and.w	r2, r3, #3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005068:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005074:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005080:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800508e:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <HAL_RCC_GetClockConfig+0x60>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0207 	and.w	r2, r3, #7
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40022000 	.word	0x40022000

080050b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050b8:	2300      	movs	r3, #0
 80050ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050c8:	f7ff f9bc 	bl	8004444 <HAL_PWREx_GetVoltageRange>
 80050cc:	6178      	str	r0, [r7, #20]
 80050ce:	e014      	b.n	80050fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050d0:	4b25      	ldr	r3, [pc, #148]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d4:	4a24      	ldr	r2, [pc, #144]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050da:	6593      	str	r3, [r2, #88]	@ 0x58
 80050dc:	4b22      	ldr	r3, [pc, #136]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050e8:	f7ff f9ac 	bl	8004444 <HAL_PWREx_GetVoltageRange>
 80050ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005168 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005100:	d10b      	bne.n	800511a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b80      	cmp	r3, #128	@ 0x80
 8005106:	d919      	bls.n	800513c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2ba0      	cmp	r3, #160	@ 0xa0
 800510c:	d902      	bls.n	8005114 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800510e:	2302      	movs	r3, #2
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	e013      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005114:	2301      	movs	r3, #1
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	e010      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b80      	cmp	r3, #128	@ 0x80
 800511e:	d902      	bls.n	8005126 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005120:	2303      	movs	r3, #3
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	e00a      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b80      	cmp	r3, #128	@ 0x80
 800512a:	d102      	bne.n	8005132 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800512c:	2302      	movs	r3, #2
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e004      	b.n	800513c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b70      	cmp	r3, #112	@ 0x70
 8005136:	d101      	bne.n	800513c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005138:	2301      	movs	r3, #1
 800513a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800513c:	4b0b      	ldr	r3, [pc, #44]	@ (800516c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 0207 	bic.w	r2, r3, #7
 8005144:	4909      	ldr	r1, [pc, #36]	@ (800516c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800514c:	4b07      	ldr	r3, [pc, #28]	@ (800516c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	429a      	cmp	r2, r3
 8005158:	d001      	beq.n	800515e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40021000 	.word	0x40021000
 800516c:	40022000 	.word	0x40022000

08005170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005178:	2300      	movs	r3, #0
 800517a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800517c:	2300      	movs	r3, #0
 800517e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005188:	2b00      	cmp	r3, #0
 800518a:	d041      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005190:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005194:	d02a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005196:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800519a:	d824      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800519c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051a0:	d008      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80051a6:	d81e      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051b0:	d010      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051b2:	e018      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051b4:	4b86      	ldr	r3, [pc, #536]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a85      	ldr	r2, [pc, #532]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051c0:	e015      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3304      	adds	r3, #4
 80051c6:	2100      	movs	r1, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fabb 	bl	8005744 <RCCEx_PLLSAI1_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051d2:	e00c      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3320      	adds	r3, #32
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fba6 	bl	800592c <RCCEx_PLLSAI2_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051e4:	e003      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	74fb      	strb	r3, [r7, #19]
      break;
 80051ea:	e000      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051ee:	7cfb      	ldrb	r3, [r7, #19]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051f4:	4b76      	ldr	r3, [pc, #472]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005202:	4973      	ldr	r1, [pc, #460]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800520a:	e001      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520c:	7cfb      	ldrb	r3, [r7, #19]
 800520e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d041      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005220:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005224:	d02a      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005226:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800522a:	d824      	bhi.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800522c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005230:	d008      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005232:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005236:	d81e      	bhi.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00a      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800523c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005240:	d010      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005242:	e018      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005244:	4b62      	ldr	r3, [pc, #392]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	4a61      	ldr	r2, [pc, #388]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800524e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005250:	e015      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3304      	adds	r3, #4
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fa73 	bl	8005744 <RCCEx_PLLSAI1_Config>
 800525e:	4603      	mov	r3, r0
 8005260:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005262:	e00c      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3320      	adds	r3, #32
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fb5e 	bl	800592c <RCCEx_PLLSAI2_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005274:	e003      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	74fb      	strb	r3, [r7, #19]
      break;
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800527c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800527e:	7cfb      	ldrb	r3, [r7, #19]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005284:	4b52      	ldr	r3, [pc, #328]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005292:	494f      	ldr	r1, [pc, #316]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800529a:	e001      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	7cfb      	ldrb	r3, [r7, #19]
 800529e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80a0 	beq.w	80053ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ae:	2300      	movs	r3, #0
 80052b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052b2:	4b47      	ldr	r3, [pc, #284]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00d      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052c8:	4b41      	ldr	r3, [pc, #260]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052cc:	4a40      	ldr	r2, [pc, #256]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80052d4:	4b3e      	ldr	r3, [pc, #248]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052e0:	2301      	movs	r3, #1
 80052e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e4:	4b3b      	ldr	r3, [pc, #236]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a3a      	ldr	r2, [pc, #232]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052f0:	f7fd fa08 	bl	8002704 <HAL_GetTick>
 80052f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052f6:	e009      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f8:	f7fd fa04 	bl	8002704 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d902      	bls.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	74fb      	strb	r3, [r7, #19]
        break;
 800530a:	e005      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800530c:	4b31      	ldr	r3, [pc, #196]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0ef      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d15c      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800531e:	4b2c      	ldr	r3, [pc, #176]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005328:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01f      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	429a      	cmp	r2, r3
 800533a:	d019      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800533c:	4b24      	ldr	r3, [pc, #144]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005346:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005348:	4b21      	ldr	r3, [pc, #132]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534e:	4a20      	ldr	r2, [pc, #128]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005358:	4b1d      	ldr	r3, [pc, #116]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800535a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535e:	4a1c      	ldr	r2, [pc, #112]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005360:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005364:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005368:	4a19      	ldr	r2, [pc, #100]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d016      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fd f9c3 	bl	8002704 <HAL_GetTick>
 800537e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005380:	e00b      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005382:	f7fd f9bf 	bl	8002704 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005390:	4293      	cmp	r3, r2
 8005392:	d902      	bls.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	74fb      	strb	r3, [r7, #19]
            break;
 8005398:	e006      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800539a:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0ec      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053a8:	7cfb      	ldrb	r3, [r7, #19]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ae:	4b08      	ldr	r3, [pc, #32]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053be:	4904      	ldr	r1, [pc, #16]	@ (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053c6:	e009      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	74bb      	strb	r3, [r7, #18]
 80053cc:	e006      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053dc:	7c7b      	ldrb	r3, [r7, #17]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d105      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e2:	4b9e      	ldr	r3, [pc, #632]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e6:	4a9d      	ldr	r2, [pc, #628]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00a      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fa:	4b98      	ldr	r3, [pc, #608]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f023 0203 	bic.w	r2, r3, #3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005408:	4994      	ldr	r1, [pc, #592]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800541c:	4b8f      	ldr	r3, [pc, #572]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005422:	f023 020c 	bic.w	r2, r3, #12
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800542a:	498c      	ldr	r1, [pc, #560]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800543e:	4b87      	ldr	r3, [pc, #540]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005444:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	4983      	ldr	r1, [pc, #524]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00a      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005460:	4b7e      	ldr	r3, [pc, #504]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005466:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	497b      	ldr	r1, [pc, #492]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005470:	4313      	orrs	r3, r2
 8005472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005482:	4b76      	ldr	r3, [pc, #472]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005490:	4972      	ldr	r1, [pc, #456]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054a4:	4b6d      	ldr	r3, [pc, #436]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054b2:	496a      	ldr	r1, [pc, #424]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054c6:	4b65      	ldr	r3, [pc, #404]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	4961      	ldr	r1, [pc, #388]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054e8:	4b5c      	ldr	r3, [pc, #368]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f6:	4959      	ldr	r1, [pc, #356]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800550a:	4b54      	ldr	r3, [pc, #336]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005510:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005518:	4950      	ldr	r1, [pc, #320]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800552c:	4b4b      	ldr	r3, [pc, #300]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005532:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553a:	4948      	ldr	r1, [pc, #288]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800554e:	4b43      	ldr	r3, [pc, #268]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005554:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555c:	493f      	ldr	r1, [pc, #252]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d028      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005570:	4b3a      	ldr	r3, [pc, #232]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005576:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800557e:	4937      	ldr	r1, [pc, #220]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800558a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800558e:	d106      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005590:	4b32      	ldr	r3, [pc, #200]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a31      	ldr	r2, [pc, #196]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800559a:	60d3      	str	r3, [r2, #12]
 800559c:	e011      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055a6:	d10c      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3304      	adds	r3, #4
 80055ac:	2101      	movs	r1, #1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f8c8 	bl	8005744 <RCCEx_PLLSAI1_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80055be:	7cfb      	ldrb	r3, [r7, #19]
 80055c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d028      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055ce:	4b23      	ldr	r3, [pc, #140]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055dc:	491f      	ldr	r1, [pc, #124]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ec:	d106      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ee:	4b1b      	ldr	r3, [pc, #108]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	4a1a      	ldr	r2, [pc, #104]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055f8:	60d3      	str	r3, [r2, #12]
 80055fa:	e011      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005600:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005604:	d10c      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3304      	adds	r3, #4
 800560a:	2101      	movs	r1, #1
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f899 	bl	8005744 <RCCEx_PLLSAI1_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02b      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800562c:	4b0b      	ldr	r3, [pc, #44]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800563a:	4908      	ldr	r1, [pc, #32]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800564a:	d109      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800564c:	4b03      	ldr	r3, [pc, #12]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a02      	ldr	r2, [pc, #8]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005656:	60d3      	str	r3, [r2, #12]
 8005658:	e014      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800565a:	bf00      	nop
 800565c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005664:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005668:	d10c      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	2101      	movs	r1, #1
 8005670:	4618      	mov	r0, r3
 8005672:	f000 f867 	bl	8005744 <RCCEx_PLLSAI1_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800567a:	7cfb      	ldrb	r3, [r7, #19]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d02f      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005690:	4b2b      	ldr	r3, [pc, #172]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005696:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800569e:	4928      	ldr	r1, [pc, #160]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ae:	d10d      	bne.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	2102      	movs	r1, #2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 f844 	bl	8005744 <RCCEx_PLLSAI1_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d014      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	74bb      	strb	r3, [r7, #18]
 80056ca:	e011      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056d4:	d10c      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3320      	adds	r3, #32
 80056da:	2102      	movs	r1, #2
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 f925 	bl	800592c <RCCEx_PLLSAI2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056e6:	7cfb      	ldrb	r3, [r7, #19]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056fc:	4b10      	ldr	r3, [pc, #64]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005702:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800570a:	490d      	ldr	r1, [pc, #52]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800571e:	4b08      	ldr	r3, [pc, #32]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005724:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800572e:	4904      	ldr	r1, [pc, #16]	@ (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005736:	7cbb      	ldrb	r3, [r7, #18]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000

08005744 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005752:	4b75      	ldr	r3, [pc, #468]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d018      	beq.n	8005790 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800575e:	4b72      	ldr	r3, [pc, #456]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0203 	and.w	r2, r3, #3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d10d      	bne.n	800578a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
       ||
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005776:	4b6c      	ldr	r3, [pc, #432]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
       ||
 8005786:	429a      	cmp	r2, r3
 8005788:	d047      	beq.n	800581a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	73fb      	strb	r3, [r7, #15]
 800578e:	e044      	b.n	800581a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b03      	cmp	r3, #3
 8005796:	d018      	beq.n	80057ca <RCCEx_PLLSAI1_Config+0x86>
 8005798:	2b03      	cmp	r3, #3
 800579a:	d825      	bhi.n	80057e8 <RCCEx_PLLSAI1_Config+0xa4>
 800579c:	2b01      	cmp	r3, #1
 800579e:	d002      	beq.n	80057a6 <RCCEx_PLLSAI1_Config+0x62>
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d009      	beq.n	80057b8 <RCCEx_PLLSAI1_Config+0x74>
 80057a4:	e020      	b.n	80057e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057a6:	4b60      	ldr	r3, [pc, #384]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11d      	bne.n	80057ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b6:	e01a      	b.n	80057ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057b8:	4b5b      	ldr	r3, [pc, #364]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d116      	bne.n	80057f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c8:	e013      	b.n	80057f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057ca:	4b57      	ldr	r3, [pc, #348]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10f      	bne.n	80057f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057d6:	4b54      	ldr	r3, [pc, #336]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057e6:	e006      	b.n	80057f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
      break;
 80057ec:	e004      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057ee:	bf00      	nop
 80057f0:	e002      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057f2:	bf00      	nop
 80057f4:	e000      	b.n	80057f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10d      	bne.n	800581a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6819      	ldr	r1, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	3b01      	subs	r3, #1
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	430b      	orrs	r3, r1
 8005814:	4944      	ldr	r1, [pc, #272]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d17d      	bne.n	800591c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005820:	4b41      	ldr	r3, [pc, #260]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a40      	ldr	r2, [pc, #256]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005826:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800582a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582c:	f7fc ff6a 	bl	8002704 <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005832:	e009      	b.n	8005848 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005834:	f7fc ff66 	bl	8002704 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d902      	bls.n	8005848 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	73fb      	strb	r3, [r7, #15]
        break;
 8005846:	e005      	b.n	8005854 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005848:	4b37      	ldr	r3, [pc, #220]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ef      	bne.n	8005834 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d160      	bne.n	800591c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d111      	bne.n	8005884 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005860:	4b31      	ldr	r3, [pc, #196]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6892      	ldr	r2, [r2, #8]
 8005870:	0211      	lsls	r1, r2, #8
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	68d2      	ldr	r2, [r2, #12]
 8005876:	0912      	lsrs	r2, r2, #4
 8005878:	0452      	lsls	r2, r2, #17
 800587a:	430a      	orrs	r2, r1
 800587c:	492a      	ldr	r1, [pc, #168]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 800587e:	4313      	orrs	r3, r2
 8005880:	610b      	str	r3, [r1, #16]
 8005882:	e027      	b.n	80058d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d112      	bne.n	80058b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800588a:	4b27      	ldr	r3, [pc, #156]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005892:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	0211      	lsls	r1, r2, #8
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6912      	ldr	r2, [r2, #16]
 80058a0:	0852      	lsrs	r2, r2, #1
 80058a2:	3a01      	subs	r2, #1
 80058a4:	0552      	lsls	r2, r2, #21
 80058a6:	430a      	orrs	r2, r1
 80058a8:	491f      	ldr	r1, [pc, #124]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	610b      	str	r3, [r1, #16]
 80058ae:	e011      	b.n	80058d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80058b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6892      	ldr	r2, [r2, #8]
 80058c0:	0211      	lsls	r1, r2, #8
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6952      	ldr	r2, [r2, #20]
 80058c6:	0852      	lsrs	r2, r2, #1
 80058c8:	3a01      	subs	r2, #1
 80058ca:	0652      	lsls	r2, r2, #25
 80058cc:	430a      	orrs	r2, r1
 80058ce:	4916      	ldr	r1, [pc, #88]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058d4:	4b14      	ldr	r3, [pc, #80]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a13      	ldr	r2, [pc, #76]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e0:	f7fc ff10 	bl	8002704 <HAL_GetTick>
 80058e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058e6:	e009      	b.n	80058fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058e8:	f7fc ff0c 	bl	8002704 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d902      	bls.n	80058fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	73fb      	strb	r3, [r7, #15]
          break;
 80058fa:	e005      	b.n	8005908 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0ef      	beq.n	80058e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800590e:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	4904      	ldr	r1, [pc, #16]	@ (8005928 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005918:	4313      	orrs	r3, r2
 800591a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000

0800592c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005936:	2300      	movs	r3, #0
 8005938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800593a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d018      	beq.n	8005978 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005946:	4b67      	ldr	r3, [pc, #412]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f003 0203 	and.w	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d10d      	bne.n	8005972 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
       ||
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800595e:	4b61      	ldr	r3, [pc, #388]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
       ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d047      	beq.n	8005a02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
 8005976:	e044      	b.n	8005a02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d018      	beq.n	80059b2 <RCCEx_PLLSAI2_Config+0x86>
 8005980:	2b03      	cmp	r3, #3
 8005982:	d825      	bhi.n	80059d0 <RCCEx_PLLSAI2_Config+0xa4>
 8005984:	2b01      	cmp	r3, #1
 8005986:	d002      	beq.n	800598e <RCCEx_PLLSAI2_Config+0x62>
 8005988:	2b02      	cmp	r3, #2
 800598a:	d009      	beq.n	80059a0 <RCCEx_PLLSAI2_Config+0x74>
 800598c:	e020      	b.n	80059d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800598e:	4b55      	ldr	r3, [pc, #340]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d11d      	bne.n	80059d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800599e:	e01a      	b.n	80059d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a0:	4b50      	ldr	r3, [pc, #320]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d116      	bne.n	80059da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b0:	e013      	b.n	80059da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059b2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10f      	bne.n	80059de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059be:	4b49      	ldr	r3, [pc, #292]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059ce:	e006      	b.n	80059de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
      break;
 80059d4:	e004      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059d6:	bf00      	nop
 80059d8:	e002      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059da:	bf00      	nop
 80059dc:	e000      	b.n	80059e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80059de:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10d      	bne.n	8005a02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80059e6:	4b3f      	ldr	r3, [pc, #252]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	430b      	orrs	r3, r1
 80059fc:	4939      	ldr	r1, [pc, #228]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a02:	7bfb      	ldrb	r3, [r7, #15]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d167      	bne.n	8005ad8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a08:	4b36      	ldr	r3, [pc, #216]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a35      	ldr	r2, [pc, #212]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a14:	f7fc fe76 	bl	8002704 <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a1a:	e009      	b.n	8005a30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a1c:	f7fc fe72 	bl	8002704 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d902      	bls.n	8005a30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a2e:	e005      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a30:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ef      	bne.n	8005a1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d14a      	bne.n	8005ad8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d111      	bne.n	8005a6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a48:	4b26      	ldr	r3, [pc, #152]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6892      	ldr	r2, [r2, #8]
 8005a58:	0211      	lsls	r1, r2, #8
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68d2      	ldr	r2, [r2, #12]
 8005a5e:	0912      	lsrs	r2, r2, #4
 8005a60:	0452      	lsls	r2, r2, #17
 8005a62:	430a      	orrs	r2, r1
 8005a64:	491f      	ldr	r1, [pc, #124]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	614b      	str	r3, [r1, #20]
 8005a6a:	e011      	b.n	8005a90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6892      	ldr	r2, [r2, #8]
 8005a7c:	0211      	lsls	r1, r2, #8
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6912      	ldr	r2, [r2, #16]
 8005a82:	0852      	lsrs	r2, r2, #1
 8005a84:	3a01      	subs	r2, #1
 8005a86:	0652      	lsls	r2, r2, #25
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	4916      	ldr	r1, [pc, #88]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a90:	4b14      	ldr	r3, [pc, #80]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a13      	ldr	r2, [pc, #76]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9c:	f7fc fe32 	bl	8002704 <HAL_GetTick>
 8005aa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aa2:	e009      	b.n	8005ab8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005aa4:	f7fc fe2e 	bl	8002704 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d902      	bls.n	8005ab8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	73fb      	strb	r3, [r7, #15]
          break;
 8005ab6:	e005      	b.n	8005ac4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0ef      	beq.n	8005aa4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005aca:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005acc:	695a      	ldr	r2, [r3, #20]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	4904      	ldr	r1, [pc, #16]	@ (8005ae4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000

08005ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e095      	b.n	8005c26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d108      	bne.n	8005b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b0a:	d009      	beq.n	8005b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	61da      	str	r2, [r3, #28]
 8005b12:	e005      	b.n	8005b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fb fd5a 	bl	80015f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b60:	d902      	bls.n	8005b68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	e002      	b.n	8005b6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b76:	d007      	beq.n	8005b88 <HAL_SPI_Init+0xa0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b80:	d002      	beq.n	8005b88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bca:	ea42 0103 	orr.w	r1, r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	0c1b      	lsrs	r3, r3, #16
 8005be4:	f003 0204 	and.w	r2, r3, #4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c04:	ea42 0103 	orr.w	r1, r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e049      	b.n	8005cd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d106      	bne.n	8005c5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7fc f85d 	bl	8001d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f000 fcb9 	bl	80065e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d001      	beq.n	8005cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e04f      	b.n	8005d94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a23      	ldr	r2, [pc, #140]	@ (8005da0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d01d      	beq.n	8005d52 <HAL_TIM_Base_Start_IT+0x76>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1e:	d018      	beq.n	8005d52 <HAL_TIM_Base_Start_IT+0x76>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1f      	ldr	r2, [pc, #124]	@ (8005da4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <HAL_TIM_Base_Start_IT+0x76>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005da8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d00e      	beq.n	8005d52 <HAL_TIM_Base_Start_IT+0x76>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a1c      	ldr	r2, [pc, #112]	@ (8005dac <HAL_TIM_Base_Start_IT+0xd0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d009      	beq.n	8005d52 <HAL_TIM_Base_Start_IT+0x76>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1b      	ldr	r2, [pc, #108]	@ (8005db0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d004      	beq.n	8005d52 <HAL_TIM_Base_Start_IT+0x76>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a19      	ldr	r2, [pc, #100]	@ (8005db4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d115      	bne.n	8005d7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	4b17      	ldr	r3, [pc, #92]	@ (8005db8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b06      	cmp	r3, #6
 8005d62:	d015      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0xb4>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6a:	d011      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7c:	e008      	b.n	8005d90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0201 	orr.w	r2, r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e000      	b.n	8005d92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800
 8005dac:	40000c00 	.word	0x40000c00
 8005db0:	40013400 	.word	0x40013400
 8005db4:	40014000 	.word	0x40014000
 8005db8:	00010007 	.word	0x00010007

08005dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e049      	b.n	8005e62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f841 	bl	8005e6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f000 fbf2 	bl	80065e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b086      	sub	sp, #24
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e097      	b.n	8005fc2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fb fef4 	bl	8001c94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005ec2:	f023 0307 	bic.w	r3, r3, #7
 8005ec6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	f000 fb86 	bl	80065e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f00:	f023 0303 	bic.w	r3, r3, #3
 8005f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	4313      	orrs	r3, r2
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f1e:	f023 030c 	bic.w	r3, r3, #12
 8005f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	011a      	lsls	r2, r3, #4
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	031b      	lsls	r3, r3, #12
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f5c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f64:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4313      	orrs	r3, r2
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d020      	beq.n	800602e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01b      	beq.n	800602e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f06f 0202 	mvn.w	r2, #2
 8005ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fac6 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 800601a:	e005      	b.n	8006028 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fab8 	bl	8006592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fac9 	bl	80065ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d020      	beq.n	800607a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01b      	beq.n	800607a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0204 	mvn.w	r2, #4
 800604a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 faa0 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 8006066:	e005      	b.n	8006074 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fa92 	bl	8006592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 faa3 	bl	80065ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d020      	beq.n	80060c6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d01b      	beq.n	80060c6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f06f 0208 	mvn.w	r2, #8
 8006096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2204      	movs	r2, #4
 800609c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fa7a 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 80060b2:	e005      	b.n	80060c0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 fa6c 	bl	8006592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa7d 	bl	80065ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d020      	beq.n	8006112 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d01b      	beq.n	8006112 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f06f 0210 	mvn.w	r2, #16
 80060e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2208      	movs	r2, #8
 80060e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fa54 	bl	80065a6 <HAL_TIM_IC_CaptureCallback>
 80060fe:	e005      	b.n	800610c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fa46 	bl	8006592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa57 	bl	80065ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00c      	beq.n	8006136 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d007      	beq.n	8006136 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f06f 0201 	mvn.w	r2, #1
 800612e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fb fa09 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00c      	beq.n	8006164 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800615c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fee8 	bl	8006f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00c      	beq.n	8006188 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 fee0 	bl	8006f48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00c      	beq.n	80061ac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006198:	2b00      	cmp	r3, #0
 800619a:	d007      	beq.n	80061ac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fa11 	bl	80065ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00c      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0220 	mvn.w	r2, #32
 80061c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fea8 	bl	8006f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e0ff      	b.n	80063f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b14      	cmp	r3, #20
 8006202:	f200 80f0 	bhi.w	80063e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006206:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006261 	.word	0x08006261
 8006210:	080063e7 	.word	0x080063e7
 8006214:	080063e7 	.word	0x080063e7
 8006218:	080063e7 	.word	0x080063e7
 800621c:	080062a1 	.word	0x080062a1
 8006220:	080063e7 	.word	0x080063e7
 8006224:	080063e7 	.word	0x080063e7
 8006228:	080063e7 	.word	0x080063e7
 800622c:	080062e3 	.word	0x080062e3
 8006230:	080063e7 	.word	0x080063e7
 8006234:	080063e7 	.word	0x080063e7
 8006238:	080063e7 	.word	0x080063e7
 800623c:	08006323 	.word	0x08006323
 8006240:	080063e7 	.word	0x080063e7
 8006244:	080063e7 	.word	0x080063e7
 8006248:	080063e7 	.word	0x080063e7
 800624c:	08006365 	.word	0x08006365
 8006250:	080063e7 	.word	0x080063e7
 8006254:	080063e7 	.word	0x080063e7
 8006258:	080063e7 	.word	0x080063e7
 800625c:	080063a5 	.word	0x080063a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fa62 	bl	8006730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0208 	orr.w	r2, r2, #8
 800627a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0204 	bic.w	r2, r2, #4
 800628a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6999      	ldr	r1, [r3, #24]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	619a      	str	r2, [r3, #24]
      break;
 800629e:	e0a5      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68b9      	ldr	r1, [r7, #8]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fad2 	bl	8006850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6999      	ldr	r1, [r3, #24]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	021a      	lsls	r2, r3, #8
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	619a      	str	r2, [r3, #24]
      break;
 80062e0:	e084      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fb3b 	bl	8006964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0208 	orr.w	r2, r2, #8
 80062fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0204 	bic.w	r2, r2, #4
 800630c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69d9      	ldr	r1, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	61da      	str	r2, [r3, #28]
      break;
 8006320:	e064      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fba3 	bl	8006a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800633c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800634c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69d9      	ldr	r1, [r3, #28]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	021a      	lsls	r2, r3, #8
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	61da      	str	r2, [r3, #28]
      break;
 8006362:	e043      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fbec 	bl	8006b48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0208 	orr.w	r2, r2, #8
 800637e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f022 0204 	bic.w	r2, r2, #4
 800638e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063a2:	e023      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68b9      	ldr	r1, [r7, #8]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fc30 	bl	8006c10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	021a      	lsls	r2, r3, #8
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063e4:	e002      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop

08006400 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_TIM_ConfigClockSource+0x1c>
 8006418:	2302      	movs	r3, #2
 800641a:	e0b6      	b.n	800658a <HAL_TIM_ConfigClockSource+0x18a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800643e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006458:	d03e      	beq.n	80064d8 <HAL_TIM_ConfigClockSource+0xd8>
 800645a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800645e:	f200 8087 	bhi.w	8006570 <HAL_TIM_ConfigClockSource+0x170>
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006466:	f000 8086 	beq.w	8006576 <HAL_TIM_ConfigClockSource+0x176>
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800646e:	d87f      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x170>
 8006470:	2b70      	cmp	r3, #112	@ 0x70
 8006472:	d01a      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0xaa>
 8006474:	2b70      	cmp	r3, #112	@ 0x70
 8006476:	d87b      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x170>
 8006478:	2b60      	cmp	r3, #96	@ 0x60
 800647a:	d050      	beq.n	800651e <HAL_TIM_ConfigClockSource+0x11e>
 800647c:	2b60      	cmp	r3, #96	@ 0x60
 800647e:	d877      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x170>
 8006480:	2b50      	cmp	r3, #80	@ 0x50
 8006482:	d03c      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0xfe>
 8006484:	2b50      	cmp	r3, #80	@ 0x50
 8006486:	d873      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x170>
 8006488:	2b40      	cmp	r3, #64	@ 0x40
 800648a:	d058      	beq.n	800653e <HAL_TIM_ConfigClockSource+0x13e>
 800648c:	2b40      	cmp	r3, #64	@ 0x40
 800648e:	d86f      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x170>
 8006490:	2b30      	cmp	r3, #48	@ 0x30
 8006492:	d064      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x15e>
 8006494:	2b30      	cmp	r3, #48	@ 0x30
 8006496:	d86b      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x170>
 8006498:	2b20      	cmp	r3, #32
 800649a:	d060      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x15e>
 800649c:	2b20      	cmp	r3, #32
 800649e:	d867      	bhi.n	8006570 <HAL_TIM_ConfigClockSource+0x170>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d05c      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x15e>
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d05a      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x15e>
 80064a8:	e062      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064ba:	f000 fc89 	bl	8006dd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	609a      	str	r2, [r3, #8]
      break;
 80064d6:	e04f      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064e8:	f000 fc72 	bl	8006dd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064fa:	609a      	str	r2, [r3, #8]
      break;
 80064fc:	e03c      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800650a:	461a      	mov	r2, r3
 800650c:	f000 fbe6 	bl	8006cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2150      	movs	r1, #80	@ 0x50
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fc3f 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 800651c:	e02c      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800652a:	461a      	mov	r2, r3
 800652c:	f000 fc05 	bl	8006d3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2160      	movs	r1, #96	@ 0x60
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fc2f 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 800653c:	e01c      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800654a:	461a      	mov	r2, r3
 800654c:	f000 fbc6 	bl	8006cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2140      	movs	r1, #64	@ 0x40
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fc1f 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 800655c:	e00c      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4619      	mov	r1, r3
 8006568:	4610      	mov	r0, r2
 800656a:	f000 fc16 	bl	8006d9a <TIM_ITRx_SetConfig>
      break;
 800656e:	e003      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
      break;
 8006574:	e000      	b.n	8006578 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a46      	ldr	r2, [pc, #280]	@ (8006710 <TIM_Base_SetConfig+0x12c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d013      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006602:	d00f      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a43      	ldr	r2, [pc, #268]	@ (8006714 <TIM_Base_SetConfig+0x130>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00b      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a42      	ldr	r2, [pc, #264]	@ (8006718 <TIM_Base_SetConfig+0x134>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d007      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a41      	ldr	r2, [pc, #260]	@ (800671c <TIM_Base_SetConfig+0x138>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_Base_SetConfig+0x40>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a40      	ldr	r2, [pc, #256]	@ (8006720 <TIM_Base_SetConfig+0x13c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d108      	bne.n	8006636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a35      	ldr	r2, [pc, #212]	@ (8006710 <TIM_Base_SetConfig+0x12c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d01f      	beq.n	800667e <TIM_Base_SetConfig+0x9a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006644:	d01b      	beq.n	800667e <TIM_Base_SetConfig+0x9a>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a32      	ldr	r2, [pc, #200]	@ (8006714 <TIM_Base_SetConfig+0x130>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d017      	beq.n	800667e <TIM_Base_SetConfig+0x9a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a31      	ldr	r2, [pc, #196]	@ (8006718 <TIM_Base_SetConfig+0x134>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <TIM_Base_SetConfig+0x9a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a30      	ldr	r2, [pc, #192]	@ (800671c <TIM_Base_SetConfig+0x138>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00f      	beq.n	800667e <TIM_Base_SetConfig+0x9a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2f      	ldr	r2, [pc, #188]	@ (8006720 <TIM_Base_SetConfig+0x13c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00b      	beq.n	800667e <TIM_Base_SetConfig+0x9a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2e      	ldr	r2, [pc, #184]	@ (8006724 <TIM_Base_SetConfig+0x140>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d007      	beq.n	800667e <TIM_Base_SetConfig+0x9a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2d      	ldr	r2, [pc, #180]	@ (8006728 <TIM_Base_SetConfig+0x144>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d003      	beq.n	800667e <TIM_Base_SetConfig+0x9a>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2c      	ldr	r2, [pc, #176]	@ (800672c <TIM_Base_SetConfig+0x148>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d108      	bne.n	8006690 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a16      	ldr	r2, [pc, #88]	@ (8006710 <TIM_Base_SetConfig+0x12c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00f      	beq.n	80066dc <TIM_Base_SetConfig+0xf8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a18      	ldr	r2, [pc, #96]	@ (8006720 <TIM_Base_SetConfig+0x13c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00b      	beq.n	80066dc <TIM_Base_SetConfig+0xf8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a17      	ldr	r2, [pc, #92]	@ (8006724 <TIM_Base_SetConfig+0x140>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d007      	beq.n	80066dc <TIM_Base_SetConfig+0xf8>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a16      	ldr	r2, [pc, #88]	@ (8006728 <TIM_Base_SetConfig+0x144>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d003      	beq.n	80066dc <TIM_Base_SetConfig+0xf8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a15      	ldr	r2, [pc, #84]	@ (800672c <TIM_Base_SetConfig+0x148>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d103      	bne.n	80066e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d105      	bne.n	8006702 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f023 0201 	bic.w	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	611a      	str	r2, [r3, #16]
  }
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40013400 	.word	0x40013400
 8006724:	40014000 	.word	0x40014000
 8006728:	40014400 	.word	0x40014400
 800672c:	40014800 	.word	0x40014800

08006730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	f023 0201 	bic.w	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800675e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0303 	bic.w	r3, r3, #3
 800676a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 0302 	bic.w	r3, r3, #2
 800677c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a2c      	ldr	r2, [pc, #176]	@ (800683c <TIM_OC1_SetConfig+0x10c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00f      	beq.n	80067b0 <TIM_OC1_SetConfig+0x80>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a2b      	ldr	r2, [pc, #172]	@ (8006840 <TIM_OC1_SetConfig+0x110>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00b      	beq.n	80067b0 <TIM_OC1_SetConfig+0x80>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a2a      	ldr	r2, [pc, #168]	@ (8006844 <TIM_OC1_SetConfig+0x114>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d007      	beq.n	80067b0 <TIM_OC1_SetConfig+0x80>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a29      	ldr	r2, [pc, #164]	@ (8006848 <TIM_OC1_SetConfig+0x118>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_OC1_SetConfig+0x80>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a28      	ldr	r2, [pc, #160]	@ (800684c <TIM_OC1_SetConfig+0x11c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10c      	bne.n	80067ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0308 	bic.w	r3, r3, #8
 80067b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 0304 	bic.w	r3, r3, #4
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	@ (800683c <TIM_OC1_SetConfig+0x10c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00f      	beq.n	80067f2 <TIM_OC1_SetConfig+0xc2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006840 <TIM_OC1_SetConfig+0x110>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d00b      	beq.n	80067f2 <TIM_OC1_SetConfig+0xc2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a19      	ldr	r2, [pc, #100]	@ (8006844 <TIM_OC1_SetConfig+0x114>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d007      	beq.n	80067f2 <TIM_OC1_SetConfig+0xc2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a18      	ldr	r2, [pc, #96]	@ (8006848 <TIM_OC1_SetConfig+0x118>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC1_SetConfig+0xc2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a17      	ldr	r2, [pc, #92]	@ (800684c <TIM_OC1_SetConfig+0x11c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d111      	bne.n	8006816 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	621a      	str	r2, [r3, #32]
}
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40013400 	.word	0x40013400
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800

08006850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f023 0210 	bic.w	r2, r3, #16
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800687e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800688a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4313      	orrs	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f023 0320 	bic.w	r3, r3, #32
 800689e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a28      	ldr	r2, [pc, #160]	@ (8006950 <TIM_OC2_SetConfig+0x100>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d003      	beq.n	80068bc <TIM_OC2_SetConfig+0x6c>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a27      	ldr	r2, [pc, #156]	@ (8006954 <TIM_OC2_SetConfig+0x104>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d10d      	bne.n	80068d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a1d      	ldr	r2, [pc, #116]	@ (8006950 <TIM_OC2_SetConfig+0x100>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d00f      	beq.n	8006900 <TIM_OC2_SetConfig+0xb0>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006954 <TIM_OC2_SetConfig+0x104>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00b      	beq.n	8006900 <TIM_OC2_SetConfig+0xb0>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <TIM_OC2_SetConfig+0x108>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d007      	beq.n	8006900 <TIM_OC2_SetConfig+0xb0>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a1a      	ldr	r2, [pc, #104]	@ (800695c <TIM_OC2_SetConfig+0x10c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d003      	beq.n	8006900 <TIM_OC2_SetConfig+0xb0>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a19      	ldr	r2, [pc, #100]	@ (8006960 <TIM_OC2_SetConfig+0x110>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d113      	bne.n	8006928 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800690e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	621a      	str	r2, [r3, #32]
}
 8006942:	bf00      	nop
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40012c00 	.word	0x40012c00
 8006954:	40013400 	.word	0x40013400
 8006958:	40014000 	.word	0x40014000
 800695c:	40014400 	.word	0x40014400
 8006960:	40014800 	.word	0x40014800

08006964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0303 	bic.w	r3, r3, #3
 800699e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a27      	ldr	r2, [pc, #156]	@ (8006a60 <TIM_OC3_SetConfig+0xfc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_OC3_SetConfig+0x6a>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a26      	ldr	r2, [pc, #152]	@ (8006a64 <TIM_OC3_SetConfig+0x100>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d10d      	bne.n	80069ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006a60 <TIM_OC3_SetConfig+0xfc>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00f      	beq.n	8006a12 <TIM_OC3_SetConfig+0xae>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a64 <TIM_OC3_SetConfig+0x100>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00b      	beq.n	8006a12 <TIM_OC3_SetConfig+0xae>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a68 <TIM_OC3_SetConfig+0x104>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d007      	beq.n	8006a12 <TIM_OC3_SetConfig+0xae>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a19      	ldr	r2, [pc, #100]	@ (8006a6c <TIM_OC3_SetConfig+0x108>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d003      	beq.n	8006a12 <TIM_OC3_SetConfig+0xae>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a18      	ldr	r2, [pc, #96]	@ (8006a70 <TIM_OC3_SetConfig+0x10c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d113      	bne.n	8006a3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	621a      	str	r2, [r3, #32]
}
 8006a54:	bf00      	nop
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40013400 	.word	0x40013400
 8006a68:	40014000 	.word	0x40014000
 8006a6c:	40014400 	.word	0x40014400
 8006a70:	40014800 	.word	0x40014800

08006a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	031b      	lsls	r3, r3, #12
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a18      	ldr	r2, [pc, #96]	@ (8006b34 <TIM_OC4_SetConfig+0xc0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00f      	beq.n	8006af8 <TIM_OC4_SetConfig+0x84>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a17      	ldr	r2, [pc, #92]	@ (8006b38 <TIM_OC4_SetConfig+0xc4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d00b      	beq.n	8006af8 <TIM_OC4_SetConfig+0x84>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <TIM_OC4_SetConfig+0xc8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d007      	beq.n	8006af8 <TIM_OC4_SetConfig+0x84>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a15      	ldr	r2, [pc, #84]	@ (8006b40 <TIM_OC4_SetConfig+0xcc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_OC4_SetConfig+0x84>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a14      	ldr	r2, [pc, #80]	@ (8006b44 <TIM_OC4_SetConfig+0xd0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d109      	bne.n	8006b0c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006afe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	019b      	lsls	r3, r3, #6
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	40013400 	.word	0x40013400
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	40014400 	.word	0x40014400
 8006b44:	40014800 	.word	0x40014800

08006b48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a17      	ldr	r2, [pc, #92]	@ (8006bfc <TIM_OC5_SetConfig+0xb4>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00f      	beq.n	8006bc2 <TIM_OC5_SetConfig+0x7a>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a16      	ldr	r2, [pc, #88]	@ (8006c00 <TIM_OC5_SetConfig+0xb8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00b      	beq.n	8006bc2 <TIM_OC5_SetConfig+0x7a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a15      	ldr	r2, [pc, #84]	@ (8006c04 <TIM_OC5_SetConfig+0xbc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d007      	beq.n	8006bc2 <TIM_OC5_SetConfig+0x7a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a14      	ldr	r2, [pc, #80]	@ (8006c08 <TIM_OC5_SetConfig+0xc0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d003      	beq.n	8006bc2 <TIM_OC5_SetConfig+0x7a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a13      	ldr	r2, [pc, #76]	@ (8006c0c <TIM_OC5_SetConfig+0xc4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d109      	bne.n	8006bd6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	621a      	str	r2, [r3, #32]
}
 8006bf0:	bf00      	nop
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40013400 	.word	0x40013400
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40014400 	.word	0x40014400
 8006c0c:	40014800 	.word	0x40014800

08006c10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	021b      	lsls	r3, r3, #8
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	051b      	lsls	r3, r3, #20
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a18      	ldr	r2, [pc, #96]	@ (8006cc8 <TIM_OC6_SetConfig+0xb8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00f      	beq.n	8006c8c <TIM_OC6_SetConfig+0x7c>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a17      	ldr	r2, [pc, #92]	@ (8006ccc <TIM_OC6_SetConfig+0xbc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00b      	beq.n	8006c8c <TIM_OC6_SetConfig+0x7c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a16      	ldr	r2, [pc, #88]	@ (8006cd0 <TIM_OC6_SetConfig+0xc0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d007      	beq.n	8006c8c <TIM_OC6_SetConfig+0x7c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a15      	ldr	r2, [pc, #84]	@ (8006cd4 <TIM_OC6_SetConfig+0xc4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d003      	beq.n	8006c8c <TIM_OC6_SetConfig+0x7c>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a14      	ldr	r2, [pc, #80]	@ (8006cd8 <TIM_OC6_SetConfig+0xc8>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d109      	bne.n	8006ca0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	029b      	lsls	r3, r3, #10
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	621a      	str	r2, [r3, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40013400 	.word	0x40013400
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40014400 	.word	0x40014400
 8006cd8:	40014800 	.word	0x40014800

08006cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f023 0201 	bic.w	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 030a 	bic.w	r3, r3, #10
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	f023 0210 	bic.w	r2, r3, #16
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	031b      	lsls	r3, r3, #12
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f043 0307 	orr.w	r3, r3, #7
 8006dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	609a      	str	r2, [r3, #8]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
 8006ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	021a      	lsls	r2, r3, #8
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	609a      	str	r2, [r3, #8]
}
 8006e04:	bf00      	nop
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e068      	b.n	8006efa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a2e      	ldr	r2, [pc, #184]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d004      	beq.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2d      	ldr	r2, [pc, #180]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d108      	bne.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01d      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e9a:	d018      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d013      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a18      	ldr	r2, [pc, #96]	@ (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a13      	ldr	r2, [pc, #76]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a14      	ldr	r2, [pc, #80]	@ (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d10c      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40012c00 	.word	0x40012c00
 8006f0c:	40013400 	.word	0x40013400
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	40014000 	.word	0x40014000

08006f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e040      	b.n	8006ff0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d106      	bne.n	8006f84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7fa ff98 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2224      	movs	r2, #36	@ 0x24
 8006f88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0201 	bic.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fd2e 	bl	8007a04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fa73 	bl	8007494 <UART_SetConfig>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e01b      	b.n	8006ff0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fdad 	bl	8007b48 <UART_CheckIdleState>
 8006fee:	4603      	mov	r3, r0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	@ 0x28
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	4613      	mov	r3, r2
 8007006:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800700c:	2b20      	cmp	r3, #32
 800700e:	d177      	bne.n	8007100 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_UART_Transmit+0x24>
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e070      	b.n	8007102 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2221      	movs	r2, #33	@ 0x21
 800702c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800702e:	f7fb fb69 	bl	8002704 <HAL_GetTick>
 8007032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	88fa      	ldrh	r2, [r7, #6]
 8007038:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	88fa      	ldrh	r2, [r7, #6]
 8007040:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800704c:	d108      	bne.n	8007060 <HAL_UART_Transmit+0x68>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e003      	b.n	8007068 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007064:	2300      	movs	r3, #0
 8007066:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007068:	e02f      	b.n	80070ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2200      	movs	r2, #0
 8007072:	2180      	movs	r1, #128	@ 0x80
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fe0f 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d004      	beq.n	800708a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e03b      	b.n	8007102 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	881a      	ldrh	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800709c:	b292      	uxth	r2, r2
 800709e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	3302      	adds	r3, #2
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e007      	b.n	80070b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	781a      	ldrb	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	3301      	adds	r3, #1
 80070b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1c9      	bne.n	800706a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2200      	movs	r2, #0
 80070de:	2140      	movs	r1, #64	@ 0x40
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 fdd9 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e005      	b.n	8007102 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	e000      	b.n	8007102 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007100:	2302      	movs	r3, #2
  }
}
 8007102:	4618      	mov	r0, r3
 8007104:	3720      	adds	r7, #32
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b08a      	sub	sp, #40	@ 0x28
 800710e:	af02      	add	r7, sp, #8
 8007110:	60f8      	str	r0, [r7, #12]
 8007112:	60b9      	str	r1, [r7, #8]
 8007114:	603b      	str	r3, [r7, #0]
 8007116:	4613      	mov	r3, r2
 8007118:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007120:	2b20      	cmp	r3, #32
 8007122:	f040 80b6 	bne.w	8007292 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_UART_Receive+0x28>
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e0ae      	b.n	8007294 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2222      	movs	r2, #34	@ 0x22
 8007142:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800714c:	f7fb fada 	bl	8002704 <HAL_GetTick>
 8007150:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	88fa      	ldrh	r2, [r7, #6]
 8007156:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	88fa      	ldrh	r2, [r7, #6]
 800715e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800716a:	d10e      	bne.n	800718a <HAL_UART_Receive+0x80>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d105      	bne.n	8007180 <HAL_UART_Receive+0x76>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800717a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800717e:	e02d      	b.n	80071dc <HAL_UART_Receive+0xd2>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	22ff      	movs	r2, #255	@ 0xff
 8007184:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007188:	e028      	b.n	80071dc <HAL_UART_Receive+0xd2>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10d      	bne.n	80071ae <HAL_UART_Receive+0xa4>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <HAL_UART_Receive+0x9a>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	22ff      	movs	r2, #255	@ 0xff
 800719e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071a2:	e01b      	b.n	80071dc <HAL_UART_Receive+0xd2>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	227f      	movs	r2, #127	@ 0x7f
 80071a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071ac:	e016      	b.n	80071dc <HAL_UART_Receive+0xd2>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071b6:	d10d      	bne.n	80071d4 <HAL_UART_Receive+0xca>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d104      	bne.n	80071ca <HAL_UART_Receive+0xc0>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	227f      	movs	r2, #127	@ 0x7f
 80071c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071c8:	e008      	b.n	80071dc <HAL_UART_Receive+0xd2>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	223f      	movs	r2, #63	@ 0x3f
 80071ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80071d2:	e003      	b.n	80071dc <HAL_UART_Receive+0xd2>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071e2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ec:	d108      	bne.n	8007200 <HAL_UART_Receive+0xf6>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d104      	bne.n	8007200 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80071f6:	2300      	movs	r3, #0
 80071f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	e003      	b.n	8007208 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007204:	2300      	movs	r3, #0
 8007206:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007208:	e037      	b.n	800727a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2200      	movs	r2, #0
 8007212:	2120      	movs	r1, #32
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fd3f 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e033      	b.n	8007294 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10c      	bne.n	800724c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007238:	b29a      	uxth	r2, r3
 800723a:	8a7b      	ldrh	r3, [r7, #18]
 800723c:	4013      	ands	r3, r2
 800723e:	b29a      	uxth	r2, r3
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	3302      	adds	r3, #2
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e00d      	b.n	8007268 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007252:	b29b      	uxth	r3, r3
 8007254:	b2da      	uxtb	r2, r3
 8007256:	8a7b      	ldrh	r3, [r7, #18]
 8007258:	b2db      	uxtb	r3, r3
 800725a:	4013      	ands	r3, r2
 800725c:	b2da      	uxtb	r2, r3
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	3301      	adds	r3, #1
 8007266:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29a      	uxth	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1c1      	bne.n	800720a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	e000      	b.n	8007294 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007292:	2302      	movs	r3, #2
  }
}
 8007294:	4618      	mov	r0, r3
 8007296:	3720      	adds	r7, #32
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b0a0      	sub	sp, #128	@ 0x80
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80072b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072b4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80072b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072c4:	667a      	str	r2, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80072c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80072d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e6      	bne.n	80072a4 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3308      	adds	r3, #8
 80072dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80072e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3308      	adds	r3, #8
 80072f4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80072f6:	657a      	str	r2, [r7, #84]	@ 0x54
 80072f8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e5      	bne.n	80072d6 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800730e:	2b01      	cmp	r3, #1
 8007310:	d118      	bne.n	8007344 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	f023 0310 	bic.w	r3, r3, #16
 8007326:	677b      	str	r3, [r7, #116]	@ 0x74
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007330:	643b      	str	r3, [r7, #64]	@ 0x40
 8007332:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007336:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800733e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e6      	bne.n	8007312 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800734e:	2b80      	cmp	r3, #128	@ 0x80
 8007350:	d137      	bne.n	80073c2 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	61fb      	str	r3, [r7, #28]
   return(result);
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007368:	673b      	str	r3, [r7, #112]	@ 0x70
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007372:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007374:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e5      	bne.n	8007352 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738a:	2b00      	cmp	r3, #0
 800738c:	d019      	beq.n	80073c2 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007392:	2200      	movs	r2, #0
 8007394:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739a:	4618      	mov	r0, r3
 800739c:	f7fc fcf0 	bl	8003d80 <HAL_DMA_Abort>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fc fd26 	bl	8003dfc <HAL_DMA_GetError>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	d105      	bne.n	80073c2 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2210      	movs	r2, #16
 80073ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e063      	b.n	800748a <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073cc:	2b40      	cmp	r3, #64	@ 0x40
 80073ce:	d137      	bne.n	8007440 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3308      	adds	r3, #8
 80073d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3308      	adds	r3, #8
 80073ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073f0:	61ba      	str	r2, [r7, #24]
 80073f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6979      	ldr	r1, [r7, #20]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	613b      	str	r3, [r7, #16]
   return(result);
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e5      	bne.n	80073d0 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007408:	2b00      	cmp	r3, #0
 800740a:	d019      	beq.n	8007440 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007410:	2200      	movs	r2, #0
 8007412:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007418:	4618      	mov	r0, r3
 800741a:	f7fc fcb1 	bl	8003d80 <HAL_DMA_Abort>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00d      	beq.n	8007440 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007428:	4618      	mov	r0, r3
 800742a:	f7fc fce7 	bl	8003dfc <HAL_DMA_GetError>
 800742e:	4603      	mov	r3, r0
 8007430:	2b20      	cmp	r3, #32
 8007432:	d105      	bne.n	8007440 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2210      	movs	r2, #16
 8007438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e024      	b.n	800748a <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	220f      	movs	r2, #15
 8007456:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	8b1b      	ldrh	r3, [r3, #24]
 800745e:	b29a      	uxth	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0208 	orr.w	r2, r2, #8
 8007468:	b292      	uxth	r2, r2
 800746a:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2220      	movs	r2, #32
 8007470:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3780      	adds	r7, #128	@ 0x80
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007498:	b08a      	sub	sp, #40	@ 0x28
 800749a:	af00      	add	r7, sp, #0
 800749c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	4ba4      	ldr	r3, [pc, #656]	@ (8007754 <UART_SetConfig+0x2c0>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	6812      	ldr	r2, [r2, #0]
 80074ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074cc:	430b      	orrs	r3, r1
 80074ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a99      	ldr	r2, [pc, #612]	@ (8007758 <UART_SetConfig+0x2c4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d004      	beq.n	8007500 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074fc:	4313      	orrs	r3, r2
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007510:	430a      	orrs	r2, r1
 8007512:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a90      	ldr	r2, [pc, #576]	@ (800775c <UART_SetConfig+0x2c8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d126      	bne.n	800756c <UART_SetConfig+0xd8>
 800751e:	4b90      	ldr	r3, [pc, #576]	@ (8007760 <UART_SetConfig+0x2cc>)
 8007520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	2b03      	cmp	r3, #3
 800752a:	d81b      	bhi.n	8007564 <UART_SetConfig+0xd0>
 800752c:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <UART_SetConfig+0xa0>)
 800752e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007532:	bf00      	nop
 8007534:	08007545 	.word	0x08007545
 8007538:	08007555 	.word	0x08007555
 800753c:	0800754d 	.word	0x0800754d
 8007540:	0800755d 	.word	0x0800755d
 8007544:	2301      	movs	r3, #1
 8007546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800754a:	e116      	b.n	800777a <UART_SetConfig+0x2e6>
 800754c:	2302      	movs	r3, #2
 800754e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007552:	e112      	b.n	800777a <UART_SetConfig+0x2e6>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800755a:	e10e      	b.n	800777a <UART_SetConfig+0x2e6>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007562:	e10a      	b.n	800777a <UART_SetConfig+0x2e6>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800756a:	e106      	b.n	800777a <UART_SetConfig+0x2e6>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a7c      	ldr	r2, [pc, #496]	@ (8007764 <UART_SetConfig+0x2d0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d138      	bne.n	80075e8 <UART_SetConfig+0x154>
 8007576:	4b7a      	ldr	r3, [pc, #488]	@ (8007760 <UART_SetConfig+0x2cc>)
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757c:	f003 030c 	and.w	r3, r3, #12
 8007580:	2b0c      	cmp	r3, #12
 8007582:	d82d      	bhi.n	80075e0 <UART_SetConfig+0x14c>
 8007584:	a201      	add	r2, pc, #4	@ (adr r2, 800758c <UART_SetConfig+0xf8>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	080075c1 	.word	0x080075c1
 8007590:	080075e1 	.word	0x080075e1
 8007594:	080075e1 	.word	0x080075e1
 8007598:	080075e1 	.word	0x080075e1
 800759c:	080075d1 	.word	0x080075d1
 80075a0:	080075e1 	.word	0x080075e1
 80075a4:	080075e1 	.word	0x080075e1
 80075a8:	080075e1 	.word	0x080075e1
 80075ac:	080075c9 	.word	0x080075c9
 80075b0:	080075e1 	.word	0x080075e1
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	080075e1 	.word	0x080075e1
 80075bc:	080075d9 	.word	0x080075d9
 80075c0:	2300      	movs	r3, #0
 80075c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075c6:	e0d8      	b.n	800777a <UART_SetConfig+0x2e6>
 80075c8:	2302      	movs	r3, #2
 80075ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075ce:	e0d4      	b.n	800777a <UART_SetConfig+0x2e6>
 80075d0:	2304      	movs	r3, #4
 80075d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075d6:	e0d0      	b.n	800777a <UART_SetConfig+0x2e6>
 80075d8:	2308      	movs	r3, #8
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075de:	e0cc      	b.n	800777a <UART_SetConfig+0x2e6>
 80075e0:	2310      	movs	r3, #16
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80075e6:	e0c8      	b.n	800777a <UART_SetConfig+0x2e6>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a5e      	ldr	r2, [pc, #376]	@ (8007768 <UART_SetConfig+0x2d4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d125      	bne.n	800763e <UART_SetConfig+0x1aa>
 80075f2:	4b5b      	ldr	r3, [pc, #364]	@ (8007760 <UART_SetConfig+0x2cc>)
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075fc:	2b30      	cmp	r3, #48	@ 0x30
 80075fe:	d016      	beq.n	800762e <UART_SetConfig+0x19a>
 8007600:	2b30      	cmp	r3, #48	@ 0x30
 8007602:	d818      	bhi.n	8007636 <UART_SetConfig+0x1a2>
 8007604:	2b20      	cmp	r3, #32
 8007606:	d00a      	beq.n	800761e <UART_SetConfig+0x18a>
 8007608:	2b20      	cmp	r3, #32
 800760a:	d814      	bhi.n	8007636 <UART_SetConfig+0x1a2>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <UART_SetConfig+0x182>
 8007610:	2b10      	cmp	r3, #16
 8007612:	d008      	beq.n	8007626 <UART_SetConfig+0x192>
 8007614:	e00f      	b.n	8007636 <UART_SetConfig+0x1a2>
 8007616:	2300      	movs	r3, #0
 8007618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800761c:	e0ad      	b.n	800777a <UART_SetConfig+0x2e6>
 800761e:	2302      	movs	r3, #2
 8007620:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007624:	e0a9      	b.n	800777a <UART_SetConfig+0x2e6>
 8007626:	2304      	movs	r3, #4
 8007628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800762c:	e0a5      	b.n	800777a <UART_SetConfig+0x2e6>
 800762e:	2308      	movs	r3, #8
 8007630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007634:	e0a1      	b.n	800777a <UART_SetConfig+0x2e6>
 8007636:	2310      	movs	r3, #16
 8007638:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800763c:	e09d      	b.n	800777a <UART_SetConfig+0x2e6>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a4a      	ldr	r2, [pc, #296]	@ (800776c <UART_SetConfig+0x2d8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d125      	bne.n	8007694 <UART_SetConfig+0x200>
 8007648:	4b45      	ldr	r3, [pc, #276]	@ (8007760 <UART_SetConfig+0x2cc>)
 800764a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800764e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007652:	2bc0      	cmp	r3, #192	@ 0xc0
 8007654:	d016      	beq.n	8007684 <UART_SetConfig+0x1f0>
 8007656:	2bc0      	cmp	r3, #192	@ 0xc0
 8007658:	d818      	bhi.n	800768c <UART_SetConfig+0x1f8>
 800765a:	2b80      	cmp	r3, #128	@ 0x80
 800765c:	d00a      	beq.n	8007674 <UART_SetConfig+0x1e0>
 800765e:	2b80      	cmp	r3, #128	@ 0x80
 8007660:	d814      	bhi.n	800768c <UART_SetConfig+0x1f8>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <UART_SetConfig+0x1d8>
 8007666:	2b40      	cmp	r3, #64	@ 0x40
 8007668:	d008      	beq.n	800767c <UART_SetConfig+0x1e8>
 800766a:	e00f      	b.n	800768c <UART_SetConfig+0x1f8>
 800766c:	2300      	movs	r3, #0
 800766e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007672:	e082      	b.n	800777a <UART_SetConfig+0x2e6>
 8007674:	2302      	movs	r3, #2
 8007676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800767a:	e07e      	b.n	800777a <UART_SetConfig+0x2e6>
 800767c:	2304      	movs	r3, #4
 800767e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007682:	e07a      	b.n	800777a <UART_SetConfig+0x2e6>
 8007684:	2308      	movs	r3, #8
 8007686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768a:	e076      	b.n	800777a <UART_SetConfig+0x2e6>
 800768c:	2310      	movs	r3, #16
 800768e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007692:	e072      	b.n	800777a <UART_SetConfig+0x2e6>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a35      	ldr	r2, [pc, #212]	@ (8007770 <UART_SetConfig+0x2dc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d12a      	bne.n	80076f4 <UART_SetConfig+0x260>
 800769e:	4b30      	ldr	r3, [pc, #192]	@ (8007760 <UART_SetConfig+0x2cc>)
 80076a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076ac:	d01a      	beq.n	80076e4 <UART_SetConfig+0x250>
 80076ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076b2:	d81b      	bhi.n	80076ec <UART_SetConfig+0x258>
 80076b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076b8:	d00c      	beq.n	80076d4 <UART_SetConfig+0x240>
 80076ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076be:	d815      	bhi.n	80076ec <UART_SetConfig+0x258>
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <UART_SetConfig+0x238>
 80076c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076c8:	d008      	beq.n	80076dc <UART_SetConfig+0x248>
 80076ca:	e00f      	b.n	80076ec <UART_SetConfig+0x258>
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076d2:	e052      	b.n	800777a <UART_SetConfig+0x2e6>
 80076d4:	2302      	movs	r3, #2
 80076d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076da:	e04e      	b.n	800777a <UART_SetConfig+0x2e6>
 80076dc:	2304      	movs	r3, #4
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e2:	e04a      	b.n	800777a <UART_SetConfig+0x2e6>
 80076e4:	2308      	movs	r3, #8
 80076e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076ea:	e046      	b.n	800777a <UART_SetConfig+0x2e6>
 80076ec:	2310      	movs	r3, #16
 80076ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076f2:	e042      	b.n	800777a <UART_SetConfig+0x2e6>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a17      	ldr	r2, [pc, #92]	@ (8007758 <UART_SetConfig+0x2c4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d13a      	bne.n	8007774 <UART_SetConfig+0x2e0>
 80076fe:	4b18      	ldr	r3, [pc, #96]	@ (8007760 <UART_SetConfig+0x2cc>)
 8007700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007704:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007708:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800770c:	d01a      	beq.n	8007744 <UART_SetConfig+0x2b0>
 800770e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007712:	d81b      	bhi.n	800774c <UART_SetConfig+0x2b8>
 8007714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007718:	d00c      	beq.n	8007734 <UART_SetConfig+0x2a0>
 800771a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800771e:	d815      	bhi.n	800774c <UART_SetConfig+0x2b8>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <UART_SetConfig+0x298>
 8007724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007728:	d008      	beq.n	800773c <UART_SetConfig+0x2a8>
 800772a:	e00f      	b.n	800774c <UART_SetConfig+0x2b8>
 800772c:	2300      	movs	r3, #0
 800772e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007732:	e022      	b.n	800777a <UART_SetConfig+0x2e6>
 8007734:	2302      	movs	r3, #2
 8007736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800773a:	e01e      	b.n	800777a <UART_SetConfig+0x2e6>
 800773c:	2304      	movs	r3, #4
 800773e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007742:	e01a      	b.n	800777a <UART_SetConfig+0x2e6>
 8007744:	2308      	movs	r3, #8
 8007746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800774a:	e016      	b.n	800777a <UART_SetConfig+0x2e6>
 800774c:	2310      	movs	r3, #16
 800774e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007752:	e012      	b.n	800777a <UART_SetConfig+0x2e6>
 8007754:	efff69f3 	.word	0xefff69f3
 8007758:	40008000 	.word	0x40008000
 800775c:	40013800 	.word	0x40013800
 8007760:	40021000 	.word	0x40021000
 8007764:	40004400 	.word	0x40004400
 8007768:	40004800 	.word	0x40004800
 800776c:	40004c00 	.word	0x40004c00
 8007770:	40005000 	.word	0x40005000
 8007774:	2310      	movs	r3, #16
 8007776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a9f      	ldr	r2, [pc, #636]	@ (80079fc <UART_SetConfig+0x568>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d17a      	bne.n	800787a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007784:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007788:	2b08      	cmp	r3, #8
 800778a:	d824      	bhi.n	80077d6 <UART_SetConfig+0x342>
 800778c:	a201      	add	r2, pc, #4	@ (adr r2, 8007794 <UART_SetConfig+0x300>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	080077b9 	.word	0x080077b9
 8007798:	080077d7 	.word	0x080077d7
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	080077d7 	.word	0x080077d7
 80077a4:	080077c7 	.word	0x080077c7
 80077a8:	080077d7 	.word	0x080077d7
 80077ac:	080077d7 	.word	0x080077d7
 80077b0:	080077d7 	.word	0x080077d7
 80077b4:	080077cf 	.word	0x080077cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b8:	f7fd fc1c 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 80077bc:	61f8      	str	r0, [r7, #28]
        break;
 80077be:	e010      	b.n	80077e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c0:	4b8f      	ldr	r3, [pc, #572]	@ (8007a00 <UART_SetConfig+0x56c>)
 80077c2:	61fb      	str	r3, [r7, #28]
        break;
 80077c4:	e00d      	b.n	80077e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c6:	f7fd fb7d 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 80077ca:	61f8      	str	r0, [r7, #28]
        break;
 80077cc:	e009      	b.n	80077e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077d2:	61fb      	str	r3, [r7, #28]
        break;
 80077d4:	e005      	b.n	80077e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80077e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 80fb 	beq.w	80079e0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	685a      	ldr	r2, [r3, #4]
 80077ee:	4613      	mov	r3, r2
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	4413      	add	r3, r2
 80077f4:	69fa      	ldr	r2, [r7, #28]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d305      	bcc.n	8007806 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	429a      	cmp	r2, r3
 8007804:	d903      	bls.n	800780e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800780c:	e0e8      	b.n	80079e0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	2200      	movs	r2, #0
 8007812:	461c      	mov	r4, r3
 8007814:	4615      	mov	r5, r2
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	f04f 0300 	mov.w	r3, #0
 800781e:	022b      	lsls	r3, r5, #8
 8007820:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007824:	0222      	lsls	r2, r4, #8
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	6849      	ldr	r1, [r1, #4]
 800782a:	0849      	lsrs	r1, r1, #1
 800782c:	2000      	movs	r0, #0
 800782e:	4688      	mov	r8, r1
 8007830:	4681      	mov	r9, r0
 8007832:	eb12 0a08 	adds.w	sl, r2, r8
 8007836:	eb43 0b09 	adc.w	fp, r3, r9
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	603b      	str	r3, [r7, #0]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007848:	4650      	mov	r0, sl
 800784a:	4659      	mov	r1, fp
 800784c:	f7f9 f9cc 	bl	8000be8 <__aeabi_uldivmod>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4613      	mov	r3, r2
 8007856:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800785e:	d308      	bcc.n	8007872 <UART_SetConfig+0x3de>
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007866:	d204      	bcs.n	8007872 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	60da      	str	r2, [r3, #12]
 8007870:	e0b6      	b.n	80079e0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007878:	e0b2      	b.n	80079e0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007882:	d15e      	bne.n	8007942 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007884:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007888:	2b08      	cmp	r3, #8
 800788a:	d828      	bhi.n	80078de <UART_SetConfig+0x44a>
 800788c:	a201      	add	r2, pc, #4	@ (adr r2, 8007894 <UART_SetConfig+0x400>)
 800788e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007892:	bf00      	nop
 8007894:	080078b9 	.word	0x080078b9
 8007898:	080078c1 	.word	0x080078c1
 800789c:	080078c9 	.word	0x080078c9
 80078a0:	080078df 	.word	0x080078df
 80078a4:	080078cf 	.word	0x080078cf
 80078a8:	080078df 	.word	0x080078df
 80078ac:	080078df 	.word	0x080078df
 80078b0:	080078df 	.word	0x080078df
 80078b4:	080078d7 	.word	0x080078d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b8:	f7fd fb9c 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 80078bc:	61f8      	str	r0, [r7, #28]
        break;
 80078be:	e014      	b.n	80078ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078c0:	f7fd fbae 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 80078c4:	61f8      	str	r0, [r7, #28]
        break;
 80078c6:	e010      	b.n	80078ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007a00 <UART_SetConfig+0x56c>)
 80078ca:	61fb      	str	r3, [r7, #28]
        break;
 80078cc:	e00d      	b.n	80078ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ce:	f7fd faf9 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 80078d2:	61f8      	str	r0, [r7, #28]
        break;
 80078d4:	e009      	b.n	80078ea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078da:	61fb      	str	r3, [r7, #28]
        break;
 80078dc:	e005      	b.n	80078ea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80078e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d077      	beq.n	80079e0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	005a      	lsls	r2, r3, #1
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	085b      	lsrs	r3, r3, #1
 80078fa:	441a      	add	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	fbb2 f3f3 	udiv	r3, r2, r3
 8007904:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	2b0f      	cmp	r3, #15
 800790a:	d916      	bls.n	800793a <UART_SetConfig+0x4a6>
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007912:	d212      	bcs.n	800793a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	b29b      	uxth	r3, r3
 8007918:	f023 030f 	bic.w	r3, r3, #15
 800791c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	085b      	lsrs	r3, r3, #1
 8007922:	b29b      	uxth	r3, r3
 8007924:	f003 0307 	and.w	r3, r3, #7
 8007928:	b29a      	uxth	r2, r3
 800792a:	8afb      	ldrh	r3, [r7, #22]
 800792c:	4313      	orrs	r3, r2
 800792e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	8afa      	ldrh	r2, [r7, #22]
 8007936:	60da      	str	r2, [r3, #12]
 8007938:	e052      	b.n	80079e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007940:	e04e      	b.n	80079e0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007942:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007946:	2b08      	cmp	r3, #8
 8007948:	d827      	bhi.n	800799a <UART_SetConfig+0x506>
 800794a:	a201      	add	r2, pc, #4	@ (adr r2, 8007950 <UART_SetConfig+0x4bc>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	08007975 	.word	0x08007975
 8007954:	0800797d 	.word	0x0800797d
 8007958:	08007985 	.word	0x08007985
 800795c:	0800799b 	.word	0x0800799b
 8007960:	0800798b 	.word	0x0800798b
 8007964:	0800799b 	.word	0x0800799b
 8007968:	0800799b 	.word	0x0800799b
 800796c:	0800799b 	.word	0x0800799b
 8007970:	08007993 	.word	0x08007993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007974:	f7fd fb3e 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8007978:	61f8      	str	r0, [r7, #28]
        break;
 800797a:	e014      	b.n	80079a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800797c:	f7fd fb50 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 8007980:	61f8      	str	r0, [r7, #28]
        break;
 8007982:	e010      	b.n	80079a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007984:	4b1e      	ldr	r3, [pc, #120]	@ (8007a00 <UART_SetConfig+0x56c>)
 8007986:	61fb      	str	r3, [r7, #28]
        break;
 8007988:	e00d      	b.n	80079a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800798a:	f7fd fa9b 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 800798e:	61f8      	str	r0, [r7, #28]
        break;
 8007990:	e009      	b.n	80079a6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007996:	61fb      	str	r3, [r7, #28]
        break;
 8007998:	e005      	b.n	80079a6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80079a4:	bf00      	nop
    }

    if (pclk != 0U)
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d019      	beq.n	80079e0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	085a      	lsrs	r2, r3, #1
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	441a      	add	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80079be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	2b0f      	cmp	r3, #15
 80079c4:	d909      	bls.n	80079da <UART_SetConfig+0x546>
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079cc:	d205      	bcs.n	80079da <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60da      	str	r2, [r3, #12]
 80079d8:	e002      	b.n	80079e0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80079ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3728      	adds	r7, #40	@ 0x28
 80079f4:	46bd      	mov	sp, r7
 80079f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079fa:	bf00      	nop
 80079fc:	40008000 	.word	0x40008000
 8007a00:	00f42400 	.word	0x00f42400

08007a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00a      	beq.n	8007a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aba:	f003 0320 	and.w	r3, r3, #32
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01a      	beq.n	8007b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b02:	d10a      	bne.n	8007b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b098      	sub	sp, #96	@ 0x60
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b58:	f7fa fdd4 	bl	8002704 <HAL_GetTick>
 8007b5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d12e      	bne.n	8007bca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b74:	2200      	movs	r2, #0
 8007b76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f88c 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d021      	beq.n	8007bca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ba6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e6      	bne.n	8007b86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e062      	b.n	8007c90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	d149      	bne.n	8007c6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007be0:	2200      	movs	r2, #0
 8007be2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f856 	bl	8007c98 <UART_WaitOnFlagUntilTimeout>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d03c      	beq.n	8007c6c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	e853 3f00 	ldrex	r3, [r3]
 8007bfe:	623b      	str	r3, [r7, #32]
   return(result);
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c18:	e841 2300 	strex	r3, r2, [r1]
 8007c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d1e6      	bne.n	8007bf2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	e853 3f00 	ldrex	r3, [r3]
 8007c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0301 	bic.w	r3, r3, #1
 8007c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3308      	adds	r3, #8
 8007c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c44:	61fa      	str	r2, [r7, #28]
 8007c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	e841 2300 	strex	r3, r2, [r1]
 8007c50:	617b      	str	r3, [r7, #20]
   return(result);
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e5      	bne.n	8007c24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e011      	b.n	8007c90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3758      	adds	r7, #88	@ 0x58
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	603b      	str	r3, [r7, #0]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ca8:	e04f      	b.n	8007d4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb0:	d04b      	beq.n	8007d4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb2:	f7fa fd27 	bl	8002704 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d302      	bcc.n	8007cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e04e      	b.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d037      	beq.n	8007d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2b80      	cmp	r3, #128	@ 0x80
 8007cde:	d034      	beq.n	8007d4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b40      	cmp	r3, #64	@ 0x40
 8007ce4:	d031      	beq.n	8007d4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d110      	bne.n	8007d16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 f838 	bl	8007d72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2208      	movs	r2, #8
 8007d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e029      	b.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d24:	d111      	bne.n	8007d4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f000 f81e 	bl	8007d72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e00f      	b.n	8007d6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	69da      	ldr	r2, [r3, #28]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4013      	ands	r3, r2
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	bf0c      	ite	eq
 8007d5a:	2301      	moveq	r3, #1
 8007d5c:	2300      	movne	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d0a0      	beq.n	8007caa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b095      	sub	sp, #84	@ 0x54
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	461a      	mov	r2, r3
 8007d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007da0:	e841 2300 	strex	r3, r2, [r1]
 8007da4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1e6      	bne.n	8007d7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3308      	adds	r3, #8
 8007db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f023 0301 	bic.w	r3, r3, #1
 8007dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3308      	adds	r3, #8
 8007dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dd4:	e841 2300 	strex	r3, r2, [r1]
 8007dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e5      	bne.n	8007dac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d118      	bne.n	8007e1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f023 0310 	bic.w	r3, r3, #16
 8007dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e06:	61bb      	str	r3, [r7, #24]
 8007e08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6979      	ldr	r1, [r7, #20]
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	613b      	str	r3, [r7, #16]
   return(result);
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e6      	bne.n	8007de8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007e2e:	bf00      	nop
 8007e30:	3754      	adds	r7, #84	@ 0x54
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <atof>:
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	f000 be04 	b.w	8008a48 <strtod>

08007e40 <sulp>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	4604      	mov	r4, r0
 8007e44:	460d      	mov	r5, r1
 8007e46:	ec45 4b10 	vmov	d0, r4, r5
 8007e4a:	4616      	mov	r6, r2
 8007e4c:	f003 fa40 	bl	800b2d0 <__ulp>
 8007e50:	ec51 0b10 	vmov	r0, r1, d0
 8007e54:	b17e      	cbz	r6, 8007e76 <sulp+0x36>
 8007e56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dd09      	ble.n	8007e76 <sulp+0x36>
 8007e62:	051b      	lsls	r3, r3, #20
 8007e64:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007e68:	2400      	movs	r4, #0
 8007e6a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007e6e:	4622      	mov	r2, r4
 8007e70:	462b      	mov	r3, r5
 8007e72:	f7f8 fbc1 	bl	80005f8 <__aeabi_dmul>
 8007e76:	ec41 0b10 	vmov	d0, r0, r1
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	0000      	movs	r0, r0
	...

08007e80 <_strtod_l>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	b09f      	sub	sp, #124	@ 0x7c
 8007e86:	460c      	mov	r4, r1
 8007e88:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007e8e:	9005      	str	r0, [sp, #20]
 8007e90:	f04f 0a00 	mov.w	sl, #0
 8007e94:	f04f 0b00 	mov.w	fp, #0
 8007e98:	460a      	mov	r2, r1
 8007e9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007e9c:	7811      	ldrb	r1, [r2, #0]
 8007e9e:	292b      	cmp	r1, #43	@ 0x2b
 8007ea0:	d04a      	beq.n	8007f38 <_strtod_l+0xb8>
 8007ea2:	d838      	bhi.n	8007f16 <_strtod_l+0x96>
 8007ea4:	290d      	cmp	r1, #13
 8007ea6:	d832      	bhi.n	8007f0e <_strtod_l+0x8e>
 8007ea8:	2908      	cmp	r1, #8
 8007eaa:	d832      	bhi.n	8007f12 <_strtod_l+0x92>
 8007eac:	2900      	cmp	r1, #0
 8007eae:	d03b      	beq.n	8007f28 <_strtod_l+0xa8>
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007eb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007eb6:	782a      	ldrb	r2, [r5, #0]
 8007eb8:	2a30      	cmp	r2, #48	@ 0x30
 8007eba:	f040 80b3 	bne.w	8008024 <_strtod_l+0x1a4>
 8007ebe:	786a      	ldrb	r2, [r5, #1]
 8007ec0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ec4:	2a58      	cmp	r2, #88	@ 0x58
 8007ec6:	d16e      	bne.n	8007fa6 <_strtod_l+0x126>
 8007ec8:	9302      	str	r3, [sp, #8]
 8007eca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	4a8e      	ldr	r2, [pc, #568]	@ (800810c <_strtod_l+0x28c>)
 8007ed4:	9805      	ldr	r0, [sp, #20]
 8007ed6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ed8:	a919      	add	r1, sp, #100	@ 0x64
 8007eda:	f002 faeb 	bl	800a4b4 <__gethex>
 8007ede:	f010 060f 	ands.w	r6, r0, #15
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	d005      	beq.n	8007ef2 <_strtod_l+0x72>
 8007ee6:	2e06      	cmp	r6, #6
 8007ee8:	d128      	bne.n	8007f3c <_strtod_l+0xbc>
 8007eea:	3501      	adds	r5, #1
 8007eec:	2300      	movs	r3, #0
 8007eee:	9519      	str	r5, [sp, #100]	@ 0x64
 8007ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ef2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f040 858e 	bne.w	8008a16 <_strtod_l+0xb96>
 8007efa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007efc:	b1cb      	cbz	r3, 8007f32 <_strtod_l+0xb2>
 8007efe:	4652      	mov	r2, sl
 8007f00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007f04:	ec43 2b10 	vmov	d0, r2, r3
 8007f08:	b01f      	add	sp, #124	@ 0x7c
 8007f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0e:	2920      	cmp	r1, #32
 8007f10:	d1ce      	bne.n	8007eb0 <_strtod_l+0x30>
 8007f12:	3201      	adds	r2, #1
 8007f14:	e7c1      	b.n	8007e9a <_strtod_l+0x1a>
 8007f16:	292d      	cmp	r1, #45	@ 0x2d
 8007f18:	d1ca      	bne.n	8007eb0 <_strtod_l+0x30>
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f1e:	1c51      	adds	r1, r2, #1
 8007f20:	9119      	str	r1, [sp, #100]	@ 0x64
 8007f22:	7852      	ldrb	r2, [r2, #1]
 8007f24:	2a00      	cmp	r2, #0
 8007f26:	d1c5      	bne.n	8007eb4 <_strtod_l+0x34>
 8007f28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f2a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f040 8570 	bne.w	8008a12 <_strtod_l+0xb92>
 8007f32:	4652      	mov	r2, sl
 8007f34:	465b      	mov	r3, fp
 8007f36:	e7e5      	b.n	8007f04 <_strtod_l+0x84>
 8007f38:	2100      	movs	r1, #0
 8007f3a:	e7ef      	b.n	8007f1c <_strtod_l+0x9c>
 8007f3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f3e:	b13a      	cbz	r2, 8007f50 <_strtod_l+0xd0>
 8007f40:	2135      	movs	r1, #53	@ 0x35
 8007f42:	a81c      	add	r0, sp, #112	@ 0x70
 8007f44:	f003 fabe 	bl	800b4c4 <__copybits>
 8007f48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f4a:	9805      	ldr	r0, [sp, #20]
 8007f4c:	f002 fe8c 	bl	800ac68 <_Bfree>
 8007f50:	3e01      	subs	r6, #1
 8007f52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007f54:	2e04      	cmp	r6, #4
 8007f56:	d806      	bhi.n	8007f66 <_strtod_l+0xe6>
 8007f58:	e8df f006 	tbb	[pc, r6]
 8007f5c:	201d0314 	.word	0x201d0314
 8007f60:	14          	.byte	0x14
 8007f61:	00          	.byte	0x00
 8007f62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007f66:	05e1      	lsls	r1, r4, #23
 8007f68:	bf48      	it	mi
 8007f6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007f6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f72:	0d1b      	lsrs	r3, r3, #20
 8007f74:	051b      	lsls	r3, r3, #20
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1bb      	bne.n	8007ef2 <_strtod_l+0x72>
 8007f7a:	f001 fb57 	bl	800962c <__errno>
 8007f7e:	2322      	movs	r3, #34	@ 0x22
 8007f80:	6003      	str	r3, [r0, #0]
 8007f82:	e7b6      	b.n	8007ef2 <_strtod_l+0x72>
 8007f84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007f88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007f8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007f90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007f94:	e7e7      	b.n	8007f66 <_strtod_l+0xe6>
 8007f96:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008114 <_strtod_l+0x294>
 8007f9a:	e7e4      	b.n	8007f66 <_strtod_l+0xe6>
 8007f9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007fa0:	f04f 3aff 	mov.w	sl, #4294967295
 8007fa4:	e7df      	b.n	8007f66 <_strtod_l+0xe6>
 8007fa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fa8:	1c5a      	adds	r2, r3, #1
 8007faa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b30      	cmp	r3, #48	@ 0x30
 8007fb0:	d0f9      	beq.n	8007fa6 <_strtod_l+0x126>
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d09d      	beq.n	8007ef2 <_strtod_l+0x72>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9308      	str	r3, [sp, #32]
 8007fc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fc4:	461f      	mov	r7, r3
 8007fc6:	220a      	movs	r2, #10
 8007fc8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007fca:	7805      	ldrb	r5, [r0, #0]
 8007fcc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007fd0:	b2d9      	uxtb	r1, r3
 8007fd2:	2909      	cmp	r1, #9
 8007fd4:	d928      	bls.n	8008028 <_strtod_l+0x1a8>
 8007fd6:	494e      	ldr	r1, [pc, #312]	@ (8008110 <_strtod_l+0x290>)
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f001 fab8 	bl	800954e <strncmp>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d032      	beq.n	8008048 <_strtod_l+0x1c8>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	462a      	mov	r2, r5
 8007fe6:	4681      	mov	r9, r0
 8007fe8:	463d      	mov	r5, r7
 8007fea:	4603      	mov	r3, r0
 8007fec:	2a65      	cmp	r2, #101	@ 0x65
 8007fee:	d001      	beq.n	8007ff4 <_strtod_l+0x174>
 8007ff0:	2a45      	cmp	r2, #69	@ 0x45
 8007ff2:	d114      	bne.n	800801e <_strtod_l+0x19e>
 8007ff4:	b91d      	cbnz	r5, 8007ffe <_strtod_l+0x17e>
 8007ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ff8:	4302      	orrs	r2, r0
 8007ffa:	d095      	beq.n	8007f28 <_strtod_l+0xa8>
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008000:	1c62      	adds	r2, r4, #1
 8008002:	9219      	str	r2, [sp, #100]	@ 0x64
 8008004:	7862      	ldrb	r2, [r4, #1]
 8008006:	2a2b      	cmp	r2, #43	@ 0x2b
 8008008:	d077      	beq.n	80080fa <_strtod_l+0x27a>
 800800a:	2a2d      	cmp	r2, #45	@ 0x2d
 800800c:	d07b      	beq.n	8008106 <_strtod_l+0x286>
 800800e:	f04f 0c00 	mov.w	ip, #0
 8008012:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008016:	2909      	cmp	r1, #9
 8008018:	f240 8082 	bls.w	8008120 <_strtod_l+0x2a0>
 800801c:	9419      	str	r4, [sp, #100]	@ 0x64
 800801e:	f04f 0800 	mov.w	r8, #0
 8008022:	e0a2      	b.n	800816a <_strtod_l+0x2ea>
 8008024:	2300      	movs	r3, #0
 8008026:	e7c7      	b.n	8007fb8 <_strtod_l+0x138>
 8008028:	2f08      	cmp	r7, #8
 800802a:	bfd5      	itete	le
 800802c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800802e:	9908      	ldrgt	r1, [sp, #32]
 8008030:	fb02 3301 	mlale	r3, r2, r1, r3
 8008034:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008038:	f100 0001 	add.w	r0, r0, #1
 800803c:	bfd4      	ite	le
 800803e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008040:	9308      	strgt	r3, [sp, #32]
 8008042:	3701      	adds	r7, #1
 8008044:	9019      	str	r0, [sp, #100]	@ 0x64
 8008046:	e7bf      	b.n	8007fc8 <_strtod_l+0x148>
 8008048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	9219      	str	r2, [sp, #100]	@ 0x64
 800804e:	785a      	ldrb	r2, [r3, #1]
 8008050:	b37f      	cbz	r7, 80080b2 <_strtod_l+0x232>
 8008052:	4681      	mov	r9, r0
 8008054:	463d      	mov	r5, r7
 8008056:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800805a:	2b09      	cmp	r3, #9
 800805c:	d912      	bls.n	8008084 <_strtod_l+0x204>
 800805e:	2301      	movs	r3, #1
 8008060:	e7c4      	b.n	8007fec <_strtod_l+0x16c>
 8008062:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	9219      	str	r2, [sp, #100]	@ 0x64
 8008068:	785a      	ldrb	r2, [r3, #1]
 800806a:	3001      	adds	r0, #1
 800806c:	2a30      	cmp	r2, #48	@ 0x30
 800806e:	d0f8      	beq.n	8008062 <_strtod_l+0x1e2>
 8008070:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008074:	2b08      	cmp	r3, #8
 8008076:	f200 84d3 	bhi.w	8008a20 <_strtod_l+0xba0>
 800807a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800807c:	930c      	str	r3, [sp, #48]	@ 0x30
 800807e:	4681      	mov	r9, r0
 8008080:	2000      	movs	r0, #0
 8008082:	4605      	mov	r5, r0
 8008084:	3a30      	subs	r2, #48	@ 0x30
 8008086:	f100 0301 	add.w	r3, r0, #1
 800808a:	d02a      	beq.n	80080e2 <_strtod_l+0x262>
 800808c:	4499      	add	r9, r3
 800808e:	eb00 0c05 	add.w	ip, r0, r5
 8008092:	462b      	mov	r3, r5
 8008094:	210a      	movs	r1, #10
 8008096:	4563      	cmp	r3, ip
 8008098:	d10d      	bne.n	80080b6 <_strtod_l+0x236>
 800809a:	1c69      	adds	r1, r5, #1
 800809c:	4401      	add	r1, r0
 800809e:	4428      	add	r0, r5
 80080a0:	2808      	cmp	r0, #8
 80080a2:	dc16      	bgt.n	80080d2 <_strtod_l+0x252>
 80080a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080a6:	230a      	movs	r3, #10
 80080a8:	fb03 2300 	mla	r3, r3, r0, r2
 80080ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ae:	2300      	movs	r3, #0
 80080b0:	e018      	b.n	80080e4 <_strtod_l+0x264>
 80080b2:	4638      	mov	r0, r7
 80080b4:	e7da      	b.n	800806c <_strtod_l+0x1ec>
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	f103 0301 	add.w	r3, r3, #1
 80080bc:	dc03      	bgt.n	80080c6 <_strtod_l+0x246>
 80080be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80080c0:	434e      	muls	r6, r1
 80080c2:	960a      	str	r6, [sp, #40]	@ 0x28
 80080c4:	e7e7      	b.n	8008096 <_strtod_l+0x216>
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	bfde      	ittt	le
 80080ca:	9e08      	ldrle	r6, [sp, #32]
 80080cc:	434e      	mulle	r6, r1
 80080ce:	9608      	strle	r6, [sp, #32]
 80080d0:	e7e1      	b.n	8008096 <_strtod_l+0x216>
 80080d2:	280f      	cmp	r0, #15
 80080d4:	dceb      	bgt.n	80080ae <_strtod_l+0x22e>
 80080d6:	9808      	ldr	r0, [sp, #32]
 80080d8:	230a      	movs	r3, #10
 80080da:	fb03 2300 	mla	r3, r3, r0, r2
 80080de:	9308      	str	r3, [sp, #32]
 80080e0:	e7e5      	b.n	80080ae <_strtod_l+0x22e>
 80080e2:	4629      	mov	r1, r5
 80080e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80080e6:	1c50      	adds	r0, r2, #1
 80080e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80080ea:	7852      	ldrb	r2, [r2, #1]
 80080ec:	4618      	mov	r0, r3
 80080ee:	460d      	mov	r5, r1
 80080f0:	e7b1      	b.n	8008056 <_strtod_l+0x1d6>
 80080f2:	f04f 0900 	mov.w	r9, #0
 80080f6:	2301      	movs	r3, #1
 80080f8:	e77d      	b.n	8007ff6 <_strtod_l+0x176>
 80080fa:	f04f 0c00 	mov.w	ip, #0
 80080fe:	1ca2      	adds	r2, r4, #2
 8008100:	9219      	str	r2, [sp, #100]	@ 0x64
 8008102:	78a2      	ldrb	r2, [r4, #2]
 8008104:	e785      	b.n	8008012 <_strtod_l+0x192>
 8008106:	f04f 0c01 	mov.w	ip, #1
 800810a:	e7f8      	b.n	80080fe <_strtod_l+0x27e>
 800810c:	0800bde0 	.word	0x0800bde0
 8008110:	0800bdc8 	.word	0x0800bdc8
 8008114:	7ff00000 	.word	0x7ff00000
 8008118:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800811a:	1c51      	adds	r1, r2, #1
 800811c:	9119      	str	r1, [sp, #100]	@ 0x64
 800811e:	7852      	ldrb	r2, [r2, #1]
 8008120:	2a30      	cmp	r2, #48	@ 0x30
 8008122:	d0f9      	beq.n	8008118 <_strtod_l+0x298>
 8008124:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008128:	2908      	cmp	r1, #8
 800812a:	f63f af78 	bhi.w	800801e <_strtod_l+0x19e>
 800812e:	3a30      	subs	r2, #48	@ 0x30
 8008130:	920e      	str	r2, [sp, #56]	@ 0x38
 8008132:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008134:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008136:	f04f 080a 	mov.w	r8, #10
 800813a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800813c:	1c56      	adds	r6, r2, #1
 800813e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008140:	7852      	ldrb	r2, [r2, #1]
 8008142:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008146:	f1be 0f09 	cmp.w	lr, #9
 800814a:	d939      	bls.n	80081c0 <_strtod_l+0x340>
 800814c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800814e:	1a76      	subs	r6, r6, r1
 8008150:	2e08      	cmp	r6, #8
 8008152:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008156:	dc03      	bgt.n	8008160 <_strtod_l+0x2e0>
 8008158:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800815a:	4588      	cmp	r8, r1
 800815c:	bfa8      	it	ge
 800815e:	4688      	movge	r8, r1
 8008160:	f1bc 0f00 	cmp.w	ip, #0
 8008164:	d001      	beq.n	800816a <_strtod_l+0x2ea>
 8008166:	f1c8 0800 	rsb	r8, r8, #0
 800816a:	2d00      	cmp	r5, #0
 800816c:	d14e      	bne.n	800820c <_strtod_l+0x38c>
 800816e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008170:	4308      	orrs	r0, r1
 8008172:	f47f aebe 	bne.w	8007ef2 <_strtod_l+0x72>
 8008176:	2b00      	cmp	r3, #0
 8008178:	f47f aed6 	bne.w	8007f28 <_strtod_l+0xa8>
 800817c:	2a69      	cmp	r2, #105	@ 0x69
 800817e:	d028      	beq.n	80081d2 <_strtod_l+0x352>
 8008180:	dc25      	bgt.n	80081ce <_strtod_l+0x34e>
 8008182:	2a49      	cmp	r2, #73	@ 0x49
 8008184:	d025      	beq.n	80081d2 <_strtod_l+0x352>
 8008186:	2a4e      	cmp	r2, #78	@ 0x4e
 8008188:	f47f aece 	bne.w	8007f28 <_strtod_l+0xa8>
 800818c:	499b      	ldr	r1, [pc, #620]	@ (80083fc <_strtod_l+0x57c>)
 800818e:	a819      	add	r0, sp, #100	@ 0x64
 8008190:	f002 fbb2 	bl	800a8f8 <__match>
 8008194:	2800      	cmp	r0, #0
 8008196:	f43f aec7 	beq.w	8007f28 <_strtod_l+0xa8>
 800819a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	2b28      	cmp	r3, #40	@ 0x28
 80081a0:	d12e      	bne.n	8008200 <_strtod_l+0x380>
 80081a2:	4997      	ldr	r1, [pc, #604]	@ (8008400 <_strtod_l+0x580>)
 80081a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80081a6:	a819      	add	r0, sp, #100	@ 0x64
 80081a8:	f002 fbba 	bl	800a920 <__hexnan>
 80081ac:	2805      	cmp	r0, #5
 80081ae:	d127      	bne.n	8008200 <_strtod_l+0x380>
 80081b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80081b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80081ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80081be:	e698      	b.n	8007ef2 <_strtod_l+0x72>
 80081c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80081c2:	fb08 2101 	mla	r1, r8, r1, r2
 80081c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80081ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80081cc:	e7b5      	b.n	800813a <_strtod_l+0x2ba>
 80081ce:	2a6e      	cmp	r2, #110	@ 0x6e
 80081d0:	e7da      	b.n	8008188 <_strtod_l+0x308>
 80081d2:	498c      	ldr	r1, [pc, #560]	@ (8008404 <_strtod_l+0x584>)
 80081d4:	a819      	add	r0, sp, #100	@ 0x64
 80081d6:	f002 fb8f 	bl	800a8f8 <__match>
 80081da:	2800      	cmp	r0, #0
 80081dc:	f43f aea4 	beq.w	8007f28 <_strtod_l+0xa8>
 80081e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081e2:	4989      	ldr	r1, [pc, #548]	@ (8008408 <_strtod_l+0x588>)
 80081e4:	3b01      	subs	r3, #1
 80081e6:	a819      	add	r0, sp, #100	@ 0x64
 80081e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80081ea:	f002 fb85 	bl	800a8f8 <__match>
 80081ee:	b910      	cbnz	r0, 80081f6 <_strtod_l+0x376>
 80081f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081f2:	3301      	adds	r3, #1
 80081f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80081f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008418 <_strtod_l+0x598>
 80081fa:	f04f 0a00 	mov.w	sl, #0
 80081fe:	e678      	b.n	8007ef2 <_strtod_l+0x72>
 8008200:	4882      	ldr	r0, [pc, #520]	@ (800840c <_strtod_l+0x58c>)
 8008202:	f001 fa51 	bl	80096a8 <nan>
 8008206:	ec5b ab10 	vmov	sl, fp, d0
 800820a:	e672      	b.n	8007ef2 <_strtod_l+0x72>
 800820c:	eba8 0309 	sub.w	r3, r8, r9
 8008210:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008212:	9309      	str	r3, [sp, #36]	@ 0x24
 8008214:	2f00      	cmp	r7, #0
 8008216:	bf08      	it	eq
 8008218:	462f      	moveq	r7, r5
 800821a:	2d10      	cmp	r5, #16
 800821c:	462c      	mov	r4, r5
 800821e:	bfa8      	it	ge
 8008220:	2410      	movge	r4, #16
 8008222:	f7f8 f96f 	bl	8000504 <__aeabi_ui2d>
 8008226:	2d09      	cmp	r5, #9
 8008228:	4682      	mov	sl, r0
 800822a:	468b      	mov	fp, r1
 800822c:	dc13      	bgt.n	8008256 <_strtod_l+0x3d6>
 800822e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008230:	2b00      	cmp	r3, #0
 8008232:	f43f ae5e 	beq.w	8007ef2 <_strtod_l+0x72>
 8008236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008238:	dd78      	ble.n	800832c <_strtod_l+0x4ac>
 800823a:	2b16      	cmp	r3, #22
 800823c:	dc5f      	bgt.n	80082fe <_strtod_l+0x47e>
 800823e:	4974      	ldr	r1, [pc, #464]	@ (8008410 <_strtod_l+0x590>)
 8008240:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008248:	4652      	mov	r2, sl
 800824a:	465b      	mov	r3, fp
 800824c:	f7f8 f9d4 	bl	80005f8 <__aeabi_dmul>
 8008250:	4682      	mov	sl, r0
 8008252:	468b      	mov	fp, r1
 8008254:	e64d      	b.n	8007ef2 <_strtod_l+0x72>
 8008256:	4b6e      	ldr	r3, [pc, #440]	@ (8008410 <_strtod_l+0x590>)
 8008258:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800825c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008260:	f7f8 f9ca 	bl	80005f8 <__aeabi_dmul>
 8008264:	4682      	mov	sl, r0
 8008266:	9808      	ldr	r0, [sp, #32]
 8008268:	468b      	mov	fp, r1
 800826a:	f7f8 f94b 	bl	8000504 <__aeabi_ui2d>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4650      	mov	r0, sl
 8008274:	4659      	mov	r1, fp
 8008276:	f7f8 f809 	bl	800028c <__adddf3>
 800827a:	2d0f      	cmp	r5, #15
 800827c:	4682      	mov	sl, r0
 800827e:	468b      	mov	fp, r1
 8008280:	ddd5      	ble.n	800822e <_strtod_l+0x3ae>
 8008282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008284:	1b2c      	subs	r4, r5, r4
 8008286:	441c      	add	r4, r3
 8008288:	2c00      	cmp	r4, #0
 800828a:	f340 8096 	ble.w	80083ba <_strtod_l+0x53a>
 800828e:	f014 030f 	ands.w	r3, r4, #15
 8008292:	d00a      	beq.n	80082aa <_strtod_l+0x42a>
 8008294:	495e      	ldr	r1, [pc, #376]	@ (8008410 <_strtod_l+0x590>)
 8008296:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800829a:	4652      	mov	r2, sl
 800829c:	465b      	mov	r3, fp
 800829e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082a2:	f7f8 f9a9 	bl	80005f8 <__aeabi_dmul>
 80082a6:	4682      	mov	sl, r0
 80082a8:	468b      	mov	fp, r1
 80082aa:	f034 040f 	bics.w	r4, r4, #15
 80082ae:	d073      	beq.n	8008398 <_strtod_l+0x518>
 80082b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80082b4:	dd48      	ble.n	8008348 <_strtod_l+0x4c8>
 80082b6:	2400      	movs	r4, #0
 80082b8:	46a0      	mov	r8, r4
 80082ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80082bc:	46a1      	mov	r9, r4
 80082be:	9a05      	ldr	r2, [sp, #20]
 80082c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008418 <_strtod_l+0x598>
 80082c4:	2322      	movs	r3, #34	@ 0x22
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	f04f 0a00 	mov.w	sl, #0
 80082cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f43f ae0f 	beq.w	8007ef2 <_strtod_l+0x72>
 80082d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082d6:	9805      	ldr	r0, [sp, #20]
 80082d8:	f002 fcc6 	bl	800ac68 <_Bfree>
 80082dc:	9805      	ldr	r0, [sp, #20]
 80082de:	4649      	mov	r1, r9
 80082e0:	f002 fcc2 	bl	800ac68 <_Bfree>
 80082e4:	9805      	ldr	r0, [sp, #20]
 80082e6:	4641      	mov	r1, r8
 80082e8:	f002 fcbe 	bl	800ac68 <_Bfree>
 80082ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082ee:	9805      	ldr	r0, [sp, #20]
 80082f0:	f002 fcba 	bl	800ac68 <_Bfree>
 80082f4:	9805      	ldr	r0, [sp, #20]
 80082f6:	4621      	mov	r1, r4
 80082f8:	f002 fcb6 	bl	800ac68 <_Bfree>
 80082fc:	e5f9      	b.n	8007ef2 <_strtod_l+0x72>
 80082fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008300:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008304:	4293      	cmp	r3, r2
 8008306:	dbbc      	blt.n	8008282 <_strtod_l+0x402>
 8008308:	4c41      	ldr	r4, [pc, #260]	@ (8008410 <_strtod_l+0x590>)
 800830a:	f1c5 050f 	rsb	r5, r5, #15
 800830e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008312:	4652      	mov	r2, sl
 8008314:	465b      	mov	r3, fp
 8008316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800831a:	f7f8 f96d 	bl	80005f8 <__aeabi_dmul>
 800831e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008320:	1b5d      	subs	r5, r3, r5
 8008322:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008326:	e9d4 2300 	ldrd	r2, r3, [r4]
 800832a:	e78f      	b.n	800824c <_strtod_l+0x3cc>
 800832c:	3316      	adds	r3, #22
 800832e:	dba8      	blt.n	8008282 <_strtod_l+0x402>
 8008330:	4b37      	ldr	r3, [pc, #220]	@ (8008410 <_strtod_l+0x590>)
 8008332:	eba9 0808 	sub.w	r8, r9, r8
 8008336:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800833a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800833e:	4650      	mov	r0, sl
 8008340:	4659      	mov	r1, fp
 8008342:	f7f8 fa83 	bl	800084c <__aeabi_ddiv>
 8008346:	e783      	b.n	8008250 <_strtod_l+0x3d0>
 8008348:	4b32      	ldr	r3, [pc, #200]	@ (8008414 <_strtod_l+0x594>)
 800834a:	9308      	str	r3, [sp, #32]
 800834c:	2300      	movs	r3, #0
 800834e:	1124      	asrs	r4, r4, #4
 8008350:	4650      	mov	r0, sl
 8008352:	4659      	mov	r1, fp
 8008354:	461e      	mov	r6, r3
 8008356:	2c01      	cmp	r4, #1
 8008358:	dc21      	bgt.n	800839e <_strtod_l+0x51e>
 800835a:	b10b      	cbz	r3, 8008360 <_strtod_l+0x4e0>
 800835c:	4682      	mov	sl, r0
 800835e:	468b      	mov	fp, r1
 8008360:	492c      	ldr	r1, [pc, #176]	@ (8008414 <_strtod_l+0x594>)
 8008362:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008366:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800836a:	4652      	mov	r2, sl
 800836c:	465b      	mov	r3, fp
 800836e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008372:	f7f8 f941 	bl	80005f8 <__aeabi_dmul>
 8008376:	4b28      	ldr	r3, [pc, #160]	@ (8008418 <_strtod_l+0x598>)
 8008378:	460a      	mov	r2, r1
 800837a:	400b      	ands	r3, r1
 800837c:	4927      	ldr	r1, [pc, #156]	@ (800841c <_strtod_l+0x59c>)
 800837e:	428b      	cmp	r3, r1
 8008380:	4682      	mov	sl, r0
 8008382:	d898      	bhi.n	80082b6 <_strtod_l+0x436>
 8008384:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008388:	428b      	cmp	r3, r1
 800838a:	bf86      	itte	hi
 800838c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008420 <_strtod_l+0x5a0>
 8008390:	f04f 3aff 	movhi.w	sl, #4294967295
 8008394:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008398:	2300      	movs	r3, #0
 800839a:	9308      	str	r3, [sp, #32]
 800839c:	e07a      	b.n	8008494 <_strtod_l+0x614>
 800839e:	07e2      	lsls	r2, r4, #31
 80083a0:	d505      	bpl.n	80083ae <_strtod_l+0x52e>
 80083a2:	9b08      	ldr	r3, [sp, #32]
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f8 f926 	bl	80005f8 <__aeabi_dmul>
 80083ac:	2301      	movs	r3, #1
 80083ae:	9a08      	ldr	r2, [sp, #32]
 80083b0:	3208      	adds	r2, #8
 80083b2:	3601      	adds	r6, #1
 80083b4:	1064      	asrs	r4, r4, #1
 80083b6:	9208      	str	r2, [sp, #32]
 80083b8:	e7cd      	b.n	8008356 <_strtod_l+0x4d6>
 80083ba:	d0ed      	beq.n	8008398 <_strtod_l+0x518>
 80083bc:	4264      	negs	r4, r4
 80083be:	f014 020f 	ands.w	r2, r4, #15
 80083c2:	d00a      	beq.n	80083da <_strtod_l+0x55a>
 80083c4:	4b12      	ldr	r3, [pc, #72]	@ (8008410 <_strtod_l+0x590>)
 80083c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ca:	4650      	mov	r0, sl
 80083cc:	4659      	mov	r1, fp
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f7f8 fa3b 	bl	800084c <__aeabi_ddiv>
 80083d6:	4682      	mov	sl, r0
 80083d8:	468b      	mov	fp, r1
 80083da:	1124      	asrs	r4, r4, #4
 80083dc:	d0dc      	beq.n	8008398 <_strtod_l+0x518>
 80083de:	2c1f      	cmp	r4, #31
 80083e0:	dd20      	ble.n	8008424 <_strtod_l+0x5a4>
 80083e2:	2400      	movs	r4, #0
 80083e4:	46a0      	mov	r8, r4
 80083e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80083e8:	46a1      	mov	r9, r4
 80083ea:	9a05      	ldr	r2, [sp, #20]
 80083ec:	2322      	movs	r3, #34	@ 0x22
 80083ee:	f04f 0a00 	mov.w	sl, #0
 80083f2:	f04f 0b00 	mov.w	fp, #0
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	e768      	b.n	80082cc <_strtod_l+0x44c>
 80083fa:	bf00      	nop
 80083fc:	0800be2d 	.word	0x0800be2d
 8008400:	0800bdcc 	.word	0x0800bdcc
 8008404:	0800be25 	.word	0x0800be25
 8008408:	0800be5f 	.word	0x0800be5f
 800840c:	0800c1ed 	.word	0x0800c1ed
 8008410:	0800bfd8 	.word	0x0800bfd8
 8008414:	0800bfb0 	.word	0x0800bfb0
 8008418:	7ff00000 	.word	0x7ff00000
 800841c:	7ca00000 	.word	0x7ca00000
 8008420:	7fefffff 	.word	0x7fefffff
 8008424:	f014 0310 	ands.w	r3, r4, #16
 8008428:	bf18      	it	ne
 800842a:	236a      	movne	r3, #106	@ 0x6a
 800842c:	4ea9      	ldr	r6, [pc, #676]	@ (80086d4 <_strtod_l+0x854>)
 800842e:	9308      	str	r3, [sp, #32]
 8008430:	4650      	mov	r0, sl
 8008432:	4659      	mov	r1, fp
 8008434:	2300      	movs	r3, #0
 8008436:	07e2      	lsls	r2, r4, #31
 8008438:	d504      	bpl.n	8008444 <_strtod_l+0x5c4>
 800843a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800843e:	f7f8 f8db 	bl	80005f8 <__aeabi_dmul>
 8008442:	2301      	movs	r3, #1
 8008444:	1064      	asrs	r4, r4, #1
 8008446:	f106 0608 	add.w	r6, r6, #8
 800844a:	d1f4      	bne.n	8008436 <_strtod_l+0x5b6>
 800844c:	b10b      	cbz	r3, 8008452 <_strtod_l+0x5d2>
 800844e:	4682      	mov	sl, r0
 8008450:	468b      	mov	fp, r1
 8008452:	9b08      	ldr	r3, [sp, #32]
 8008454:	b1b3      	cbz	r3, 8008484 <_strtod_l+0x604>
 8008456:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800845a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800845e:	2b00      	cmp	r3, #0
 8008460:	4659      	mov	r1, fp
 8008462:	dd0f      	ble.n	8008484 <_strtod_l+0x604>
 8008464:	2b1f      	cmp	r3, #31
 8008466:	dd55      	ble.n	8008514 <_strtod_l+0x694>
 8008468:	2b34      	cmp	r3, #52	@ 0x34
 800846a:	bfde      	ittt	le
 800846c:	f04f 33ff 	movle.w	r3, #4294967295
 8008470:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008474:	4093      	lslle	r3, r2
 8008476:	f04f 0a00 	mov.w	sl, #0
 800847a:	bfcc      	ite	gt
 800847c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008480:	ea03 0b01 	andle.w	fp, r3, r1
 8008484:	2200      	movs	r2, #0
 8008486:	2300      	movs	r3, #0
 8008488:	4650      	mov	r0, sl
 800848a:	4659      	mov	r1, fp
 800848c:	f7f8 fb1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008490:	2800      	cmp	r0, #0
 8008492:	d1a6      	bne.n	80083e2 <_strtod_l+0x562>
 8008494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800849a:	9805      	ldr	r0, [sp, #20]
 800849c:	462b      	mov	r3, r5
 800849e:	463a      	mov	r2, r7
 80084a0:	f002 fc4a 	bl	800ad38 <__s2b>
 80084a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f af05 	beq.w	80082b6 <_strtod_l+0x436>
 80084ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	eba9 0308 	sub.w	r3, r9, r8
 80084b4:	bfa8      	it	ge
 80084b6:	2300      	movge	r3, #0
 80084b8:	9312      	str	r3, [sp, #72]	@ 0x48
 80084ba:	2400      	movs	r4, #0
 80084bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80084c0:	9316      	str	r3, [sp, #88]	@ 0x58
 80084c2:	46a0      	mov	r8, r4
 80084c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084c6:	9805      	ldr	r0, [sp, #20]
 80084c8:	6859      	ldr	r1, [r3, #4]
 80084ca:	f002 fb8d 	bl	800abe8 <_Balloc>
 80084ce:	4681      	mov	r9, r0
 80084d0:	2800      	cmp	r0, #0
 80084d2:	f43f aef4 	beq.w	80082be <_strtod_l+0x43e>
 80084d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084d8:	691a      	ldr	r2, [r3, #16]
 80084da:	3202      	adds	r2, #2
 80084dc:	f103 010c 	add.w	r1, r3, #12
 80084e0:	0092      	lsls	r2, r2, #2
 80084e2:	300c      	adds	r0, #12
 80084e4:	f001 f8cf 	bl	8009686 <memcpy>
 80084e8:	ec4b ab10 	vmov	d0, sl, fp
 80084ec:	9805      	ldr	r0, [sp, #20]
 80084ee:	aa1c      	add	r2, sp, #112	@ 0x70
 80084f0:	a91b      	add	r1, sp, #108	@ 0x6c
 80084f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80084f6:	f002 ff5b 	bl	800b3b0 <__d2b>
 80084fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80084fc:	2800      	cmp	r0, #0
 80084fe:	f43f aede 	beq.w	80082be <_strtod_l+0x43e>
 8008502:	9805      	ldr	r0, [sp, #20]
 8008504:	2101      	movs	r1, #1
 8008506:	f002 fcad 	bl	800ae64 <__i2b>
 800850a:	4680      	mov	r8, r0
 800850c:	b948      	cbnz	r0, 8008522 <_strtod_l+0x6a2>
 800850e:	f04f 0800 	mov.w	r8, #0
 8008512:	e6d4      	b.n	80082be <_strtod_l+0x43e>
 8008514:	f04f 32ff 	mov.w	r2, #4294967295
 8008518:	fa02 f303 	lsl.w	r3, r2, r3
 800851c:	ea03 0a0a 	and.w	sl, r3, sl
 8008520:	e7b0      	b.n	8008484 <_strtod_l+0x604>
 8008522:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008524:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008526:	2d00      	cmp	r5, #0
 8008528:	bfab      	itete	ge
 800852a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800852c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800852e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008530:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008532:	bfac      	ite	ge
 8008534:	18ef      	addge	r7, r5, r3
 8008536:	1b5e      	sublt	r6, r3, r5
 8008538:	9b08      	ldr	r3, [sp, #32]
 800853a:	1aed      	subs	r5, r5, r3
 800853c:	4415      	add	r5, r2
 800853e:	4b66      	ldr	r3, [pc, #408]	@ (80086d8 <_strtod_l+0x858>)
 8008540:	3d01      	subs	r5, #1
 8008542:	429d      	cmp	r5, r3
 8008544:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008548:	da50      	bge.n	80085ec <_strtod_l+0x76c>
 800854a:	1b5b      	subs	r3, r3, r5
 800854c:	2b1f      	cmp	r3, #31
 800854e:	eba2 0203 	sub.w	r2, r2, r3
 8008552:	f04f 0101 	mov.w	r1, #1
 8008556:	dc3d      	bgt.n	80085d4 <_strtod_l+0x754>
 8008558:	fa01 f303 	lsl.w	r3, r1, r3
 800855c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800855e:	2300      	movs	r3, #0
 8008560:	9310      	str	r3, [sp, #64]	@ 0x40
 8008562:	18bd      	adds	r5, r7, r2
 8008564:	9b08      	ldr	r3, [sp, #32]
 8008566:	42af      	cmp	r7, r5
 8008568:	4416      	add	r6, r2
 800856a:	441e      	add	r6, r3
 800856c:	463b      	mov	r3, r7
 800856e:	bfa8      	it	ge
 8008570:	462b      	movge	r3, r5
 8008572:	42b3      	cmp	r3, r6
 8008574:	bfa8      	it	ge
 8008576:	4633      	movge	r3, r6
 8008578:	2b00      	cmp	r3, #0
 800857a:	bfc2      	ittt	gt
 800857c:	1aed      	subgt	r5, r5, r3
 800857e:	1af6      	subgt	r6, r6, r3
 8008580:	1aff      	subgt	r7, r7, r3
 8008582:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008584:	2b00      	cmp	r3, #0
 8008586:	dd16      	ble.n	80085b6 <_strtod_l+0x736>
 8008588:	4641      	mov	r1, r8
 800858a:	9805      	ldr	r0, [sp, #20]
 800858c:	461a      	mov	r2, r3
 800858e:	f002 fd29 	bl	800afe4 <__pow5mult>
 8008592:	4680      	mov	r8, r0
 8008594:	2800      	cmp	r0, #0
 8008596:	d0ba      	beq.n	800850e <_strtod_l+0x68e>
 8008598:	4601      	mov	r1, r0
 800859a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800859c:	9805      	ldr	r0, [sp, #20]
 800859e:	f002 fc77 	bl	800ae90 <__multiply>
 80085a2:	900e      	str	r0, [sp, #56]	@ 0x38
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f43f ae8a 	beq.w	80082be <_strtod_l+0x43e>
 80085aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085ac:	9805      	ldr	r0, [sp, #20]
 80085ae:	f002 fb5b 	bl	800ac68 <_Bfree>
 80085b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80085b6:	2d00      	cmp	r5, #0
 80085b8:	dc1d      	bgt.n	80085f6 <_strtod_l+0x776>
 80085ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd23      	ble.n	8008608 <_strtod_l+0x788>
 80085c0:	4649      	mov	r1, r9
 80085c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80085c4:	9805      	ldr	r0, [sp, #20]
 80085c6:	f002 fd0d 	bl	800afe4 <__pow5mult>
 80085ca:	4681      	mov	r9, r0
 80085cc:	b9e0      	cbnz	r0, 8008608 <_strtod_l+0x788>
 80085ce:	f04f 0900 	mov.w	r9, #0
 80085d2:	e674      	b.n	80082be <_strtod_l+0x43e>
 80085d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80085d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80085dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80085e0:	35e2      	adds	r5, #226	@ 0xe2
 80085e2:	fa01 f305 	lsl.w	r3, r1, r5
 80085e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80085e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80085ea:	e7ba      	b.n	8008562 <_strtod_l+0x6e2>
 80085ec:	2300      	movs	r3, #0
 80085ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80085f0:	2301      	movs	r3, #1
 80085f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085f4:	e7b5      	b.n	8008562 <_strtod_l+0x6e2>
 80085f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80085f8:	9805      	ldr	r0, [sp, #20]
 80085fa:	462a      	mov	r2, r5
 80085fc:	f002 fd4c 	bl	800b098 <__lshift>
 8008600:	901a      	str	r0, [sp, #104]	@ 0x68
 8008602:	2800      	cmp	r0, #0
 8008604:	d1d9      	bne.n	80085ba <_strtod_l+0x73a>
 8008606:	e65a      	b.n	80082be <_strtod_l+0x43e>
 8008608:	2e00      	cmp	r6, #0
 800860a:	dd07      	ble.n	800861c <_strtod_l+0x79c>
 800860c:	4649      	mov	r1, r9
 800860e:	9805      	ldr	r0, [sp, #20]
 8008610:	4632      	mov	r2, r6
 8008612:	f002 fd41 	bl	800b098 <__lshift>
 8008616:	4681      	mov	r9, r0
 8008618:	2800      	cmp	r0, #0
 800861a:	d0d8      	beq.n	80085ce <_strtod_l+0x74e>
 800861c:	2f00      	cmp	r7, #0
 800861e:	dd08      	ble.n	8008632 <_strtod_l+0x7b2>
 8008620:	4641      	mov	r1, r8
 8008622:	9805      	ldr	r0, [sp, #20]
 8008624:	463a      	mov	r2, r7
 8008626:	f002 fd37 	bl	800b098 <__lshift>
 800862a:	4680      	mov	r8, r0
 800862c:	2800      	cmp	r0, #0
 800862e:	f43f ae46 	beq.w	80082be <_strtod_l+0x43e>
 8008632:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008634:	9805      	ldr	r0, [sp, #20]
 8008636:	464a      	mov	r2, r9
 8008638:	f002 fdb6 	bl	800b1a8 <__mdiff>
 800863c:	4604      	mov	r4, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	f43f ae3d 	beq.w	80082be <_strtod_l+0x43e>
 8008644:	68c3      	ldr	r3, [r0, #12]
 8008646:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008648:	2300      	movs	r3, #0
 800864a:	60c3      	str	r3, [r0, #12]
 800864c:	4641      	mov	r1, r8
 800864e:	f002 fd8f 	bl	800b170 <__mcmp>
 8008652:	2800      	cmp	r0, #0
 8008654:	da46      	bge.n	80086e4 <_strtod_l+0x864>
 8008656:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008658:	ea53 030a 	orrs.w	r3, r3, sl
 800865c:	d16c      	bne.n	8008738 <_strtod_l+0x8b8>
 800865e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008662:	2b00      	cmp	r3, #0
 8008664:	d168      	bne.n	8008738 <_strtod_l+0x8b8>
 8008666:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800866a:	0d1b      	lsrs	r3, r3, #20
 800866c:	051b      	lsls	r3, r3, #20
 800866e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008672:	d961      	bls.n	8008738 <_strtod_l+0x8b8>
 8008674:	6963      	ldr	r3, [r4, #20]
 8008676:	b913      	cbnz	r3, 800867e <_strtod_l+0x7fe>
 8008678:	6923      	ldr	r3, [r4, #16]
 800867a:	2b01      	cmp	r3, #1
 800867c:	dd5c      	ble.n	8008738 <_strtod_l+0x8b8>
 800867e:	4621      	mov	r1, r4
 8008680:	2201      	movs	r2, #1
 8008682:	9805      	ldr	r0, [sp, #20]
 8008684:	f002 fd08 	bl	800b098 <__lshift>
 8008688:	4641      	mov	r1, r8
 800868a:	4604      	mov	r4, r0
 800868c:	f002 fd70 	bl	800b170 <__mcmp>
 8008690:	2800      	cmp	r0, #0
 8008692:	dd51      	ble.n	8008738 <_strtod_l+0x8b8>
 8008694:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008698:	9a08      	ldr	r2, [sp, #32]
 800869a:	0d1b      	lsrs	r3, r3, #20
 800869c:	051b      	lsls	r3, r3, #20
 800869e:	2a00      	cmp	r2, #0
 80086a0:	d06b      	beq.n	800877a <_strtod_l+0x8fa>
 80086a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80086a6:	d868      	bhi.n	800877a <_strtod_l+0x8fa>
 80086a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80086ac:	f67f ae9d 	bls.w	80083ea <_strtod_l+0x56a>
 80086b0:	4b0a      	ldr	r3, [pc, #40]	@ (80086dc <_strtod_l+0x85c>)
 80086b2:	4650      	mov	r0, sl
 80086b4:	4659      	mov	r1, fp
 80086b6:	2200      	movs	r2, #0
 80086b8:	f7f7 ff9e 	bl	80005f8 <__aeabi_dmul>
 80086bc:	4b08      	ldr	r3, [pc, #32]	@ (80086e0 <_strtod_l+0x860>)
 80086be:	400b      	ands	r3, r1
 80086c0:	4682      	mov	sl, r0
 80086c2:	468b      	mov	fp, r1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f47f ae05 	bne.w	80082d4 <_strtod_l+0x454>
 80086ca:	9a05      	ldr	r2, [sp, #20]
 80086cc:	2322      	movs	r3, #34	@ 0x22
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	e600      	b.n	80082d4 <_strtod_l+0x454>
 80086d2:	bf00      	nop
 80086d4:	0800bdf8 	.word	0x0800bdf8
 80086d8:	fffffc02 	.word	0xfffffc02
 80086dc:	39500000 	.word	0x39500000
 80086e0:	7ff00000 	.word	0x7ff00000
 80086e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80086e8:	d165      	bne.n	80087b6 <_strtod_l+0x936>
 80086ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80086ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086f0:	b35a      	cbz	r2, 800874a <_strtod_l+0x8ca>
 80086f2:	4a9f      	ldr	r2, [pc, #636]	@ (8008970 <_strtod_l+0xaf0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d12b      	bne.n	8008750 <_strtod_l+0x8d0>
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	4651      	mov	r1, sl
 80086fc:	b303      	cbz	r3, 8008740 <_strtod_l+0x8c0>
 80086fe:	4b9d      	ldr	r3, [pc, #628]	@ (8008974 <_strtod_l+0xaf4>)
 8008700:	465a      	mov	r2, fp
 8008702:	4013      	ands	r3, r2
 8008704:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008708:	f04f 32ff 	mov.w	r2, #4294967295
 800870c:	d81b      	bhi.n	8008746 <_strtod_l+0x8c6>
 800870e:	0d1b      	lsrs	r3, r3, #20
 8008710:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008714:	fa02 f303 	lsl.w	r3, r2, r3
 8008718:	4299      	cmp	r1, r3
 800871a:	d119      	bne.n	8008750 <_strtod_l+0x8d0>
 800871c:	4b96      	ldr	r3, [pc, #600]	@ (8008978 <_strtod_l+0xaf8>)
 800871e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008720:	429a      	cmp	r2, r3
 8008722:	d102      	bne.n	800872a <_strtod_l+0x8aa>
 8008724:	3101      	adds	r1, #1
 8008726:	f43f adca 	beq.w	80082be <_strtod_l+0x43e>
 800872a:	4b92      	ldr	r3, [pc, #584]	@ (8008974 <_strtod_l+0xaf4>)
 800872c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800872e:	401a      	ands	r2, r3
 8008730:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008734:	f04f 0a00 	mov.w	sl, #0
 8008738:	9b08      	ldr	r3, [sp, #32]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1b8      	bne.n	80086b0 <_strtod_l+0x830>
 800873e:	e5c9      	b.n	80082d4 <_strtod_l+0x454>
 8008740:	f04f 33ff 	mov.w	r3, #4294967295
 8008744:	e7e8      	b.n	8008718 <_strtod_l+0x898>
 8008746:	4613      	mov	r3, r2
 8008748:	e7e6      	b.n	8008718 <_strtod_l+0x898>
 800874a:	ea53 030a 	orrs.w	r3, r3, sl
 800874e:	d0a1      	beq.n	8008694 <_strtod_l+0x814>
 8008750:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008752:	b1db      	cbz	r3, 800878c <_strtod_l+0x90c>
 8008754:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008756:	4213      	tst	r3, r2
 8008758:	d0ee      	beq.n	8008738 <_strtod_l+0x8b8>
 800875a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800875c:	9a08      	ldr	r2, [sp, #32]
 800875e:	4650      	mov	r0, sl
 8008760:	4659      	mov	r1, fp
 8008762:	b1bb      	cbz	r3, 8008794 <_strtod_l+0x914>
 8008764:	f7ff fb6c 	bl	8007e40 <sulp>
 8008768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800876c:	ec53 2b10 	vmov	r2, r3, d0
 8008770:	f7f7 fd8c 	bl	800028c <__adddf3>
 8008774:	4682      	mov	sl, r0
 8008776:	468b      	mov	fp, r1
 8008778:	e7de      	b.n	8008738 <_strtod_l+0x8b8>
 800877a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800877e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008782:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008786:	f04f 3aff 	mov.w	sl, #4294967295
 800878a:	e7d5      	b.n	8008738 <_strtod_l+0x8b8>
 800878c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800878e:	ea13 0f0a 	tst.w	r3, sl
 8008792:	e7e1      	b.n	8008758 <_strtod_l+0x8d8>
 8008794:	f7ff fb54 	bl	8007e40 <sulp>
 8008798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800879c:	ec53 2b10 	vmov	r2, r3, d0
 80087a0:	f7f7 fd72 	bl	8000288 <__aeabi_dsub>
 80087a4:	2200      	movs	r2, #0
 80087a6:	2300      	movs	r3, #0
 80087a8:	4682      	mov	sl, r0
 80087aa:	468b      	mov	fp, r1
 80087ac:	f7f8 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d0c1      	beq.n	8008738 <_strtod_l+0x8b8>
 80087b4:	e619      	b.n	80083ea <_strtod_l+0x56a>
 80087b6:	4641      	mov	r1, r8
 80087b8:	4620      	mov	r0, r4
 80087ba:	f002 fe51 	bl	800b460 <__ratio>
 80087be:	ec57 6b10 	vmov	r6, r7, d0
 80087c2:	2200      	movs	r2, #0
 80087c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	f7f8 f990 	bl	8000af0 <__aeabi_dcmple>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d06f      	beq.n	80088b4 <_strtod_l+0xa34>
 80087d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d17a      	bne.n	80088d0 <_strtod_l+0xa50>
 80087da:	f1ba 0f00 	cmp.w	sl, #0
 80087de:	d158      	bne.n	8008892 <_strtod_l+0xa12>
 80087e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d15a      	bne.n	80088a0 <_strtod_l+0xa20>
 80087ea:	4b64      	ldr	r3, [pc, #400]	@ (800897c <_strtod_l+0xafc>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f8 f973 	bl	8000adc <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d159      	bne.n	80088ae <_strtod_l+0xa2e>
 80087fa:	4630      	mov	r0, r6
 80087fc:	4639      	mov	r1, r7
 80087fe:	4b60      	ldr	r3, [pc, #384]	@ (8008980 <_strtod_l+0xb00>)
 8008800:	2200      	movs	r2, #0
 8008802:	f7f7 fef9 	bl	80005f8 <__aeabi_dmul>
 8008806:	4606      	mov	r6, r0
 8008808:	460f      	mov	r7, r1
 800880a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800880e:	9606      	str	r6, [sp, #24]
 8008810:	9307      	str	r3, [sp, #28]
 8008812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008816:	4d57      	ldr	r5, [pc, #348]	@ (8008974 <_strtod_l+0xaf4>)
 8008818:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800881c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800881e:	401d      	ands	r5, r3
 8008820:	4b58      	ldr	r3, [pc, #352]	@ (8008984 <_strtod_l+0xb04>)
 8008822:	429d      	cmp	r5, r3
 8008824:	f040 80b2 	bne.w	800898c <_strtod_l+0xb0c>
 8008828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800882a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800882e:	ec4b ab10 	vmov	d0, sl, fp
 8008832:	f002 fd4d 	bl	800b2d0 <__ulp>
 8008836:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800883a:	ec51 0b10 	vmov	r0, r1, d0
 800883e:	f7f7 fedb 	bl	80005f8 <__aeabi_dmul>
 8008842:	4652      	mov	r2, sl
 8008844:	465b      	mov	r3, fp
 8008846:	f7f7 fd21 	bl	800028c <__adddf3>
 800884a:	460b      	mov	r3, r1
 800884c:	4949      	ldr	r1, [pc, #292]	@ (8008974 <_strtod_l+0xaf4>)
 800884e:	4a4e      	ldr	r2, [pc, #312]	@ (8008988 <_strtod_l+0xb08>)
 8008850:	4019      	ands	r1, r3
 8008852:	4291      	cmp	r1, r2
 8008854:	4682      	mov	sl, r0
 8008856:	d942      	bls.n	80088de <_strtod_l+0xa5e>
 8008858:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800885a:	4b47      	ldr	r3, [pc, #284]	@ (8008978 <_strtod_l+0xaf8>)
 800885c:	429a      	cmp	r2, r3
 800885e:	d103      	bne.n	8008868 <_strtod_l+0x9e8>
 8008860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008862:	3301      	adds	r3, #1
 8008864:	f43f ad2b 	beq.w	80082be <_strtod_l+0x43e>
 8008868:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008978 <_strtod_l+0xaf8>
 800886c:	f04f 3aff 	mov.w	sl, #4294967295
 8008870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008872:	9805      	ldr	r0, [sp, #20]
 8008874:	f002 f9f8 	bl	800ac68 <_Bfree>
 8008878:	9805      	ldr	r0, [sp, #20]
 800887a:	4649      	mov	r1, r9
 800887c:	f002 f9f4 	bl	800ac68 <_Bfree>
 8008880:	9805      	ldr	r0, [sp, #20]
 8008882:	4641      	mov	r1, r8
 8008884:	f002 f9f0 	bl	800ac68 <_Bfree>
 8008888:	9805      	ldr	r0, [sp, #20]
 800888a:	4621      	mov	r1, r4
 800888c:	f002 f9ec 	bl	800ac68 <_Bfree>
 8008890:	e618      	b.n	80084c4 <_strtod_l+0x644>
 8008892:	f1ba 0f01 	cmp.w	sl, #1
 8008896:	d103      	bne.n	80088a0 <_strtod_l+0xa20>
 8008898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800889a:	2b00      	cmp	r3, #0
 800889c:	f43f ada5 	beq.w	80083ea <_strtod_l+0x56a>
 80088a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008950 <_strtod_l+0xad0>
 80088a4:	4f35      	ldr	r7, [pc, #212]	@ (800897c <_strtod_l+0xafc>)
 80088a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088aa:	2600      	movs	r6, #0
 80088ac:	e7b1      	b.n	8008812 <_strtod_l+0x992>
 80088ae:	4f34      	ldr	r7, [pc, #208]	@ (8008980 <_strtod_l+0xb00>)
 80088b0:	2600      	movs	r6, #0
 80088b2:	e7aa      	b.n	800880a <_strtod_l+0x98a>
 80088b4:	4b32      	ldr	r3, [pc, #200]	@ (8008980 <_strtod_l+0xb00>)
 80088b6:	4630      	mov	r0, r6
 80088b8:	4639      	mov	r1, r7
 80088ba:	2200      	movs	r2, #0
 80088bc:	f7f7 fe9c 	bl	80005f8 <__aeabi_dmul>
 80088c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088c2:	4606      	mov	r6, r0
 80088c4:	460f      	mov	r7, r1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d09f      	beq.n	800880a <_strtod_l+0x98a>
 80088ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80088ce:	e7a0      	b.n	8008812 <_strtod_l+0x992>
 80088d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008958 <_strtod_l+0xad8>
 80088d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80088d8:	ec57 6b17 	vmov	r6, r7, d7
 80088dc:	e799      	b.n	8008812 <_strtod_l+0x992>
 80088de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80088e2:	9b08      	ldr	r3, [sp, #32]
 80088e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1c1      	bne.n	8008870 <_strtod_l+0x9f0>
 80088ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088f0:	0d1b      	lsrs	r3, r3, #20
 80088f2:	051b      	lsls	r3, r3, #20
 80088f4:	429d      	cmp	r5, r3
 80088f6:	d1bb      	bne.n	8008870 <_strtod_l+0x9f0>
 80088f8:	4630      	mov	r0, r6
 80088fa:	4639      	mov	r1, r7
 80088fc:	f7f8 f98c 	bl	8000c18 <__aeabi_d2lz>
 8008900:	f7f7 fe4c 	bl	800059c <__aeabi_l2d>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4630      	mov	r0, r6
 800890a:	4639      	mov	r1, r7
 800890c:	f7f7 fcbc 	bl	8000288 <__aeabi_dsub>
 8008910:	460b      	mov	r3, r1
 8008912:	4602      	mov	r2, r0
 8008914:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008918:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800891c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800891e:	ea46 060a 	orr.w	r6, r6, sl
 8008922:	431e      	orrs	r6, r3
 8008924:	d06f      	beq.n	8008a06 <_strtod_l+0xb86>
 8008926:	a30e      	add	r3, pc, #56	@ (adr r3, 8008960 <_strtod_l+0xae0>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f8 f8d6 	bl	8000adc <__aeabi_dcmplt>
 8008930:	2800      	cmp	r0, #0
 8008932:	f47f accf 	bne.w	80082d4 <_strtod_l+0x454>
 8008936:	a30c      	add	r3, pc, #48	@ (adr r3, 8008968 <_strtod_l+0xae8>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008940:	f7f8 f8ea 	bl	8000b18 <__aeabi_dcmpgt>
 8008944:	2800      	cmp	r0, #0
 8008946:	d093      	beq.n	8008870 <_strtod_l+0x9f0>
 8008948:	e4c4      	b.n	80082d4 <_strtod_l+0x454>
 800894a:	bf00      	nop
 800894c:	f3af 8000 	nop.w
 8008950:	00000000 	.word	0x00000000
 8008954:	bff00000 	.word	0xbff00000
 8008958:	00000000 	.word	0x00000000
 800895c:	3ff00000 	.word	0x3ff00000
 8008960:	94a03595 	.word	0x94a03595
 8008964:	3fdfffff 	.word	0x3fdfffff
 8008968:	35afe535 	.word	0x35afe535
 800896c:	3fe00000 	.word	0x3fe00000
 8008970:	000fffff 	.word	0x000fffff
 8008974:	7ff00000 	.word	0x7ff00000
 8008978:	7fefffff 	.word	0x7fefffff
 800897c:	3ff00000 	.word	0x3ff00000
 8008980:	3fe00000 	.word	0x3fe00000
 8008984:	7fe00000 	.word	0x7fe00000
 8008988:	7c9fffff 	.word	0x7c9fffff
 800898c:	9b08      	ldr	r3, [sp, #32]
 800898e:	b323      	cbz	r3, 80089da <_strtod_l+0xb5a>
 8008990:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008994:	d821      	bhi.n	80089da <_strtod_l+0xb5a>
 8008996:	a328      	add	r3, pc, #160	@ (adr r3, 8008a38 <_strtod_l+0xbb8>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	4630      	mov	r0, r6
 800899e:	4639      	mov	r1, r7
 80089a0:	f7f8 f8a6 	bl	8000af0 <__aeabi_dcmple>
 80089a4:	b1a0      	cbz	r0, 80089d0 <_strtod_l+0xb50>
 80089a6:	4639      	mov	r1, r7
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7f8 f8fd 	bl	8000ba8 <__aeabi_d2uiz>
 80089ae:	2801      	cmp	r0, #1
 80089b0:	bf38      	it	cc
 80089b2:	2001      	movcc	r0, #1
 80089b4:	f7f7 fda6 	bl	8000504 <__aeabi_ui2d>
 80089b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ba:	4606      	mov	r6, r0
 80089bc:	460f      	mov	r7, r1
 80089be:	b9fb      	cbnz	r3, 8008a00 <_strtod_l+0xb80>
 80089c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80089c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80089c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80089cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80089d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80089d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80089d6:	1b5b      	subs	r3, r3, r5
 80089d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80089da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80089de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80089e2:	f002 fc75 	bl	800b2d0 <__ulp>
 80089e6:	4650      	mov	r0, sl
 80089e8:	ec53 2b10 	vmov	r2, r3, d0
 80089ec:	4659      	mov	r1, fp
 80089ee:	f7f7 fe03 	bl	80005f8 <__aeabi_dmul>
 80089f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80089f6:	f7f7 fc49 	bl	800028c <__adddf3>
 80089fa:	4682      	mov	sl, r0
 80089fc:	468b      	mov	fp, r1
 80089fe:	e770      	b.n	80088e2 <_strtod_l+0xa62>
 8008a00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008a04:	e7e0      	b.n	80089c8 <_strtod_l+0xb48>
 8008a06:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a40 <_strtod_l+0xbc0>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	f7f8 f866 	bl	8000adc <__aeabi_dcmplt>
 8008a10:	e798      	b.n	8008944 <_strtod_l+0xac4>
 8008a12:	2300      	movs	r3, #0
 8008a14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008a18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	f7ff ba6d 	b.w	8007efa <_strtod_l+0x7a>
 8008a20:	2a65      	cmp	r2, #101	@ 0x65
 8008a22:	f43f ab66 	beq.w	80080f2 <_strtod_l+0x272>
 8008a26:	2a45      	cmp	r2, #69	@ 0x45
 8008a28:	f43f ab63 	beq.w	80080f2 <_strtod_l+0x272>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f7ff bb9e 	b.w	800816e <_strtod_l+0x2ee>
 8008a32:	bf00      	nop
 8008a34:	f3af 8000 	nop.w
 8008a38:	ffc00000 	.word	0xffc00000
 8008a3c:	41dfffff 	.word	0x41dfffff
 8008a40:	94a03595 	.word	0x94a03595
 8008a44:	3fcfffff 	.word	0x3fcfffff

08008a48 <strtod>:
 8008a48:	460a      	mov	r2, r1
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4802      	ldr	r0, [pc, #8]	@ (8008a58 <strtod+0x10>)
 8008a4e:	4b03      	ldr	r3, [pc, #12]	@ (8008a5c <strtod+0x14>)
 8008a50:	6800      	ldr	r0, [r0, #0]
 8008a52:	f7ff ba15 	b.w	8007e80 <_strtod_l>
 8008a56:	bf00      	nop
 8008a58:	20000184 	.word	0x20000184
 8008a5c:	20000018 	.word	0x20000018

08008a60 <__cvt>:
 8008a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a64:	ec57 6b10 	vmov	r6, r7, d0
 8008a68:	2f00      	cmp	r7, #0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	463b      	mov	r3, r7
 8008a70:	bfbb      	ittet	lt
 8008a72:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008a76:	461f      	movlt	r7, r3
 8008a78:	2300      	movge	r3, #0
 8008a7a:	232d      	movlt	r3, #45	@ 0x2d
 8008a7c:	700b      	strb	r3, [r1, #0]
 8008a7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a80:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008a84:	4691      	mov	r9, r2
 8008a86:	f023 0820 	bic.w	r8, r3, #32
 8008a8a:	bfbc      	itt	lt
 8008a8c:	4632      	movlt	r2, r6
 8008a8e:	4616      	movlt	r6, r2
 8008a90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a94:	d005      	beq.n	8008aa2 <__cvt+0x42>
 8008a96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008a9a:	d100      	bne.n	8008a9e <__cvt+0x3e>
 8008a9c:	3401      	adds	r4, #1
 8008a9e:	2102      	movs	r1, #2
 8008aa0:	e000      	b.n	8008aa4 <__cvt+0x44>
 8008aa2:	2103      	movs	r1, #3
 8008aa4:	ab03      	add	r3, sp, #12
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	ab02      	add	r3, sp, #8
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	ec47 6b10 	vmov	d0, r6, r7
 8008ab0:	4653      	mov	r3, sl
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	f000 fe88 	bl	80097c8 <_dtoa_r>
 8008ab8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008abc:	4605      	mov	r5, r0
 8008abe:	d119      	bne.n	8008af4 <__cvt+0x94>
 8008ac0:	f019 0f01 	tst.w	r9, #1
 8008ac4:	d00e      	beq.n	8008ae4 <__cvt+0x84>
 8008ac6:	eb00 0904 	add.w	r9, r0, r4
 8008aca:	2200      	movs	r2, #0
 8008acc:	2300      	movs	r3, #0
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	f7f7 fff9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ad6:	b108      	cbz	r0, 8008adc <__cvt+0x7c>
 8008ad8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008adc:	2230      	movs	r2, #48	@ 0x30
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	454b      	cmp	r3, r9
 8008ae2:	d31e      	bcc.n	8008b22 <__cvt+0xc2>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ae8:	1b5b      	subs	r3, r3, r5
 8008aea:	4628      	mov	r0, r5
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	b004      	add	sp, #16
 8008af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008af8:	eb00 0904 	add.w	r9, r0, r4
 8008afc:	d1e5      	bne.n	8008aca <__cvt+0x6a>
 8008afe:	7803      	ldrb	r3, [r0, #0]
 8008b00:	2b30      	cmp	r3, #48	@ 0x30
 8008b02:	d10a      	bne.n	8008b1a <__cvt+0xba>
 8008b04:	2200      	movs	r2, #0
 8008b06:	2300      	movs	r3, #0
 8008b08:	4630      	mov	r0, r6
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	f7f7 ffdc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b10:	b918      	cbnz	r0, 8008b1a <__cvt+0xba>
 8008b12:	f1c4 0401 	rsb	r4, r4, #1
 8008b16:	f8ca 4000 	str.w	r4, [sl]
 8008b1a:	f8da 3000 	ldr.w	r3, [sl]
 8008b1e:	4499      	add	r9, r3
 8008b20:	e7d3      	b.n	8008aca <__cvt+0x6a>
 8008b22:	1c59      	adds	r1, r3, #1
 8008b24:	9103      	str	r1, [sp, #12]
 8008b26:	701a      	strb	r2, [r3, #0]
 8008b28:	e7d9      	b.n	8008ade <__cvt+0x7e>

08008b2a <__exponent>:
 8008b2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b2c:	2900      	cmp	r1, #0
 8008b2e:	bfba      	itte	lt
 8008b30:	4249      	neglt	r1, r1
 8008b32:	232d      	movlt	r3, #45	@ 0x2d
 8008b34:	232b      	movge	r3, #43	@ 0x2b
 8008b36:	2909      	cmp	r1, #9
 8008b38:	7002      	strb	r2, [r0, #0]
 8008b3a:	7043      	strb	r3, [r0, #1]
 8008b3c:	dd29      	ble.n	8008b92 <__exponent+0x68>
 8008b3e:	f10d 0307 	add.w	r3, sp, #7
 8008b42:	461d      	mov	r5, r3
 8008b44:	270a      	movs	r7, #10
 8008b46:	461a      	mov	r2, r3
 8008b48:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b4c:	fb07 1416 	mls	r4, r7, r6, r1
 8008b50:	3430      	adds	r4, #48	@ 0x30
 8008b52:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b56:	460c      	mov	r4, r1
 8008b58:	2c63      	cmp	r4, #99	@ 0x63
 8008b5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b5e:	4631      	mov	r1, r6
 8008b60:	dcf1      	bgt.n	8008b46 <__exponent+0x1c>
 8008b62:	3130      	adds	r1, #48	@ 0x30
 8008b64:	1e94      	subs	r4, r2, #2
 8008b66:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b6a:	1c41      	adds	r1, r0, #1
 8008b6c:	4623      	mov	r3, r4
 8008b6e:	42ab      	cmp	r3, r5
 8008b70:	d30a      	bcc.n	8008b88 <__exponent+0x5e>
 8008b72:	f10d 0309 	add.w	r3, sp, #9
 8008b76:	1a9b      	subs	r3, r3, r2
 8008b78:	42ac      	cmp	r4, r5
 8008b7a:	bf88      	it	hi
 8008b7c:	2300      	movhi	r3, #0
 8008b7e:	3302      	adds	r3, #2
 8008b80:	4403      	add	r3, r0
 8008b82:	1a18      	subs	r0, r3, r0
 8008b84:	b003      	add	sp, #12
 8008b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b88:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008b8c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008b90:	e7ed      	b.n	8008b6e <__exponent+0x44>
 8008b92:	2330      	movs	r3, #48	@ 0x30
 8008b94:	3130      	adds	r1, #48	@ 0x30
 8008b96:	7083      	strb	r3, [r0, #2]
 8008b98:	70c1      	strb	r1, [r0, #3]
 8008b9a:	1d03      	adds	r3, r0, #4
 8008b9c:	e7f1      	b.n	8008b82 <__exponent+0x58>
	...

08008ba0 <_printf_float>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	b08d      	sub	sp, #52	@ 0x34
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008bac:	4616      	mov	r6, r2
 8008bae:	461f      	mov	r7, r3
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	f000 fcf1 	bl	8009598 <_localeconv_r>
 8008bb6:	6803      	ldr	r3, [r0, #0]
 8008bb8:	9304      	str	r3, [sp, #16]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7f7 fb58 	bl	8000270 <strlen>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008bc8:	9005      	str	r0, [sp, #20]
 8008bca:	3307      	adds	r3, #7
 8008bcc:	f023 0307 	bic.w	r3, r3, #7
 8008bd0:	f103 0208 	add.w	r2, r3, #8
 8008bd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008bd8:	f8d4 b000 	ldr.w	fp, [r4]
 8008bdc:	f8c8 2000 	str.w	r2, [r8]
 8008be0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008be4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008be8:	9307      	str	r3, [sp, #28]
 8008bea:	f8cd 8018 	str.w	r8, [sp, #24]
 8008bee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008bf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bf6:	4b9c      	ldr	r3, [pc, #624]	@ (8008e68 <_printf_float+0x2c8>)
 8008bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfc:	f7f7 ff96 	bl	8000b2c <__aeabi_dcmpun>
 8008c00:	bb70      	cbnz	r0, 8008c60 <_printf_float+0xc0>
 8008c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c06:	4b98      	ldr	r3, [pc, #608]	@ (8008e68 <_printf_float+0x2c8>)
 8008c08:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0c:	f7f7 ff70 	bl	8000af0 <__aeabi_dcmple>
 8008c10:	bb30      	cbnz	r0, 8008c60 <_printf_float+0xc0>
 8008c12:	2200      	movs	r2, #0
 8008c14:	2300      	movs	r3, #0
 8008c16:	4640      	mov	r0, r8
 8008c18:	4649      	mov	r1, r9
 8008c1a:	f7f7 ff5f 	bl	8000adc <__aeabi_dcmplt>
 8008c1e:	b110      	cbz	r0, 8008c26 <_printf_float+0x86>
 8008c20:	232d      	movs	r3, #45	@ 0x2d
 8008c22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c26:	4a91      	ldr	r2, [pc, #580]	@ (8008e6c <_printf_float+0x2cc>)
 8008c28:	4b91      	ldr	r3, [pc, #580]	@ (8008e70 <_printf_float+0x2d0>)
 8008c2a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c2e:	bf94      	ite	ls
 8008c30:	4690      	movls	r8, r2
 8008c32:	4698      	movhi	r8, r3
 8008c34:	2303      	movs	r3, #3
 8008c36:	6123      	str	r3, [r4, #16]
 8008c38:	f02b 0304 	bic.w	r3, fp, #4
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	f04f 0900 	mov.w	r9, #0
 8008c42:	9700      	str	r7, [sp, #0]
 8008c44:	4633      	mov	r3, r6
 8008c46:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f000 f9d2 	bl	8008ff4 <_printf_common>
 8008c50:	3001      	adds	r0, #1
 8008c52:	f040 808d 	bne.w	8008d70 <_printf_float+0x1d0>
 8008c56:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5a:	b00d      	add	sp, #52	@ 0x34
 8008c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c60:	4642      	mov	r2, r8
 8008c62:	464b      	mov	r3, r9
 8008c64:	4640      	mov	r0, r8
 8008c66:	4649      	mov	r1, r9
 8008c68:	f7f7 ff60 	bl	8000b2c <__aeabi_dcmpun>
 8008c6c:	b140      	cbz	r0, 8008c80 <_printf_float+0xe0>
 8008c6e:	464b      	mov	r3, r9
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	bfbc      	itt	lt
 8008c74:	232d      	movlt	r3, #45	@ 0x2d
 8008c76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8008e74 <_printf_float+0x2d4>)
 8008c7c:	4b7e      	ldr	r3, [pc, #504]	@ (8008e78 <_printf_float+0x2d8>)
 8008c7e:	e7d4      	b.n	8008c2a <_printf_float+0x8a>
 8008c80:	6863      	ldr	r3, [r4, #4]
 8008c82:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008c86:	9206      	str	r2, [sp, #24]
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	d13b      	bne.n	8008d04 <_printf_float+0x164>
 8008c8c:	2306      	movs	r3, #6
 8008c8e:	6063      	str	r3, [r4, #4]
 8008c90:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008c94:	2300      	movs	r3, #0
 8008c96:	6022      	str	r2, [r4, #0]
 8008c98:	9303      	str	r3, [sp, #12]
 8008c9a:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c9c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008ca0:	ab09      	add	r3, sp, #36	@ 0x24
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	6861      	ldr	r1, [r4, #4]
 8008ca6:	ec49 8b10 	vmov	d0, r8, r9
 8008caa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f7ff fed6 	bl	8008a60 <__cvt>
 8008cb4:	9b06      	ldr	r3, [sp, #24]
 8008cb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cb8:	2b47      	cmp	r3, #71	@ 0x47
 8008cba:	4680      	mov	r8, r0
 8008cbc:	d129      	bne.n	8008d12 <_printf_float+0x172>
 8008cbe:	1cc8      	adds	r0, r1, #3
 8008cc0:	db02      	blt.n	8008cc8 <_printf_float+0x128>
 8008cc2:	6863      	ldr	r3, [r4, #4]
 8008cc4:	4299      	cmp	r1, r3
 8008cc6:	dd41      	ble.n	8008d4c <_printf_float+0x1ac>
 8008cc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ccc:	fa5f fa8a 	uxtb.w	sl, sl
 8008cd0:	3901      	subs	r1, #1
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008cd8:	9109      	str	r1, [sp, #36]	@ 0x24
 8008cda:	f7ff ff26 	bl	8008b2a <__exponent>
 8008cde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ce0:	1813      	adds	r3, r2, r0
 8008ce2:	2a01      	cmp	r2, #1
 8008ce4:	4681      	mov	r9, r0
 8008ce6:	6123      	str	r3, [r4, #16]
 8008ce8:	dc02      	bgt.n	8008cf0 <_printf_float+0x150>
 8008cea:	6822      	ldr	r2, [r4, #0]
 8008cec:	07d2      	lsls	r2, r2, #31
 8008cee:	d501      	bpl.n	8008cf4 <_printf_float+0x154>
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	6123      	str	r3, [r4, #16]
 8008cf4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0a2      	beq.n	8008c42 <_printf_float+0xa2>
 8008cfc:	232d      	movs	r3, #45	@ 0x2d
 8008cfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d02:	e79e      	b.n	8008c42 <_printf_float+0xa2>
 8008d04:	9a06      	ldr	r2, [sp, #24]
 8008d06:	2a47      	cmp	r2, #71	@ 0x47
 8008d08:	d1c2      	bne.n	8008c90 <_printf_float+0xf0>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1c0      	bne.n	8008c90 <_printf_float+0xf0>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e7bd      	b.n	8008c8e <_printf_float+0xee>
 8008d12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d16:	d9db      	bls.n	8008cd0 <_printf_float+0x130>
 8008d18:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d1c:	d118      	bne.n	8008d50 <_printf_float+0x1b0>
 8008d1e:	2900      	cmp	r1, #0
 8008d20:	6863      	ldr	r3, [r4, #4]
 8008d22:	dd0b      	ble.n	8008d3c <_printf_float+0x19c>
 8008d24:	6121      	str	r1, [r4, #16]
 8008d26:	b913      	cbnz	r3, 8008d2e <_printf_float+0x18e>
 8008d28:	6822      	ldr	r2, [r4, #0]
 8008d2a:	07d0      	lsls	r0, r2, #31
 8008d2c:	d502      	bpl.n	8008d34 <_printf_float+0x194>
 8008d2e:	3301      	adds	r3, #1
 8008d30:	440b      	add	r3, r1
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d36:	f04f 0900 	mov.w	r9, #0
 8008d3a:	e7db      	b.n	8008cf4 <_printf_float+0x154>
 8008d3c:	b913      	cbnz	r3, 8008d44 <_printf_float+0x1a4>
 8008d3e:	6822      	ldr	r2, [r4, #0]
 8008d40:	07d2      	lsls	r2, r2, #31
 8008d42:	d501      	bpl.n	8008d48 <_printf_float+0x1a8>
 8008d44:	3302      	adds	r3, #2
 8008d46:	e7f4      	b.n	8008d32 <_printf_float+0x192>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7f2      	b.n	8008d32 <_printf_float+0x192>
 8008d4c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d52:	4299      	cmp	r1, r3
 8008d54:	db05      	blt.n	8008d62 <_printf_float+0x1c2>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	6121      	str	r1, [r4, #16]
 8008d5a:	07d8      	lsls	r0, r3, #31
 8008d5c:	d5ea      	bpl.n	8008d34 <_printf_float+0x194>
 8008d5e:	1c4b      	adds	r3, r1, #1
 8008d60:	e7e7      	b.n	8008d32 <_printf_float+0x192>
 8008d62:	2900      	cmp	r1, #0
 8008d64:	bfd4      	ite	le
 8008d66:	f1c1 0202 	rsble	r2, r1, #2
 8008d6a:	2201      	movgt	r2, #1
 8008d6c:	4413      	add	r3, r2
 8008d6e:	e7e0      	b.n	8008d32 <_printf_float+0x192>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	055a      	lsls	r2, r3, #21
 8008d74:	d407      	bmi.n	8008d86 <_printf_float+0x1e6>
 8008d76:	6923      	ldr	r3, [r4, #16]
 8008d78:	4642      	mov	r2, r8
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	47b8      	blx	r7
 8008d80:	3001      	adds	r0, #1
 8008d82:	d12b      	bne.n	8008ddc <_printf_float+0x23c>
 8008d84:	e767      	b.n	8008c56 <_printf_float+0xb6>
 8008d86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d8a:	f240 80dd 	bls.w	8008f48 <_printf_float+0x3a8>
 8008d8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d92:	2200      	movs	r2, #0
 8008d94:	2300      	movs	r3, #0
 8008d96:	f7f7 fe97 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d033      	beq.n	8008e06 <_printf_float+0x266>
 8008d9e:	4a37      	ldr	r2, [pc, #220]	@ (8008e7c <_printf_float+0x2dc>)
 8008da0:	2301      	movs	r3, #1
 8008da2:	4631      	mov	r1, r6
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b8      	blx	r7
 8008da8:	3001      	adds	r0, #1
 8008daa:	f43f af54 	beq.w	8008c56 <_printf_float+0xb6>
 8008dae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008db2:	4543      	cmp	r3, r8
 8008db4:	db02      	blt.n	8008dbc <_printf_float+0x21c>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	07d8      	lsls	r0, r3, #31
 8008dba:	d50f      	bpl.n	8008ddc <_printf_float+0x23c>
 8008dbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	47b8      	blx	r7
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	f43f af45 	beq.w	8008c56 <_printf_float+0xb6>
 8008dcc:	f04f 0900 	mov.w	r9, #0
 8008dd0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008dd4:	f104 0a1a 	add.w	sl, r4, #26
 8008dd8:	45c8      	cmp	r8, r9
 8008dda:	dc09      	bgt.n	8008df0 <_printf_float+0x250>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	079b      	lsls	r3, r3, #30
 8008de0:	f100 8103 	bmi.w	8008fea <_printf_float+0x44a>
 8008de4:	68e0      	ldr	r0, [r4, #12]
 8008de6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008de8:	4298      	cmp	r0, r3
 8008dea:	bfb8      	it	lt
 8008dec:	4618      	movlt	r0, r3
 8008dee:	e734      	b.n	8008c5a <_printf_float+0xba>
 8008df0:	2301      	movs	r3, #1
 8008df2:	4652      	mov	r2, sl
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f43f af2b 	beq.w	8008c56 <_printf_float+0xb6>
 8008e00:	f109 0901 	add.w	r9, r9, #1
 8008e04:	e7e8      	b.n	8008dd8 <_printf_float+0x238>
 8008e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	dc39      	bgt.n	8008e80 <_printf_float+0x2e0>
 8008e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8008e7c <_printf_float+0x2dc>)
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4631      	mov	r1, r6
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b8      	blx	r7
 8008e16:	3001      	adds	r0, #1
 8008e18:	f43f af1d 	beq.w	8008c56 <_printf_float+0xb6>
 8008e1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e20:	ea59 0303 	orrs.w	r3, r9, r3
 8008e24:	d102      	bne.n	8008e2c <_printf_float+0x28c>
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	07d9      	lsls	r1, r3, #31
 8008e2a:	d5d7      	bpl.n	8008ddc <_printf_float+0x23c>
 8008e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e30:	4631      	mov	r1, r6
 8008e32:	4628      	mov	r0, r5
 8008e34:	47b8      	blx	r7
 8008e36:	3001      	adds	r0, #1
 8008e38:	f43f af0d 	beq.w	8008c56 <_printf_float+0xb6>
 8008e3c:	f04f 0a00 	mov.w	sl, #0
 8008e40:	f104 0b1a 	add.w	fp, r4, #26
 8008e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e46:	425b      	negs	r3, r3
 8008e48:	4553      	cmp	r3, sl
 8008e4a:	dc01      	bgt.n	8008e50 <_printf_float+0x2b0>
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	e793      	b.n	8008d78 <_printf_float+0x1d8>
 8008e50:	2301      	movs	r3, #1
 8008e52:	465a      	mov	r2, fp
 8008e54:	4631      	mov	r1, r6
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	f43f aefb 	beq.w	8008c56 <_printf_float+0xb6>
 8008e60:	f10a 0a01 	add.w	sl, sl, #1
 8008e64:	e7ee      	b.n	8008e44 <_printf_float+0x2a4>
 8008e66:	bf00      	nop
 8008e68:	7fefffff 	.word	0x7fefffff
 8008e6c:	0800be20 	.word	0x0800be20
 8008e70:	0800be24 	.word	0x0800be24
 8008e74:	0800be28 	.word	0x0800be28
 8008e78:	0800be2c 	.word	0x0800be2c
 8008e7c:	0800be30 	.word	0x0800be30
 8008e80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e82:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e86:	4553      	cmp	r3, sl
 8008e88:	bfa8      	it	ge
 8008e8a:	4653      	movge	r3, sl
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	4699      	mov	r9, r3
 8008e90:	dc36      	bgt.n	8008f00 <_printf_float+0x360>
 8008e92:	f04f 0b00 	mov.w	fp, #0
 8008e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e9a:	f104 021a 	add.w	r2, r4, #26
 8008e9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ea0:	9306      	str	r3, [sp, #24]
 8008ea2:	eba3 0309 	sub.w	r3, r3, r9
 8008ea6:	455b      	cmp	r3, fp
 8008ea8:	dc31      	bgt.n	8008f0e <_printf_float+0x36e>
 8008eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eac:	459a      	cmp	sl, r3
 8008eae:	dc3a      	bgt.n	8008f26 <_printf_float+0x386>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07da      	lsls	r2, r3, #31
 8008eb4:	d437      	bmi.n	8008f26 <_printf_float+0x386>
 8008eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb8:	ebaa 0903 	sub.w	r9, sl, r3
 8008ebc:	9b06      	ldr	r3, [sp, #24]
 8008ebe:	ebaa 0303 	sub.w	r3, sl, r3
 8008ec2:	4599      	cmp	r9, r3
 8008ec4:	bfa8      	it	ge
 8008ec6:	4699      	movge	r9, r3
 8008ec8:	f1b9 0f00 	cmp.w	r9, #0
 8008ecc:	dc33      	bgt.n	8008f36 <_printf_float+0x396>
 8008ece:	f04f 0800 	mov.w	r8, #0
 8008ed2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ed6:	f104 0b1a 	add.w	fp, r4, #26
 8008eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008edc:	ebaa 0303 	sub.w	r3, sl, r3
 8008ee0:	eba3 0309 	sub.w	r3, r3, r9
 8008ee4:	4543      	cmp	r3, r8
 8008ee6:	f77f af79 	ble.w	8008ddc <_printf_float+0x23c>
 8008eea:	2301      	movs	r3, #1
 8008eec:	465a      	mov	r2, fp
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f43f aeae 	beq.w	8008c56 <_printf_float+0xb6>
 8008efa:	f108 0801 	add.w	r8, r8, #1
 8008efe:	e7ec      	b.n	8008eda <_printf_float+0x33a>
 8008f00:	4642      	mov	r2, r8
 8008f02:	4631      	mov	r1, r6
 8008f04:	4628      	mov	r0, r5
 8008f06:	47b8      	blx	r7
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d1c2      	bne.n	8008e92 <_printf_float+0x2f2>
 8008f0c:	e6a3      	b.n	8008c56 <_printf_float+0xb6>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4631      	mov	r1, r6
 8008f12:	4628      	mov	r0, r5
 8008f14:	9206      	str	r2, [sp, #24]
 8008f16:	47b8      	blx	r7
 8008f18:	3001      	adds	r0, #1
 8008f1a:	f43f ae9c 	beq.w	8008c56 <_printf_float+0xb6>
 8008f1e:	9a06      	ldr	r2, [sp, #24]
 8008f20:	f10b 0b01 	add.w	fp, fp, #1
 8008f24:	e7bb      	b.n	8008e9e <_printf_float+0x2fe>
 8008f26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b8      	blx	r7
 8008f30:	3001      	adds	r0, #1
 8008f32:	d1c0      	bne.n	8008eb6 <_printf_float+0x316>
 8008f34:	e68f      	b.n	8008c56 <_printf_float+0xb6>
 8008f36:	9a06      	ldr	r2, [sp, #24]
 8008f38:	464b      	mov	r3, r9
 8008f3a:	4442      	add	r2, r8
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	4628      	mov	r0, r5
 8008f40:	47b8      	blx	r7
 8008f42:	3001      	adds	r0, #1
 8008f44:	d1c3      	bne.n	8008ece <_printf_float+0x32e>
 8008f46:	e686      	b.n	8008c56 <_printf_float+0xb6>
 8008f48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f4c:	f1ba 0f01 	cmp.w	sl, #1
 8008f50:	dc01      	bgt.n	8008f56 <_printf_float+0x3b6>
 8008f52:	07db      	lsls	r3, r3, #31
 8008f54:	d536      	bpl.n	8008fc4 <_printf_float+0x424>
 8008f56:	2301      	movs	r3, #1
 8008f58:	4642      	mov	r2, r8
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	f43f ae78 	beq.w	8008c56 <_printf_float+0xb6>
 8008f66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	f43f ae70 	beq.w	8008c56 <_printf_float+0xb6>
 8008f76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f82:	f7f7 fda1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f86:	b9c0      	cbnz	r0, 8008fba <_printf_float+0x41a>
 8008f88:	4653      	mov	r3, sl
 8008f8a:	f108 0201 	add.w	r2, r8, #1
 8008f8e:	4631      	mov	r1, r6
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b8      	blx	r7
 8008f94:	3001      	adds	r0, #1
 8008f96:	d10c      	bne.n	8008fb2 <_printf_float+0x412>
 8008f98:	e65d      	b.n	8008c56 <_printf_float+0xb6>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	465a      	mov	r2, fp
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b8      	blx	r7
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f43f ae56 	beq.w	8008c56 <_printf_float+0xb6>
 8008faa:	f108 0801 	add.w	r8, r8, #1
 8008fae:	45d0      	cmp	r8, sl
 8008fb0:	dbf3      	blt.n	8008f9a <_printf_float+0x3fa>
 8008fb2:	464b      	mov	r3, r9
 8008fb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008fb8:	e6df      	b.n	8008d7a <_printf_float+0x1da>
 8008fba:	f04f 0800 	mov.w	r8, #0
 8008fbe:	f104 0b1a 	add.w	fp, r4, #26
 8008fc2:	e7f4      	b.n	8008fae <_printf_float+0x40e>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4642      	mov	r2, r8
 8008fc8:	e7e1      	b.n	8008f8e <_printf_float+0x3ee>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	464a      	mov	r2, r9
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	f43f ae3e 	beq.w	8008c56 <_printf_float+0xb6>
 8008fda:	f108 0801 	add.w	r8, r8, #1
 8008fde:	68e3      	ldr	r3, [r4, #12]
 8008fe0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008fe2:	1a5b      	subs	r3, r3, r1
 8008fe4:	4543      	cmp	r3, r8
 8008fe6:	dcf0      	bgt.n	8008fca <_printf_float+0x42a>
 8008fe8:	e6fc      	b.n	8008de4 <_printf_float+0x244>
 8008fea:	f04f 0800 	mov.w	r8, #0
 8008fee:	f104 0919 	add.w	r9, r4, #25
 8008ff2:	e7f4      	b.n	8008fde <_printf_float+0x43e>

08008ff4 <_printf_common>:
 8008ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff8:	4616      	mov	r6, r2
 8008ffa:	4698      	mov	r8, r3
 8008ffc:	688a      	ldr	r2, [r1, #8]
 8008ffe:	690b      	ldr	r3, [r1, #16]
 8009000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009004:	4293      	cmp	r3, r2
 8009006:	bfb8      	it	lt
 8009008:	4613      	movlt	r3, r2
 800900a:	6033      	str	r3, [r6, #0]
 800900c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009010:	4607      	mov	r7, r0
 8009012:	460c      	mov	r4, r1
 8009014:	b10a      	cbz	r2, 800901a <_printf_common+0x26>
 8009016:	3301      	adds	r3, #1
 8009018:	6033      	str	r3, [r6, #0]
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	0699      	lsls	r1, r3, #26
 800901e:	bf42      	ittt	mi
 8009020:	6833      	ldrmi	r3, [r6, #0]
 8009022:	3302      	addmi	r3, #2
 8009024:	6033      	strmi	r3, [r6, #0]
 8009026:	6825      	ldr	r5, [r4, #0]
 8009028:	f015 0506 	ands.w	r5, r5, #6
 800902c:	d106      	bne.n	800903c <_printf_common+0x48>
 800902e:	f104 0a19 	add.w	sl, r4, #25
 8009032:	68e3      	ldr	r3, [r4, #12]
 8009034:	6832      	ldr	r2, [r6, #0]
 8009036:	1a9b      	subs	r3, r3, r2
 8009038:	42ab      	cmp	r3, r5
 800903a:	dc26      	bgt.n	800908a <_printf_common+0x96>
 800903c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009040:	6822      	ldr	r2, [r4, #0]
 8009042:	3b00      	subs	r3, #0
 8009044:	bf18      	it	ne
 8009046:	2301      	movne	r3, #1
 8009048:	0692      	lsls	r2, r2, #26
 800904a:	d42b      	bmi.n	80090a4 <_printf_common+0xb0>
 800904c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009050:	4641      	mov	r1, r8
 8009052:	4638      	mov	r0, r7
 8009054:	47c8      	blx	r9
 8009056:	3001      	adds	r0, #1
 8009058:	d01e      	beq.n	8009098 <_printf_common+0xa4>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	6922      	ldr	r2, [r4, #16]
 800905e:	f003 0306 	and.w	r3, r3, #6
 8009062:	2b04      	cmp	r3, #4
 8009064:	bf02      	ittt	eq
 8009066:	68e5      	ldreq	r5, [r4, #12]
 8009068:	6833      	ldreq	r3, [r6, #0]
 800906a:	1aed      	subeq	r5, r5, r3
 800906c:	68a3      	ldr	r3, [r4, #8]
 800906e:	bf0c      	ite	eq
 8009070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009074:	2500      	movne	r5, #0
 8009076:	4293      	cmp	r3, r2
 8009078:	bfc4      	itt	gt
 800907a:	1a9b      	subgt	r3, r3, r2
 800907c:	18ed      	addgt	r5, r5, r3
 800907e:	2600      	movs	r6, #0
 8009080:	341a      	adds	r4, #26
 8009082:	42b5      	cmp	r5, r6
 8009084:	d11a      	bne.n	80090bc <_printf_common+0xc8>
 8009086:	2000      	movs	r0, #0
 8009088:	e008      	b.n	800909c <_printf_common+0xa8>
 800908a:	2301      	movs	r3, #1
 800908c:	4652      	mov	r2, sl
 800908e:	4641      	mov	r1, r8
 8009090:	4638      	mov	r0, r7
 8009092:	47c8      	blx	r9
 8009094:	3001      	adds	r0, #1
 8009096:	d103      	bne.n	80090a0 <_printf_common+0xac>
 8009098:	f04f 30ff 	mov.w	r0, #4294967295
 800909c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a0:	3501      	adds	r5, #1
 80090a2:	e7c6      	b.n	8009032 <_printf_common+0x3e>
 80090a4:	18e1      	adds	r1, r4, r3
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	2030      	movs	r0, #48	@ 0x30
 80090aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80090ae:	4422      	add	r2, r4
 80090b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80090b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80090b8:	3302      	adds	r3, #2
 80090ba:	e7c7      	b.n	800904c <_printf_common+0x58>
 80090bc:	2301      	movs	r3, #1
 80090be:	4622      	mov	r2, r4
 80090c0:	4641      	mov	r1, r8
 80090c2:	4638      	mov	r0, r7
 80090c4:	47c8      	blx	r9
 80090c6:	3001      	adds	r0, #1
 80090c8:	d0e6      	beq.n	8009098 <_printf_common+0xa4>
 80090ca:	3601      	adds	r6, #1
 80090cc:	e7d9      	b.n	8009082 <_printf_common+0x8e>
	...

080090d0 <_printf_i>:
 80090d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d4:	7e0f      	ldrb	r7, [r1, #24]
 80090d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090d8:	2f78      	cmp	r7, #120	@ 0x78
 80090da:	4691      	mov	r9, r2
 80090dc:	4680      	mov	r8, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	469a      	mov	sl, r3
 80090e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090e6:	d807      	bhi.n	80090f8 <_printf_i+0x28>
 80090e8:	2f62      	cmp	r7, #98	@ 0x62
 80090ea:	d80a      	bhi.n	8009102 <_printf_i+0x32>
 80090ec:	2f00      	cmp	r7, #0
 80090ee:	f000 80d2 	beq.w	8009296 <_printf_i+0x1c6>
 80090f2:	2f58      	cmp	r7, #88	@ 0x58
 80090f4:	f000 80b9 	beq.w	800926a <_printf_i+0x19a>
 80090f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009100:	e03a      	b.n	8009178 <_printf_i+0xa8>
 8009102:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009106:	2b15      	cmp	r3, #21
 8009108:	d8f6      	bhi.n	80090f8 <_printf_i+0x28>
 800910a:	a101      	add	r1, pc, #4	@ (adr r1, 8009110 <_printf_i+0x40>)
 800910c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009110:	08009169 	.word	0x08009169
 8009114:	0800917d 	.word	0x0800917d
 8009118:	080090f9 	.word	0x080090f9
 800911c:	080090f9 	.word	0x080090f9
 8009120:	080090f9 	.word	0x080090f9
 8009124:	080090f9 	.word	0x080090f9
 8009128:	0800917d 	.word	0x0800917d
 800912c:	080090f9 	.word	0x080090f9
 8009130:	080090f9 	.word	0x080090f9
 8009134:	080090f9 	.word	0x080090f9
 8009138:	080090f9 	.word	0x080090f9
 800913c:	0800927d 	.word	0x0800927d
 8009140:	080091a7 	.word	0x080091a7
 8009144:	08009237 	.word	0x08009237
 8009148:	080090f9 	.word	0x080090f9
 800914c:	080090f9 	.word	0x080090f9
 8009150:	0800929f 	.word	0x0800929f
 8009154:	080090f9 	.word	0x080090f9
 8009158:	080091a7 	.word	0x080091a7
 800915c:	080090f9 	.word	0x080090f9
 8009160:	080090f9 	.word	0x080090f9
 8009164:	0800923f 	.word	0x0800923f
 8009168:	6833      	ldr	r3, [r6, #0]
 800916a:	1d1a      	adds	r2, r3, #4
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6032      	str	r2, [r6, #0]
 8009170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009174:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009178:	2301      	movs	r3, #1
 800917a:	e09d      	b.n	80092b8 <_printf_i+0x1e8>
 800917c:	6833      	ldr	r3, [r6, #0]
 800917e:	6820      	ldr	r0, [r4, #0]
 8009180:	1d19      	adds	r1, r3, #4
 8009182:	6031      	str	r1, [r6, #0]
 8009184:	0606      	lsls	r6, r0, #24
 8009186:	d501      	bpl.n	800918c <_printf_i+0xbc>
 8009188:	681d      	ldr	r5, [r3, #0]
 800918a:	e003      	b.n	8009194 <_printf_i+0xc4>
 800918c:	0645      	lsls	r5, r0, #25
 800918e:	d5fb      	bpl.n	8009188 <_printf_i+0xb8>
 8009190:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009194:	2d00      	cmp	r5, #0
 8009196:	da03      	bge.n	80091a0 <_printf_i+0xd0>
 8009198:	232d      	movs	r3, #45	@ 0x2d
 800919a:	426d      	negs	r5, r5
 800919c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091a0:	4859      	ldr	r0, [pc, #356]	@ (8009308 <_printf_i+0x238>)
 80091a2:	230a      	movs	r3, #10
 80091a4:	e011      	b.n	80091ca <_printf_i+0xfa>
 80091a6:	6821      	ldr	r1, [r4, #0]
 80091a8:	6833      	ldr	r3, [r6, #0]
 80091aa:	0608      	lsls	r0, r1, #24
 80091ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80091b0:	d402      	bmi.n	80091b8 <_printf_i+0xe8>
 80091b2:	0649      	lsls	r1, r1, #25
 80091b4:	bf48      	it	mi
 80091b6:	b2ad      	uxthmi	r5, r5
 80091b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80091ba:	4853      	ldr	r0, [pc, #332]	@ (8009308 <_printf_i+0x238>)
 80091bc:	6033      	str	r3, [r6, #0]
 80091be:	bf14      	ite	ne
 80091c0:	230a      	movne	r3, #10
 80091c2:	2308      	moveq	r3, #8
 80091c4:	2100      	movs	r1, #0
 80091c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80091ca:	6866      	ldr	r6, [r4, #4]
 80091cc:	60a6      	str	r6, [r4, #8]
 80091ce:	2e00      	cmp	r6, #0
 80091d0:	bfa2      	ittt	ge
 80091d2:	6821      	ldrge	r1, [r4, #0]
 80091d4:	f021 0104 	bicge.w	r1, r1, #4
 80091d8:	6021      	strge	r1, [r4, #0]
 80091da:	b90d      	cbnz	r5, 80091e0 <_printf_i+0x110>
 80091dc:	2e00      	cmp	r6, #0
 80091de:	d04b      	beq.n	8009278 <_printf_i+0x1a8>
 80091e0:	4616      	mov	r6, r2
 80091e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80091e6:	fb03 5711 	mls	r7, r3, r1, r5
 80091ea:	5dc7      	ldrb	r7, [r0, r7]
 80091ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091f0:	462f      	mov	r7, r5
 80091f2:	42bb      	cmp	r3, r7
 80091f4:	460d      	mov	r5, r1
 80091f6:	d9f4      	bls.n	80091e2 <_printf_i+0x112>
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d10b      	bne.n	8009214 <_printf_i+0x144>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	07df      	lsls	r7, r3, #31
 8009200:	d508      	bpl.n	8009214 <_printf_i+0x144>
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	6861      	ldr	r1, [r4, #4]
 8009206:	4299      	cmp	r1, r3
 8009208:	bfde      	ittt	le
 800920a:	2330      	movle	r3, #48	@ 0x30
 800920c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009210:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009214:	1b92      	subs	r2, r2, r6
 8009216:	6122      	str	r2, [r4, #16]
 8009218:	f8cd a000 	str.w	sl, [sp]
 800921c:	464b      	mov	r3, r9
 800921e:	aa03      	add	r2, sp, #12
 8009220:	4621      	mov	r1, r4
 8009222:	4640      	mov	r0, r8
 8009224:	f7ff fee6 	bl	8008ff4 <_printf_common>
 8009228:	3001      	adds	r0, #1
 800922a:	d14a      	bne.n	80092c2 <_printf_i+0x1f2>
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	b004      	add	sp, #16
 8009232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	f043 0320 	orr.w	r3, r3, #32
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	4833      	ldr	r0, [pc, #204]	@ (800930c <_printf_i+0x23c>)
 8009240:	2778      	movs	r7, #120	@ 0x78
 8009242:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	6831      	ldr	r1, [r6, #0]
 800924a:	061f      	lsls	r7, r3, #24
 800924c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009250:	d402      	bmi.n	8009258 <_printf_i+0x188>
 8009252:	065f      	lsls	r7, r3, #25
 8009254:	bf48      	it	mi
 8009256:	b2ad      	uxthmi	r5, r5
 8009258:	6031      	str	r1, [r6, #0]
 800925a:	07d9      	lsls	r1, r3, #31
 800925c:	bf44      	itt	mi
 800925e:	f043 0320 	orrmi.w	r3, r3, #32
 8009262:	6023      	strmi	r3, [r4, #0]
 8009264:	b11d      	cbz	r5, 800926e <_printf_i+0x19e>
 8009266:	2310      	movs	r3, #16
 8009268:	e7ac      	b.n	80091c4 <_printf_i+0xf4>
 800926a:	4827      	ldr	r0, [pc, #156]	@ (8009308 <_printf_i+0x238>)
 800926c:	e7e9      	b.n	8009242 <_printf_i+0x172>
 800926e:	6823      	ldr	r3, [r4, #0]
 8009270:	f023 0320 	bic.w	r3, r3, #32
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	e7f6      	b.n	8009266 <_printf_i+0x196>
 8009278:	4616      	mov	r6, r2
 800927a:	e7bd      	b.n	80091f8 <_printf_i+0x128>
 800927c:	6833      	ldr	r3, [r6, #0]
 800927e:	6825      	ldr	r5, [r4, #0]
 8009280:	6961      	ldr	r1, [r4, #20]
 8009282:	1d18      	adds	r0, r3, #4
 8009284:	6030      	str	r0, [r6, #0]
 8009286:	062e      	lsls	r6, r5, #24
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	d501      	bpl.n	8009290 <_printf_i+0x1c0>
 800928c:	6019      	str	r1, [r3, #0]
 800928e:	e002      	b.n	8009296 <_printf_i+0x1c6>
 8009290:	0668      	lsls	r0, r5, #25
 8009292:	d5fb      	bpl.n	800928c <_printf_i+0x1bc>
 8009294:	8019      	strh	r1, [r3, #0]
 8009296:	2300      	movs	r3, #0
 8009298:	6123      	str	r3, [r4, #16]
 800929a:	4616      	mov	r6, r2
 800929c:	e7bc      	b.n	8009218 <_printf_i+0x148>
 800929e:	6833      	ldr	r3, [r6, #0]
 80092a0:	1d1a      	adds	r2, r3, #4
 80092a2:	6032      	str	r2, [r6, #0]
 80092a4:	681e      	ldr	r6, [r3, #0]
 80092a6:	6862      	ldr	r2, [r4, #4]
 80092a8:	2100      	movs	r1, #0
 80092aa:	4630      	mov	r0, r6
 80092ac:	f7f6 ff90 	bl	80001d0 <memchr>
 80092b0:	b108      	cbz	r0, 80092b6 <_printf_i+0x1e6>
 80092b2:	1b80      	subs	r0, r0, r6
 80092b4:	6060      	str	r0, [r4, #4]
 80092b6:	6863      	ldr	r3, [r4, #4]
 80092b8:	6123      	str	r3, [r4, #16]
 80092ba:	2300      	movs	r3, #0
 80092bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092c0:	e7aa      	b.n	8009218 <_printf_i+0x148>
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	4632      	mov	r2, r6
 80092c6:	4649      	mov	r1, r9
 80092c8:	4640      	mov	r0, r8
 80092ca:	47d0      	blx	sl
 80092cc:	3001      	adds	r0, #1
 80092ce:	d0ad      	beq.n	800922c <_printf_i+0x15c>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	079b      	lsls	r3, r3, #30
 80092d4:	d413      	bmi.n	80092fe <_printf_i+0x22e>
 80092d6:	68e0      	ldr	r0, [r4, #12]
 80092d8:	9b03      	ldr	r3, [sp, #12]
 80092da:	4298      	cmp	r0, r3
 80092dc:	bfb8      	it	lt
 80092de:	4618      	movlt	r0, r3
 80092e0:	e7a6      	b.n	8009230 <_printf_i+0x160>
 80092e2:	2301      	movs	r3, #1
 80092e4:	4632      	mov	r2, r6
 80092e6:	4649      	mov	r1, r9
 80092e8:	4640      	mov	r0, r8
 80092ea:	47d0      	blx	sl
 80092ec:	3001      	adds	r0, #1
 80092ee:	d09d      	beq.n	800922c <_printf_i+0x15c>
 80092f0:	3501      	adds	r5, #1
 80092f2:	68e3      	ldr	r3, [r4, #12]
 80092f4:	9903      	ldr	r1, [sp, #12]
 80092f6:	1a5b      	subs	r3, r3, r1
 80092f8:	42ab      	cmp	r3, r5
 80092fa:	dcf2      	bgt.n	80092e2 <_printf_i+0x212>
 80092fc:	e7eb      	b.n	80092d6 <_printf_i+0x206>
 80092fe:	2500      	movs	r5, #0
 8009300:	f104 0619 	add.w	r6, r4, #25
 8009304:	e7f5      	b.n	80092f2 <_printf_i+0x222>
 8009306:	bf00      	nop
 8009308:	0800be32 	.word	0x0800be32
 800930c:	0800be43 	.word	0x0800be43

08009310 <std>:
 8009310:	2300      	movs	r3, #0
 8009312:	b510      	push	{r4, lr}
 8009314:	4604      	mov	r4, r0
 8009316:	e9c0 3300 	strd	r3, r3, [r0]
 800931a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800931e:	6083      	str	r3, [r0, #8]
 8009320:	8181      	strh	r1, [r0, #12]
 8009322:	6643      	str	r3, [r0, #100]	@ 0x64
 8009324:	81c2      	strh	r2, [r0, #14]
 8009326:	6183      	str	r3, [r0, #24]
 8009328:	4619      	mov	r1, r3
 800932a:	2208      	movs	r2, #8
 800932c:	305c      	adds	r0, #92	@ 0x5c
 800932e:	f000 f906 	bl	800953e <memset>
 8009332:	4b0d      	ldr	r3, [pc, #52]	@ (8009368 <std+0x58>)
 8009334:	6263      	str	r3, [r4, #36]	@ 0x24
 8009336:	4b0d      	ldr	r3, [pc, #52]	@ (800936c <std+0x5c>)
 8009338:	62a3      	str	r3, [r4, #40]	@ 0x28
 800933a:	4b0d      	ldr	r3, [pc, #52]	@ (8009370 <std+0x60>)
 800933c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800933e:	4b0d      	ldr	r3, [pc, #52]	@ (8009374 <std+0x64>)
 8009340:	6323      	str	r3, [r4, #48]	@ 0x30
 8009342:	4b0d      	ldr	r3, [pc, #52]	@ (8009378 <std+0x68>)
 8009344:	6224      	str	r4, [r4, #32]
 8009346:	429c      	cmp	r4, r3
 8009348:	d006      	beq.n	8009358 <std+0x48>
 800934a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800934e:	4294      	cmp	r4, r2
 8009350:	d002      	beq.n	8009358 <std+0x48>
 8009352:	33d0      	adds	r3, #208	@ 0xd0
 8009354:	429c      	cmp	r4, r3
 8009356:	d105      	bne.n	8009364 <std+0x54>
 8009358:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800935c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009360:	f000 b98e 	b.w	8009680 <__retarget_lock_init_recursive>
 8009364:	bd10      	pop	{r4, pc}
 8009366:	bf00      	nop
 8009368:	080094b9 	.word	0x080094b9
 800936c:	080094db 	.word	0x080094db
 8009370:	08009513 	.word	0x08009513
 8009374:	08009537 	.word	0x08009537
 8009378:	200005e0 	.word	0x200005e0

0800937c <stdio_exit_handler>:
 800937c:	4a02      	ldr	r2, [pc, #8]	@ (8009388 <stdio_exit_handler+0xc>)
 800937e:	4903      	ldr	r1, [pc, #12]	@ (800938c <stdio_exit_handler+0x10>)
 8009380:	4803      	ldr	r0, [pc, #12]	@ (8009390 <stdio_exit_handler+0x14>)
 8009382:	f000 b869 	b.w	8009458 <_fwalk_sglue>
 8009386:	bf00      	nop
 8009388:	2000000c 	.word	0x2000000c
 800938c:	0800b8f1 	.word	0x0800b8f1
 8009390:	20000188 	.word	0x20000188

08009394 <cleanup_stdio>:
 8009394:	6841      	ldr	r1, [r0, #4]
 8009396:	4b0c      	ldr	r3, [pc, #48]	@ (80093c8 <cleanup_stdio+0x34>)
 8009398:	4299      	cmp	r1, r3
 800939a:	b510      	push	{r4, lr}
 800939c:	4604      	mov	r4, r0
 800939e:	d001      	beq.n	80093a4 <cleanup_stdio+0x10>
 80093a0:	f002 faa6 	bl	800b8f0 <_fflush_r>
 80093a4:	68a1      	ldr	r1, [r4, #8]
 80093a6:	4b09      	ldr	r3, [pc, #36]	@ (80093cc <cleanup_stdio+0x38>)
 80093a8:	4299      	cmp	r1, r3
 80093aa:	d002      	beq.n	80093b2 <cleanup_stdio+0x1e>
 80093ac:	4620      	mov	r0, r4
 80093ae:	f002 fa9f 	bl	800b8f0 <_fflush_r>
 80093b2:	68e1      	ldr	r1, [r4, #12]
 80093b4:	4b06      	ldr	r3, [pc, #24]	@ (80093d0 <cleanup_stdio+0x3c>)
 80093b6:	4299      	cmp	r1, r3
 80093b8:	d004      	beq.n	80093c4 <cleanup_stdio+0x30>
 80093ba:	4620      	mov	r0, r4
 80093bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c0:	f002 ba96 	b.w	800b8f0 <_fflush_r>
 80093c4:	bd10      	pop	{r4, pc}
 80093c6:	bf00      	nop
 80093c8:	200005e0 	.word	0x200005e0
 80093cc:	20000648 	.word	0x20000648
 80093d0:	200006b0 	.word	0x200006b0

080093d4 <global_stdio_init.part.0>:
 80093d4:	b510      	push	{r4, lr}
 80093d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009404 <global_stdio_init.part.0+0x30>)
 80093d8:	4c0b      	ldr	r4, [pc, #44]	@ (8009408 <global_stdio_init.part.0+0x34>)
 80093da:	4a0c      	ldr	r2, [pc, #48]	@ (800940c <global_stdio_init.part.0+0x38>)
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	4620      	mov	r0, r4
 80093e0:	2200      	movs	r2, #0
 80093e2:	2104      	movs	r1, #4
 80093e4:	f7ff ff94 	bl	8009310 <std>
 80093e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80093ec:	2201      	movs	r2, #1
 80093ee:	2109      	movs	r1, #9
 80093f0:	f7ff ff8e 	bl	8009310 <std>
 80093f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80093f8:	2202      	movs	r2, #2
 80093fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093fe:	2112      	movs	r1, #18
 8009400:	f7ff bf86 	b.w	8009310 <std>
 8009404:	20000718 	.word	0x20000718
 8009408:	200005e0 	.word	0x200005e0
 800940c:	0800937d 	.word	0x0800937d

08009410 <__sfp_lock_acquire>:
 8009410:	4801      	ldr	r0, [pc, #4]	@ (8009418 <__sfp_lock_acquire+0x8>)
 8009412:	f000 b936 	b.w	8009682 <__retarget_lock_acquire_recursive>
 8009416:	bf00      	nop
 8009418:	20000721 	.word	0x20000721

0800941c <__sfp_lock_release>:
 800941c:	4801      	ldr	r0, [pc, #4]	@ (8009424 <__sfp_lock_release+0x8>)
 800941e:	f000 b931 	b.w	8009684 <__retarget_lock_release_recursive>
 8009422:	bf00      	nop
 8009424:	20000721 	.word	0x20000721

08009428 <__sinit>:
 8009428:	b510      	push	{r4, lr}
 800942a:	4604      	mov	r4, r0
 800942c:	f7ff fff0 	bl	8009410 <__sfp_lock_acquire>
 8009430:	6a23      	ldr	r3, [r4, #32]
 8009432:	b11b      	cbz	r3, 800943c <__sinit+0x14>
 8009434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009438:	f7ff bff0 	b.w	800941c <__sfp_lock_release>
 800943c:	4b04      	ldr	r3, [pc, #16]	@ (8009450 <__sinit+0x28>)
 800943e:	6223      	str	r3, [r4, #32]
 8009440:	4b04      	ldr	r3, [pc, #16]	@ (8009454 <__sinit+0x2c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1f5      	bne.n	8009434 <__sinit+0xc>
 8009448:	f7ff ffc4 	bl	80093d4 <global_stdio_init.part.0>
 800944c:	e7f2      	b.n	8009434 <__sinit+0xc>
 800944e:	bf00      	nop
 8009450:	08009395 	.word	0x08009395
 8009454:	20000718 	.word	0x20000718

08009458 <_fwalk_sglue>:
 8009458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800945c:	4607      	mov	r7, r0
 800945e:	4688      	mov	r8, r1
 8009460:	4614      	mov	r4, r2
 8009462:	2600      	movs	r6, #0
 8009464:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009468:	f1b9 0901 	subs.w	r9, r9, #1
 800946c:	d505      	bpl.n	800947a <_fwalk_sglue+0x22>
 800946e:	6824      	ldr	r4, [r4, #0]
 8009470:	2c00      	cmp	r4, #0
 8009472:	d1f7      	bne.n	8009464 <_fwalk_sglue+0xc>
 8009474:	4630      	mov	r0, r6
 8009476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947a:	89ab      	ldrh	r3, [r5, #12]
 800947c:	2b01      	cmp	r3, #1
 800947e:	d907      	bls.n	8009490 <_fwalk_sglue+0x38>
 8009480:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009484:	3301      	adds	r3, #1
 8009486:	d003      	beq.n	8009490 <_fwalk_sglue+0x38>
 8009488:	4629      	mov	r1, r5
 800948a:	4638      	mov	r0, r7
 800948c:	47c0      	blx	r8
 800948e:	4306      	orrs	r6, r0
 8009490:	3568      	adds	r5, #104	@ 0x68
 8009492:	e7e9      	b.n	8009468 <_fwalk_sglue+0x10>

08009494 <iprintf>:
 8009494:	b40f      	push	{r0, r1, r2, r3}
 8009496:	b507      	push	{r0, r1, r2, lr}
 8009498:	4906      	ldr	r1, [pc, #24]	@ (80094b4 <iprintf+0x20>)
 800949a:	ab04      	add	r3, sp, #16
 800949c:	6808      	ldr	r0, [r1, #0]
 800949e:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a2:	6881      	ldr	r1, [r0, #8]
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	f002 f887 	bl	800b5b8 <_vfiprintf_r>
 80094aa:	b003      	add	sp, #12
 80094ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b0:	b004      	add	sp, #16
 80094b2:	4770      	bx	lr
 80094b4:	20000184 	.word	0x20000184

080094b8 <__sread>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	460c      	mov	r4, r1
 80094bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c0:	f000 f890 	bl	80095e4 <_read_r>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	bfab      	itete	ge
 80094c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80094ca:	89a3      	ldrhlt	r3, [r4, #12]
 80094cc:	181b      	addge	r3, r3, r0
 80094ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80094d2:	bfac      	ite	ge
 80094d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80094d6:	81a3      	strhlt	r3, [r4, #12]
 80094d8:	bd10      	pop	{r4, pc}

080094da <__swrite>:
 80094da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094de:	461f      	mov	r7, r3
 80094e0:	898b      	ldrh	r3, [r1, #12]
 80094e2:	05db      	lsls	r3, r3, #23
 80094e4:	4605      	mov	r5, r0
 80094e6:	460c      	mov	r4, r1
 80094e8:	4616      	mov	r6, r2
 80094ea:	d505      	bpl.n	80094f8 <__swrite+0x1e>
 80094ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f0:	2302      	movs	r3, #2
 80094f2:	2200      	movs	r2, #0
 80094f4:	f000 f864 	bl	80095c0 <_lseek_r>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009502:	81a3      	strh	r3, [r4, #12]
 8009504:	4632      	mov	r2, r6
 8009506:	463b      	mov	r3, r7
 8009508:	4628      	mov	r0, r5
 800950a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800950e:	f000 b87b 	b.w	8009608 <_write_r>

08009512 <__sseek>:
 8009512:	b510      	push	{r4, lr}
 8009514:	460c      	mov	r4, r1
 8009516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800951a:	f000 f851 	bl	80095c0 <_lseek_r>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	bf15      	itete	ne
 8009524:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009526:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800952a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800952e:	81a3      	strheq	r3, [r4, #12]
 8009530:	bf18      	it	ne
 8009532:	81a3      	strhne	r3, [r4, #12]
 8009534:	bd10      	pop	{r4, pc}

08009536 <__sclose>:
 8009536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953a:	f000 b831 	b.w	80095a0 <_close_r>

0800953e <memset>:
 800953e:	4402      	add	r2, r0
 8009540:	4603      	mov	r3, r0
 8009542:	4293      	cmp	r3, r2
 8009544:	d100      	bne.n	8009548 <memset+0xa>
 8009546:	4770      	bx	lr
 8009548:	f803 1b01 	strb.w	r1, [r3], #1
 800954c:	e7f9      	b.n	8009542 <memset+0x4>

0800954e <strncmp>:
 800954e:	b510      	push	{r4, lr}
 8009550:	b16a      	cbz	r2, 800956e <strncmp+0x20>
 8009552:	3901      	subs	r1, #1
 8009554:	1884      	adds	r4, r0, r2
 8009556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800955a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800955e:	429a      	cmp	r2, r3
 8009560:	d103      	bne.n	800956a <strncmp+0x1c>
 8009562:	42a0      	cmp	r0, r4
 8009564:	d001      	beq.n	800956a <strncmp+0x1c>
 8009566:	2a00      	cmp	r2, #0
 8009568:	d1f5      	bne.n	8009556 <strncmp+0x8>
 800956a:	1ad0      	subs	r0, r2, r3
 800956c:	bd10      	pop	{r4, pc}
 800956e:	4610      	mov	r0, r2
 8009570:	e7fc      	b.n	800956c <strncmp+0x1e>

08009572 <strncpy>:
 8009572:	b510      	push	{r4, lr}
 8009574:	3901      	subs	r1, #1
 8009576:	4603      	mov	r3, r0
 8009578:	b132      	cbz	r2, 8009588 <strncpy+0x16>
 800957a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800957e:	f803 4b01 	strb.w	r4, [r3], #1
 8009582:	3a01      	subs	r2, #1
 8009584:	2c00      	cmp	r4, #0
 8009586:	d1f7      	bne.n	8009578 <strncpy+0x6>
 8009588:	441a      	add	r2, r3
 800958a:	2100      	movs	r1, #0
 800958c:	4293      	cmp	r3, r2
 800958e:	d100      	bne.n	8009592 <strncpy+0x20>
 8009590:	bd10      	pop	{r4, pc}
 8009592:	f803 1b01 	strb.w	r1, [r3], #1
 8009596:	e7f9      	b.n	800958c <strncpy+0x1a>

08009598 <_localeconv_r>:
 8009598:	4800      	ldr	r0, [pc, #0]	@ (800959c <_localeconv_r+0x4>)
 800959a:	4770      	bx	lr
 800959c:	20000108 	.word	0x20000108

080095a0 <_close_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d06      	ldr	r5, [pc, #24]	@ (80095bc <_close_r+0x1c>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	f7f8 f9dc 	bl	8001968 <_close>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_close_r+0x1a>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_close_r+0x1a>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	2000071c 	.word	0x2000071c

080095c0 <_lseek_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	@ (80095e0 <_lseek_r+0x20>)
 80095c4:	4604      	mov	r4, r0
 80095c6:	4608      	mov	r0, r1
 80095c8:	4611      	mov	r1, r2
 80095ca:	2200      	movs	r2, #0
 80095cc:	602a      	str	r2, [r5, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f7f8 f9f1 	bl	80019b6 <_lseek>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_lseek_r+0x1e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_lseek_r+0x1e>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	2000071c 	.word	0x2000071c

080095e4 <_read_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d07      	ldr	r5, [pc, #28]	@ (8009604 <_read_r+0x20>)
 80095e8:	4604      	mov	r4, r0
 80095ea:	4608      	mov	r0, r1
 80095ec:	4611      	mov	r1, r2
 80095ee:	2200      	movs	r2, #0
 80095f0:	602a      	str	r2, [r5, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	f7f8 f97f 	bl	80018f6 <_read>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_read_r+0x1e>
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_read_r+0x1e>
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	2000071c 	.word	0x2000071c

08009608 <_write_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d07      	ldr	r5, [pc, #28]	@ (8009628 <_write_r+0x20>)
 800960c:	4604      	mov	r4, r0
 800960e:	4608      	mov	r0, r1
 8009610:	4611      	mov	r1, r2
 8009612:	2200      	movs	r2, #0
 8009614:	602a      	str	r2, [r5, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	f7f8 f98a 	bl	8001930 <_write>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_write_r+0x1e>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_write_r+0x1e>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	2000071c 	.word	0x2000071c

0800962c <__errno>:
 800962c:	4b01      	ldr	r3, [pc, #4]	@ (8009634 <__errno+0x8>)
 800962e:	6818      	ldr	r0, [r3, #0]
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	20000184 	.word	0x20000184

08009638 <__libc_init_array>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	4d0d      	ldr	r5, [pc, #52]	@ (8009670 <__libc_init_array+0x38>)
 800963c:	4c0d      	ldr	r4, [pc, #52]	@ (8009674 <__libc_init_array+0x3c>)
 800963e:	1b64      	subs	r4, r4, r5
 8009640:	10a4      	asrs	r4, r4, #2
 8009642:	2600      	movs	r6, #0
 8009644:	42a6      	cmp	r6, r4
 8009646:	d109      	bne.n	800965c <__libc_init_array+0x24>
 8009648:	4d0b      	ldr	r5, [pc, #44]	@ (8009678 <__libc_init_array+0x40>)
 800964a:	4c0c      	ldr	r4, [pc, #48]	@ (800967c <__libc_init_array+0x44>)
 800964c:	f002 fb30 	bl	800bcb0 <_init>
 8009650:	1b64      	subs	r4, r4, r5
 8009652:	10a4      	asrs	r4, r4, #2
 8009654:	2600      	movs	r6, #0
 8009656:	42a6      	cmp	r6, r4
 8009658:	d105      	bne.n	8009666 <__libc_init_array+0x2e>
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009660:	4798      	blx	r3
 8009662:	3601      	adds	r6, #1
 8009664:	e7ee      	b.n	8009644 <__libc_init_array+0xc>
 8009666:	f855 3b04 	ldr.w	r3, [r5], #4
 800966a:	4798      	blx	r3
 800966c:	3601      	adds	r6, #1
 800966e:	e7f2      	b.n	8009656 <__libc_init_array+0x1e>
 8009670:	0800c1f8 	.word	0x0800c1f8
 8009674:	0800c1f8 	.word	0x0800c1f8
 8009678:	0800c1f8 	.word	0x0800c1f8
 800967c:	0800c1fc 	.word	0x0800c1fc

08009680 <__retarget_lock_init_recursive>:
 8009680:	4770      	bx	lr

08009682 <__retarget_lock_acquire_recursive>:
 8009682:	4770      	bx	lr

08009684 <__retarget_lock_release_recursive>:
 8009684:	4770      	bx	lr

08009686 <memcpy>:
 8009686:	440a      	add	r2, r1
 8009688:	4291      	cmp	r1, r2
 800968a:	f100 33ff 	add.w	r3, r0, #4294967295
 800968e:	d100      	bne.n	8009692 <memcpy+0xc>
 8009690:	4770      	bx	lr
 8009692:	b510      	push	{r4, lr}
 8009694:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800969c:	4291      	cmp	r1, r2
 800969e:	d1f9      	bne.n	8009694 <memcpy+0xe>
 80096a0:	bd10      	pop	{r4, pc}
 80096a2:	0000      	movs	r0, r0
 80096a4:	0000      	movs	r0, r0
	...

080096a8 <nan>:
 80096a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80096b0 <nan+0x8>
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	00000000 	.word	0x00000000
 80096b4:	7ff80000 	.word	0x7ff80000

080096b8 <quorem>:
 80096b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	6903      	ldr	r3, [r0, #16]
 80096be:	690c      	ldr	r4, [r1, #16]
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	4607      	mov	r7, r0
 80096c4:	db7e      	blt.n	80097c4 <quorem+0x10c>
 80096c6:	3c01      	subs	r4, #1
 80096c8:	f101 0814 	add.w	r8, r1, #20
 80096cc:	00a3      	lsls	r3, r4, #2
 80096ce:	f100 0514 	add.w	r5, r0, #20
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096e2:	3301      	adds	r3, #1
 80096e4:	429a      	cmp	r2, r3
 80096e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80096ee:	d32e      	bcc.n	800974e <quorem+0x96>
 80096f0:	f04f 0a00 	mov.w	sl, #0
 80096f4:	46c4      	mov	ip, r8
 80096f6:	46ae      	mov	lr, r5
 80096f8:	46d3      	mov	fp, sl
 80096fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096fe:	b298      	uxth	r0, r3
 8009700:	fb06 a000 	mla	r0, r6, r0, sl
 8009704:	0c02      	lsrs	r2, r0, #16
 8009706:	0c1b      	lsrs	r3, r3, #16
 8009708:	fb06 2303 	mla	r3, r6, r3, r2
 800970c:	f8de 2000 	ldr.w	r2, [lr]
 8009710:	b280      	uxth	r0, r0
 8009712:	b292      	uxth	r2, r2
 8009714:	1a12      	subs	r2, r2, r0
 8009716:	445a      	add	r2, fp
 8009718:	f8de 0000 	ldr.w	r0, [lr]
 800971c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009720:	b29b      	uxth	r3, r3
 8009722:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009726:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800972a:	b292      	uxth	r2, r2
 800972c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009730:	45e1      	cmp	r9, ip
 8009732:	f84e 2b04 	str.w	r2, [lr], #4
 8009736:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800973a:	d2de      	bcs.n	80096fa <quorem+0x42>
 800973c:	9b00      	ldr	r3, [sp, #0]
 800973e:	58eb      	ldr	r3, [r5, r3]
 8009740:	b92b      	cbnz	r3, 800974e <quorem+0x96>
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	3b04      	subs	r3, #4
 8009746:	429d      	cmp	r5, r3
 8009748:	461a      	mov	r2, r3
 800974a:	d32f      	bcc.n	80097ac <quorem+0xf4>
 800974c:	613c      	str	r4, [r7, #16]
 800974e:	4638      	mov	r0, r7
 8009750:	f001 fd0e 	bl	800b170 <__mcmp>
 8009754:	2800      	cmp	r0, #0
 8009756:	db25      	blt.n	80097a4 <quorem+0xec>
 8009758:	4629      	mov	r1, r5
 800975a:	2000      	movs	r0, #0
 800975c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009760:	f8d1 c000 	ldr.w	ip, [r1]
 8009764:	fa1f fe82 	uxth.w	lr, r2
 8009768:	fa1f f38c 	uxth.w	r3, ip
 800976c:	eba3 030e 	sub.w	r3, r3, lr
 8009770:	4403      	add	r3, r0
 8009772:	0c12      	lsrs	r2, r2, #16
 8009774:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009778:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800977c:	b29b      	uxth	r3, r3
 800977e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009782:	45c1      	cmp	r9, r8
 8009784:	f841 3b04 	str.w	r3, [r1], #4
 8009788:	ea4f 4022 	mov.w	r0, r2, asr #16
 800978c:	d2e6      	bcs.n	800975c <quorem+0xa4>
 800978e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009796:	b922      	cbnz	r2, 80097a2 <quorem+0xea>
 8009798:	3b04      	subs	r3, #4
 800979a:	429d      	cmp	r5, r3
 800979c:	461a      	mov	r2, r3
 800979e:	d30b      	bcc.n	80097b8 <quorem+0x100>
 80097a0:	613c      	str	r4, [r7, #16]
 80097a2:	3601      	adds	r6, #1
 80097a4:	4630      	mov	r0, r6
 80097a6:	b003      	add	sp, #12
 80097a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ac:	6812      	ldr	r2, [r2, #0]
 80097ae:	3b04      	subs	r3, #4
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	d1cb      	bne.n	800974c <quorem+0x94>
 80097b4:	3c01      	subs	r4, #1
 80097b6:	e7c6      	b.n	8009746 <quorem+0x8e>
 80097b8:	6812      	ldr	r2, [r2, #0]
 80097ba:	3b04      	subs	r3, #4
 80097bc:	2a00      	cmp	r2, #0
 80097be:	d1ef      	bne.n	80097a0 <quorem+0xe8>
 80097c0:	3c01      	subs	r4, #1
 80097c2:	e7ea      	b.n	800979a <quorem+0xe2>
 80097c4:	2000      	movs	r0, #0
 80097c6:	e7ee      	b.n	80097a6 <quorem+0xee>

080097c8 <_dtoa_r>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	69c7      	ldr	r7, [r0, #28]
 80097ce:	b099      	sub	sp, #100	@ 0x64
 80097d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80097d4:	ec55 4b10 	vmov	r4, r5, d0
 80097d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80097da:	9109      	str	r1, [sp, #36]	@ 0x24
 80097dc:	4683      	mov	fp, r0
 80097de:	920e      	str	r2, [sp, #56]	@ 0x38
 80097e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80097e2:	b97f      	cbnz	r7, 8009804 <_dtoa_r+0x3c>
 80097e4:	2010      	movs	r0, #16
 80097e6:	f001 f937 	bl	800aa58 <malloc>
 80097ea:	4602      	mov	r2, r0
 80097ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80097f0:	b920      	cbnz	r0, 80097fc <_dtoa_r+0x34>
 80097f2:	4ba7      	ldr	r3, [pc, #668]	@ (8009a90 <_dtoa_r+0x2c8>)
 80097f4:	21ef      	movs	r1, #239	@ 0xef
 80097f6:	48a7      	ldr	r0, [pc, #668]	@ (8009a94 <_dtoa_r+0x2cc>)
 80097f8:	f002 f946 	bl	800ba88 <__assert_func>
 80097fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009800:	6007      	str	r7, [r0, #0]
 8009802:	60c7      	str	r7, [r0, #12]
 8009804:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009808:	6819      	ldr	r1, [r3, #0]
 800980a:	b159      	cbz	r1, 8009824 <_dtoa_r+0x5c>
 800980c:	685a      	ldr	r2, [r3, #4]
 800980e:	604a      	str	r2, [r1, #4]
 8009810:	2301      	movs	r3, #1
 8009812:	4093      	lsls	r3, r2
 8009814:	608b      	str	r3, [r1, #8]
 8009816:	4658      	mov	r0, fp
 8009818:	f001 fa26 	bl	800ac68 <_Bfree>
 800981c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009820:	2200      	movs	r2, #0
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	1e2b      	subs	r3, r5, #0
 8009826:	bfb9      	ittee	lt
 8009828:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800982c:	9303      	strlt	r3, [sp, #12]
 800982e:	2300      	movge	r3, #0
 8009830:	6033      	strge	r3, [r6, #0]
 8009832:	9f03      	ldr	r7, [sp, #12]
 8009834:	4b98      	ldr	r3, [pc, #608]	@ (8009a98 <_dtoa_r+0x2d0>)
 8009836:	bfbc      	itt	lt
 8009838:	2201      	movlt	r2, #1
 800983a:	6032      	strlt	r2, [r6, #0]
 800983c:	43bb      	bics	r3, r7
 800983e:	d112      	bne.n	8009866 <_dtoa_r+0x9e>
 8009840:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009842:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800984c:	4323      	orrs	r3, r4
 800984e:	f000 854d 	beq.w	800a2ec <_dtoa_r+0xb24>
 8009852:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009854:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009aac <_dtoa_r+0x2e4>
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 854f 	beq.w	800a2fc <_dtoa_r+0xb34>
 800985e:	f10a 0303 	add.w	r3, sl, #3
 8009862:	f000 bd49 	b.w	800a2f8 <_dtoa_r+0xb30>
 8009866:	ed9d 7b02 	vldr	d7, [sp, #8]
 800986a:	2200      	movs	r2, #0
 800986c:	ec51 0b17 	vmov	r0, r1, d7
 8009870:	2300      	movs	r3, #0
 8009872:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009876:	f7f7 f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800987a:	4680      	mov	r8, r0
 800987c:	b158      	cbz	r0, 8009896 <_dtoa_r+0xce>
 800987e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009880:	2301      	movs	r3, #1
 8009882:	6013      	str	r3, [r2, #0]
 8009884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009886:	b113      	cbz	r3, 800988e <_dtoa_r+0xc6>
 8009888:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800988a:	4b84      	ldr	r3, [pc, #528]	@ (8009a9c <_dtoa_r+0x2d4>)
 800988c:	6013      	str	r3, [r2, #0]
 800988e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009ab0 <_dtoa_r+0x2e8>
 8009892:	f000 bd33 	b.w	800a2fc <_dtoa_r+0xb34>
 8009896:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800989a:	aa16      	add	r2, sp, #88	@ 0x58
 800989c:	a917      	add	r1, sp, #92	@ 0x5c
 800989e:	4658      	mov	r0, fp
 80098a0:	f001 fd86 	bl	800b3b0 <__d2b>
 80098a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80098a8:	4681      	mov	r9, r0
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	d077      	beq.n	800999e <_dtoa_r+0x1d6>
 80098ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80098b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80098c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80098c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80098c8:	4619      	mov	r1, r3
 80098ca:	2200      	movs	r2, #0
 80098cc:	4b74      	ldr	r3, [pc, #464]	@ (8009aa0 <_dtoa_r+0x2d8>)
 80098ce:	f7f6 fcdb 	bl	8000288 <__aeabi_dsub>
 80098d2:	a369      	add	r3, pc, #420	@ (adr r3, 8009a78 <_dtoa_r+0x2b0>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f7f6 fe8e 	bl	80005f8 <__aeabi_dmul>
 80098dc:	a368      	add	r3, pc, #416	@ (adr r3, 8009a80 <_dtoa_r+0x2b8>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fcd3 	bl	800028c <__adddf3>
 80098e6:	4604      	mov	r4, r0
 80098e8:	4630      	mov	r0, r6
 80098ea:	460d      	mov	r5, r1
 80098ec:	f7f6 fe1a 	bl	8000524 <__aeabi_i2d>
 80098f0:	a365      	add	r3, pc, #404	@ (adr r3, 8009a88 <_dtoa_r+0x2c0>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f6 fe7f 	bl	80005f8 <__aeabi_dmul>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4620      	mov	r0, r4
 8009900:	4629      	mov	r1, r5
 8009902:	f7f6 fcc3 	bl	800028c <__adddf3>
 8009906:	4604      	mov	r4, r0
 8009908:	460d      	mov	r5, r1
 800990a:	f7f7 f925 	bl	8000b58 <__aeabi_d2iz>
 800990e:	2200      	movs	r2, #0
 8009910:	4607      	mov	r7, r0
 8009912:	2300      	movs	r3, #0
 8009914:	4620      	mov	r0, r4
 8009916:	4629      	mov	r1, r5
 8009918:	f7f7 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800991c:	b140      	cbz	r0, 8009930 <_dtoa_r+0x168>
 800991e:	4638      	mov	r0, r7
 8009920:	f7f6 fe00 	bl	8000524 <__aeabi_i2d>
 8009924:	4622      	mov	r2, r4
 8009926:	462b      	mov	r3, r5
 8009928:	f7f7 f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800992c:	b900      	cbnz	r0, 8009930 <_dtoa_r+0x168>
 800992e:	3f01      	subs	r7, #1
 8009930:	2f16      	cmp	r7, #22
 8009932:	d851      	bhi.n	80099d8 <_dtoa_r+0x210>
 8009934:	4b5b      	ldr	r3, [pc, #364]	@ (8009aa4 <_dtoa_r+0x2dc>)
 8009936:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009942:	f7f7 f8cb 	bl	8000adc <__aeabi_dcmplt>
 8009946:	2800      	cmp	r0, #0
 8009948:	d048      	beq.n	80099dc <_dtoa_r+0x214>
 800994a:	3f01      	subs	r7, #1
 800994c:	2300      	movs	r3, #0
 800994e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009950:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009952:	1b9b      	subs	r3, r3, r6
 8009954:	1e5a      	subs	r2, r3, #1
 8009956:	bf44      	itt	mi
 8009958:	f1c3 0801 	rsbmi	r8, r3, #1
 800995c:	2300      	movmi	r3, #0
 800995e:	9208      	str	r2, [sp, #32]
 8009960:	bf54      	ite	pl
 8009962:	f04f 0800 	movpl.w	r8, #0
 8009966:	9308      	strmi	r3, [sp, #32]
 8009968:	2f00      	cmp	r7, #0
 800996a:	db39      	blt.n	80099e0 <_dtoa_r+0x218>
 800996c:	9b08      	ldr	r3, [sp, #32]
 800996e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009970:	443b      	add	r3, r7
 8009972:	9308      	str	r3, [sp, #32]
 8009974:	2300      	movs	r3, #0
 8009976:	930a      	str	r3, [sp, #40]	@ 0x28
 8009978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800997a:	2b09      	cmp	r3, #9
 800997c:	d864      	bhi.n	8009a48 <_dtoa_r+0x280>
 800997e:	2b05      	cmp	r3, #5
 8009980:	bfc4      	itt	gt
 8009982:	3b04      	subgt	r3, #4
 8009984:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009988:	f1a3 0302 	sub.w	r3, r3, #2
 800998c:	bfcc      	ite	gt
 800998e:	2400      	movgt	r4, #0
 8009990:	2401      	movle	r4, #1
 8009992:	2b03      	cmp	r3, #3
 8009994:	d863      	bhi.n	8009a5e <_dtoa_r+0x296>
 8009996:	e8df f003 	tbb	[pc, r3]
 800999a:	372a      	.short	0x372a
 800999c:	5535      	.short	0x5535
 800999e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80099a2:	441e      	add	r6, r3
 80099a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80099a8:	2b20      	cmp	r3, #32
 80099aa:	bfc1      	itttt	gt
 80099ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80099b0:	409f      	lslgt	r7, r3
 80099b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80099b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80099ba:	bfd6      	itet	le
 80099bc:	f1c3 0320 	rsble	r3, r3, #32
 80099c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80099c4:	fa04 f003 	lslle.w	r0, r4, r3
 80099c8:	f7f6 fd9c 	bl	8000504 <__aeabi_ui2d>
 80099cc:	2201      	movs	r2, #1
 80099ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80099d2:	3e01      	subs	r6, #1
 80099d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80099d6:	e777      	b.n	80098c8 <_dtoa_r+0x100>
 80099d8:	2301      	movs	r3, #1
 80099da:	e7b8      	b.n	800994e <_dtoa_r+0x186>
 80099dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80099de:	e7b7      	b.n	8009950 <_dtoa_r+0x188>
 80099e0:	427b      	negs	r3, r7
 80099e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80099e4:	2300      	movs	r3, #0
 80099e6:	eba8 0807 	sub.w	r8, r8, r7
 80099ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099ec:	e7c4      	b.n	8009978 <_dtoa_r+0x1b0>
 80099ee:	2300      	movs	r3, #0
 80099f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	dc35      	bgt.n	8009a64 <_dtoa_r+0x29c>
 80099f8:	2301      	movs	r3, #1
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	9307      	str	r3, [sp, #28]
 80099fe:	461a      	mov	r2, r3
 8009a00:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a02:	e00b      	b.n	8009a1c <_dtoa_r+0x254>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e7f3      	b.n	80099f0 <_dtoa_r+0x228>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a0e:	18fb      	adds	r3, r7, r3
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	3301      	adds	r3, #1
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	9307      	str	r3, [sp, #28]
 8009a18:	bfb8      	it	lt
 8009a1a:	2301      	movlt	r3, #1
 8009a1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009a20:	2100      	movs	r1, #0
 8009a22:	2204      	movs	r2, #4
 8009a24:	f102 0514 	add.w	r5, r2, #20
 8009a28:	429d      	cmp	r5, r3
 8009a2a:	d91f      	bls.n	8009a6c <_dtoa_r+0x2a4>
 8009a2c:	6041      	str	r1, [r0, #4]
 8009a2e:	4658      	mov	r0, fp
 8009a30:	f001 f8da 	bl	800abe8 <_Balloc>
 8009a34:	4682      	mov	sl, r0
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d13c      	bne.n	8009ab4 <_dtoa_r+0x2ec>
 8009a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa8 <_dtoa_r+0x2e0>)
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a42:	e6d8      	b.n	80097f6 <_dtoa_r+0x2e>
 8009a44:	2301      	movs	r3, #1
 8009a46:	e7e0      	b.n	8009a0a <_dtoa_r+0x242>
 8009a48:	2401      	movs	r4, #1
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009a50:	f04f 33ff 	mov.w	r3, #4294967295
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	9307      	str	r3, [sp, #28]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2312      	movs	r3, #18
 8009a5c:	e7d0      	b.n	8009a00 <_dtoa_r+0x238>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a62:	e7f5      	b.n	8009a50 <_dtoa_r+0x288>
 8009a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	9307      	str	r3, [sp, #28]
 8009a6a:	e7d7      	b.n	8009a1c <_dtoa_r+0x254>
 8009a6c:	3101      	adds	r1, #1
 8009a6e:	0052      	lsls	r2, r2, #1
 8009a70:	e7d8      	b.n	8009a24 <_dtoa_r+0x25c>
 8009a72:	bf00      	nop
 8009a74:	f3af 8000 	nop.w
 8009a78:	636f4361 	.word	0x636f4361
 8009a7c:	3fd287a7 	.word	0x3fd287a7
 8009a80:	8b60c8b3 	.word	0x8b60c8b3
 8009a84:	3fc68a28 	.word	0x3fc68a28
 8009a88:	509f79fb 	.word	0x509f79fb
 8009a8c:	3fd34413 	.word	0x3fd34413
 8009a90:	0800be69 	.word	0x0800be69
 8009a94:	0800be80 	.word	0x0800be80
 8009a98:	7ff00000 	.word	0x7ff00000
 8009a9c:	0800be31 	.word	0x0800be31
 8009aa0:	3ff80000 	.word	0x3ff80000
 8009aa4:	0800bfd8 	.word	0x0800bfd8
 8009aa8:	0800bed8 	.word	0x0800bed8
 8009aac:	0800be65 	.word	0x0800be65
 8009ab0:	0800be30 	.word	0x0800be30
 8009ab4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ab8:	6018      	str	r0, [r3, #0]
 8009aba:	9b07      	ldr	r3, [sp, #28]
 8009abc:	2b0e      	cmp	r3, #14
 8009abe:	f200 80a4 	bhi.w	8009c0a <_dtoa_r+0x442>
 8009ac2:	2c00      	cmp	r4, #0
 8009ac4:	f000 80a1 	beq.w	8009c0a <_dtoa_r+0x442>
 8009ac8:	2f00      	cmp	r7, #0
 8009aca:	dd33      	ble.n	8009b34 <_dtoa_r+0x36c>
 8009acc:	4bad      	ldr	r3, [pc, #692]	@ (8009d84 <_dtoa_r+0x5bc>)
 8009ace:	f007 020f 	and.w	r2, r7, #15
 8009ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ad6:	ed93 7b00 	vldr	d7, [r3]
 8009ada:	05f8      	lsls	r0, r7, #23
 8009adc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ae0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ae4:	d516      	bpl.n	8009b14 <_dtoa_r+0x34c>
 8009ae6:	4ba8      	ldr	r3, [pc, #672]	@ (8009d88 <_dtoa_r+0x5c0>)
 8009ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009af0:	f7f6 feac 	bl	800084c <__aeabi_ddiv>
 8009af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009af8:	f004 040f 	and.w	r4, r4, #15
 8009afc:	2603      	movs	r6, #3
 8009afe:	4da2      	ldr	r5, [pc, #648]	@ (8009d88 <_dtoa_r+0x5c0>)
 8009b00:	b954      	cbnz	r4, 8009b18 <_dtoa_r+0x350>
 8009b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b0a:	f7f6 fe9f 	bl	800084c <__aeabi_ddiv>
 8009b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b12:	e028      	b.n	8009b66 <_dtoa_r+0x39e>
 8009b14:	2602      	movs	r6, #2
 8009b16:	e7f2      	b.n	8009afe <_dtoa_r+0x336>
 8009b18:	07e1      	lsls	r1, r4, #31
 8009b1a:	d508      	bpl.n	8009b2e <_dtoa_r+0x366>
 8009b1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b24:	f7f6 fd68 	bl	80005f8 <__aeabi_dmul>
 8009b28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b2c:	3601      	adds	r6, #1
 8009b2e:	1064      	asrs	r4, r4, #1
 8009b30:	3508      	adds	r5, #8
 8009b32:	e7e5      	b.n	8009b00 <_dtoa_r+0x338>
 8009b34:	f000 80d2 	beq.w	8009cdc <_dtoa_r+0x514>
 8009b38:	427c      	negs	r4, r7
 8009b3a:	4b92      	ldr	r3, [pc, #584]	@ (8009d84 <_dtoa_r+0x5bc>)
 8009b3c:	4d92      	ldr	r5, [pc, #584]	@ (8009d88 <_dtoa_r+0x5c0>)
 8009b3e:	f004 020f 	and.w	r2, r4, #15
 8009b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b4e:	f7f6 fd53 	bl	80005f8 <__aeabi_dmul>
 8009b52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b56:	1124      	asrs	r4, r4, #4
 8009b58:	2300      	movs	r3, #0
 8009b5a:	2602      	movs	r6, #2
 8009b5c:	2c00      	cmp	r4, #0
 8009b5e:	f040 80b2 	bne.w	8009cc6 <_dtoa_r+0x4fe>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1d3      	bne.n	8009b0e <_dtoa_r+0x346>
 8009b66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80b7 	beq.w	8009ce0 <_dtoa_r+0x518>
 8009b72:	4b86      	ldr	r3, [pc, #536]	@ (8009d8c <_dtoa_r+0x5c4>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	4620      	mov	r0, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	f7f6 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	f000 80ae 	beq.w	8009ce0 <_dtoa_r+0x518>
 8009b84:	9b07      	ldr	r3, [sp, #28]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 80aa 	beq.w	8009ce0 <_dtoa_r+0x518>
 8009b8c:	9b00      	ldr	r3, [sp, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	dd37      	ble.n	8009c02 <_dtoa_r+0x43a>
 8009b92:	1e7b      	subs	r3, r7, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	4620      	mov	r0, r4
 8009b98:	4b7d      	ldr	r3, [pc, #500]	@ (8009d90 <_dtoa_r+0x5c8>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	f7f6 fd2b 	bl	80005f8 <__aeabi_dmul>
 8009ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ba6:	9c00      	ldr	r4, [sp, #0]
 8009ba8:	3601      	adds	r6, #1
 8009baa:	4630      	mov	r0, r6
 8009bac:	f7f6 fcba 	bl	8000524 <__aeabi_i2d>
 8009bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bb4:	f7f6 fd20 	bl	80005f8 <__aeabi_dmul>
 8009bb8:	4b76      	ldr	r3, [pc, #472]	@ (8009d94 <_dtoa_r+0x5cc>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f7f6 fb66 	bl	800028c <__adddf3>
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009bc6:	2c00      	cmp	r4, #0
 8009bc8:	f040 808d 	bne.w	8009ce6 <_dtoa_r+0x51e>
 8009bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bd0:	4b71      	ldr	r3, [pc, #452]	@ (8009d98 <_dtoa_r+0x5d0>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f7f6 fb58 	bl	8000288 <__aeabi_dsub>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009be0:	462a      	mov	r2, r5
 8009be2:	4633      	mov	r3, r6
 8009be4:	f7f6 ff98 	bl	8000b18 <__aeabi_dcmpgt>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	f040 828b 	bne.w	800a104 <_dtoa_r+0x93c>
 8009bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bf2:	462a      	mov	r2, r5
 8009bf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009bf8:	f7f6 ff70 	bl	8000adc <__aeabi_dcmplt>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	f040 8128 	bne.w	8009e52 <_dtoa_r+0x68a>
 8009c02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009c06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009c0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f2c0 815a 	blt.w	8009ec6 <_dtoa_r+0x6fe>
 8009c12:	2f0e      	cmp	r7, #14
 8009c14:	f300 8157 	bgt.w	8009ec6 <_dtoa_r+0x6fe>
 8009c18:	4b5a      	ldr	r3, [pc, #360]	@ (8009d84 <_dtoa_r+0x5bc>)
 8009c1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c1e:	ed93 7b00 	vldr	d7, [r3]
 8009c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	ed8d 7b00 	vstr	d7, [sp]
 8009c2a:	da03      	bge.n	8009c34 <_dtoa_r+0x46c>
 8009c2c:	9b07      	ldr	r3, [sp, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f340 8101 	ble.w	8009e36 <_dtoa_r+0x66e>
 8009c34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009c38:	4656      	mov	r6, sl
 8009c3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	f7f6 fe03 	bl	800084c <__aeabi_ddiv>
 8009c46:	f7f6 ff87 	bl	8000b58 <__aeabi_d2iz>
 8009c4a:	4680      	mov	r8, r0
 8009c4c:	f7f6 fc6a 	bl	8000524 <__aeabi_i2d>
 8009c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c54:	f7f6 fcd0 	bl	80005f8 <__aeabi_dmul>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009c64:	f7f6 fb10 	bl	8000288 <__aeabi_dsub>
 8009c68:	f806 4b01 	strb.w	r4, [r6], #1
 8009c6c:	9d07      	ldr	r5, [sp, #28]
 8009c6e:	eba6 040a 	sub.w	r4, r6, sl
 8009c72:	42a5      	cmp	r5, r4
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	f040 8117 	bne.w	8009eaa <_dtoa_r+0x6e2>
 8009c7c:	f7f6 fb06 	bl	800028c <__adddf3>
 8009c80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c84:	4604      	mov	r4, r0
 8009c86:	460d      	mov	r5, r1
 8009c88:	f7f6 ff46 	bl	8000b18 <__aeabi_dcmpgt>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f040 80f9 	bne.w	8009e84 <_dtoa_r+0x6bc>
 8009c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c96:	4620      	mov	r0, r4
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f7f6 ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c9e:	b118      	cbz	r0, 8009ca8 <_dtoa_r+0x4e0>
 8009ca0:	f018 0f01 	tst.w	r8, #1
 8009ca4:	f040 80ee 	bne.w	8009e84 <_dtoa_r+0x6bc>
 8009ca8:	4649      	mov	r1, r9
 8009caa:	4658      	mov	r0, fp
 8009cac:	f000 ffdc 	bl	800ac68 <_Bfree>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	7033      	strb	r3, [r6, #0]
 8009cb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009cb6:	3701      	adds	r7, #1
 8009cb8:	601f      	str	r7, [r3, #0]
 8009cba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 831d 	beq.w	800a2fc <_dtoa_r+0xb34>
 8009cc2:	601e      	str	r6, [r3, #0]
 8009cc4:	e31a      	b.n	800a2fc <_dtoa_r+0xb34>
 8009cc6:	07e2      	lsls	r2, r4, #31
 8009cc8:	d505      	bpl.n	8009cd6 <_dtoa_r+0x50e>
 8009cca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cce:	f7f6 fc93 	bl	80005f8 <__aeabi_dmul>
 8009cd2:	3601      	adds	r6, #1
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	1064      	asrs	r4, r4, #1
 8009cd8:	3508      	adds	r5, #8
 8009cda:	e73f      	b.n	8009b5c <_dtoa_r+0x394>
 8009cdc:	2602      	movs	r6, #2
 8009cde:	e742      	b.n	8009b66 <_dtoa_r+0x39e>
 8009ce0:	9c07      	ldr	r4, [sp, #28]
 8009ce2:	9704      	str	r7, [sp, #16]
 8009ce4:	e761      	b.n	8009baa <_dtoa_r+0x3e2>
 8009ce6:	4b27      	ldr	r3, [pc, #156]	@ (8009d84 <_dtoa_r+0x5bc>)
 8009ce8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009cea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009cee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cf2:	4454      	add	r4, sl
 8009cf4:	2900      	cmp	r1, #0
 8009cf6:	d053      	beq.n	8009da0 <_dtoa_r+0x5d8>
 8009cf8:	4928      	ldr	r1, [pc, #160]	@ (8009d9c <_dtoa_r+0x5d4>)
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	f7f6 fda6 	bl	800084c <__aeabi_ddiv>
 8009d00:	4633      	mov	r3, r6
 8009d02:	462a      	mov	r2, r5
 8009d04:	f7f6 fac0 	bl	8000288 <__aeabi_dsub>
 8009d08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d0c:	4656      	mov	r6, sl
 8009d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d12:	f7f6 ff21 	bl	8000b58 <__aeabi_d2iz>
 8009d16:	4605      	mov	r5, r0
 8009d18:	f7f6 fc04 	bl	8000524 <__aeabi_i2d>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d24:	f7f6 fab0 	bl	8000288 <__aeabi_dsub>
 8009d28:	3530      	adds	r5, #48	@ 0x30
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d32:	f806 5b01 	strb.w	r5, [r6], #1
 8009d36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d3a:	f7f6 fecf 	bl	8000adc <__aeabi_dcmplt>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d171      	bne.n	8009e26 <_dtoa_r+0x65e>
 8009d42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d46:	4911      	ldr	r1, [pc, #68]	@ (8009d8c <_dtoa_r+0x5c4>)
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f7f6 fa9d 	bl	8000288 <__aeabi_dsub>
 8009d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d52:	f7f6 fec3 	bl	8000adc <__aeabi_dcmplt>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f040 8095 	bne.w	8009e86 <_dtoa_r+0x6be>
 8009d5c:	42a6      	cmp	r6, r4
 8009d5e:	f43f af50 	beq.w	8009c02 <_dtoa_r+0x43a>
 8009d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d66:	4b0a      	ldr	r3, [pc, #40]	@ (8009d90 <_dtoa_r+0x5c8>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f7f6 fc45 	bl	80005f8 <__aeabi_dmul>
 8009d6e:	4b08      	ldr	r3, [pc, #32]	@ (8009d90 <_dtoa_r+0x5c8>)
 8009d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d74:	2200      	movs	r2, #0
 8009d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d7a:	f7f6 fc3d 	bl	80005f8 <__aeabi_dmul>
 8009d7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d82:	e7c4      	b.n	8009d0e <_dtoa_r+0x546>
 8009d84:	0800bfd8 	.word	0x0800bfd8
 8009d88:	0800bfb0 	.word	0x0800bfb0
 8009d8c:	3ff00000 	.word	0x3ff00000
 8009d90:	40240000 	.word	0x40240000
 8009d94:	401c0000 	.word	0x401c0000
 8009d98:	40140000 	.word	0x40140000
 8009d9c:	3fe00000 	.word	0x3fe00000
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	f7f6 fc28 	bl	80005f8 <__aeabi_dmul>
 8009da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009dac:	9415      	str	r4, [sp, #84]	@ 0x54
 8009dae:	4656      	mov	r6, sl
 8009db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009db4:	f7f6 fed0 	bl	8000b58 <__aeabi_d2iz>
 8009db8:	4605      	mov	r5, r0
 8009dba:	f7f6 fbb3 	bl	8000524 <__aeabi_i2d>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dc6:	f7f6 fa5f 	bl	8000288 <__aeabi_dsub>
 8009dca:	3530      	adds	r5, #48	@ 0x30
 8009dcc:	f806 5b01 	strb.w	r5, [r6], #1
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	42a6      	cmp	r6, r4
 8009dd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dda:	f04f 0200 	mov.w	r2, #0
 8009dde:	d124      	bne.n	8009e2a <_dtoa_r+0x662>
 8009de0:	4bac      	ldr	r3, [pc, #688]	@ (800a094 <_dtoa_r+0x8cc>)
 8009de2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009de6:	f7f6 fa51 	bl	800028c <__adddf3>
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009df2:	f7f6 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d145      	bne.n	8009e86 <_dtoa_r+0x6be>
 8009dfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009dfe:	49a5      	ldr	r1, [pc, #660]	@ (800a094 <_dtoa_r+0x8cc>)
 8009e00:	2000      	movs	r0, #0
 8009e02:	f7f6 fa41 	bl	8000288 <__aeabi_dsub>
 8009e06:	4602      	mov	r2, r0
 8009e08:	460b      	mov	r3, r1
 8009e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e0e:	f7f6 fe65 	bl	8000adc <__aeabi_dcmplt>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f43f aef5 	beq.w	8009c02 <_dtoa_r+0x43a>
 8009e18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009e1a:	1e73      	subs	r3, r6, #1
 8009e1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e22:	2b30      	cmp	r3, #48	@ 0x30
 8009e24:	d0f8      	beq.n	8009e18 <_dtoa_r+0x650>
 8009e26:	9f04      	ldr	r7, [sp, #16]
 8009e28:	e73e      	b.n	8009ca8 <_dtoa_r+0x4e0>
 8009e2a:	4b9b      	ldr	r3, [pc, #620]	@ (800a098 <_dtoa_r+0x8d0>)
 8009e2c:	f7f6 fbe4 	bl	80005f8 <__aeabi_dmul>
 8009e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e34:	e7bc      	b.n	8009db0 <_dtoa_r+0x5e8>
 8009e36:	d10c      	bne.n	8009e52 <_dtoa_r+0x68a>
 8009e38:	4b98      	ldr	r3, [pc, #608]	@ (800a09c <_dtoa_r+0x8d4>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e40:	f7f6 fbda 	bl	80005f8 <__aeabi_dmul>
 8009e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e48:	f7f6 fe5c 	bl	8000b04 <__aeabi_dcmpge>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	f000 8157 	beq.w	800a100 <_dtoa_r+0x938>
 8009e52:	2400      	movs	r4, #0
 8009e54:	4625      	mov	r5, r4
 8009e56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e58:	43db      	mvns	r3, r3
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	4656      	mov	r6, sl
 8009e5e:	2700      	movs	r7, #0
 8009e60:	4621      	mov	r1, r4
 8009e62:	4658      	mov	r0, fp
 8009e64:	f000 ff00 	bl	800ac68 <_Bfree>
 8009e68:	2d00      	cmp	r5, #0
 8009e6a:	d0dc      	beq.n	8009e26 <_dtoa_r+0x65e>
 8009e6c:	b12f      	cbz	r7, 8009e7a <_dtoa_r+0x6b2>
 8009e6e:	42af      	cmp	r7, r5
 8009e70:	d003      	beq.n	8009e7a <_dtoa_r+0x6b2>
 8009e72:	4639      	mov	r1, r7
 8009e74:	4658      	mov	r0, fp
 8009e76:	f000 fef7 	bl	800ac68 <_Bfree>
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	4658      	mov	r0, fp
 8009e7e:	f000 fef3 	bl	800ac68 <_Bfree>
 8009e82:	e7d0      	b.n	8009e26 <_dtoa_r+0x65e>
 8009e84:	9704      	str	r7, [sp, #16]
 8009e86:	4633      	mov	r3, r6
 8009e88:	461e      	mov	r6, r3
 8009e8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e8e:	2a39      	cmp	r2, #57	@ 0x39
 8009e90:	d107      	bne.n	8009ea2 <_dtoa_r+0x6da>
 8009e92:	459a      	cmp	sl, r3
 8009e94:	d1f8      	bne.n	8009e88 <_dtoa_r+0x6c0>
 8009e96:	9a04      	ldr	r2, [sp, #16]
 8009e98:	3201      	adds	r2, #1
 8009e9a:	9204      	str	r2, [sp, #16]
 8009e9c:	2230      	movs	r2, #48	@ 0x30
 8009e9e:	f88a 2000 	strb.w	r2, [sl]
 8009ea2:	781a      	ldrb	r2, [r3, #0]
 8009ea4:	3201      	adds	r2, #1
 8009ea6:	701a      	strb	r2, [r3, #0]
 8009ea8:	e7bd      	b.n	8009e26 <_dtoa_r+0x65e>
 8009eaa:	4b7b      	ldr	r3, [pc, #492]	@ (800a098 <_dtoa_r+0x8d0>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	f7f6 fba3 	bl	80005f8 <__aeabi_dmul>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	460d      	mov	r5, r1
 8009eba:	f7f6 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f43f aebb 	beq.w	8009c3a <_dtoa_r+0x472>
 8009ec4:	e6f0      	b.n	8009ca8 <_dtoa_r+0x4e0>
 8009ec6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009ec8:	2a00      	cmp	r2, #0
 8009eca:	f000 80db 	beq.w	800a084 <_dtoa_r+0x8bc>
 8009ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ed0:	2a01      	cmp	r2, #1
 8009ed2:	f300 80bf 	bgt.w	800a054 <_dtoa_r+0x88c>
 8009ed6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009ed8:	2a00      	cmp	r2, #0
 8009eda:	f000 80b7 	beq.w	800a04c <_dtoa_r+0x884>
 8009ede:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009ee2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ee4:	4646      	mov	r6, r8
 8009ee6:	9a08      	ldr	r2, [sp, #32]
 8009ee8:	2101      	movs	r1, #1
 8009eea:	441a      	add	r2, r3
 8009eec:	4658      	mov	r0, fp
 8009eee:	4498      	add	r8, r3
 8009ef0:	9208      	str	r2, [sp, #32]
 8009ef2:	f000 ffb7 	bl	800ae64 <__i2b>
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	b15e      	cbz	r6, 8009f12 <_dtoa_r+0x74a>
 8009efa:	9b08      	ldr	r3, [sp, #32]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	dd08      	ble.n	8009f12 <_dtoa_r+0x74a>
 8009f00:	42b3      	cmp	r3, r6
 8009f02:	9a08      	ldr	r2, [sp, #32]
 8009f04:	bfa8      	it	ge
 8009f06:	4633      	movge	r3, r6
 8009f08:	eba8 0803 	sub.w	r8, r8, r3
 8009f0c:	1af6      	subs	r6, r6, r3
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	9308      	str	r3, [sp, #32]
 8009f12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f14:	b1f3      	cbz	r3, 8009f54 <_dtoa_r+0x78c>
 8009f16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 80b7 	beq.w	800a08c <_dtoa_r+0x8c4>
 8009f1e:	b18c      	cbz	r4, 8009f44 <_dtoa_r+0x77c>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4622      	mov	r2, r4
 8009f24:	4658      	mov	r0, fp
 8009f26:	f001 f85d 	bl	800afe4 <__pow5mult>
 8009f2a:	464a      	mov	r2, r9
 8009f2c:	4601      	mov	r1, r0
 8009f2e:	4605      	mov	r5, r0
 8009f30:	4658      	mov	r0, fp
 8009f32:	f000 ffad 	bl	800ae90 <__multiply>
 8009f36:	4649      	mov	r1, r9
 8009f38:	9004      	str	r0, [sp, #16]
 8009f3a:	4658      	mov	r0, fp
 8009f3c:	f000 fe94 	bl	800ac68 <_Bfree>
 8009f40:	9b04      	ldr	r3, [sp, #16]
 8009f42:	4699      	mov	r9, r3
 8009f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f46:	1b1a      	subs	r2, r3, r4
 8009f48:	d004      	beq.n	8009f54 <_dtoa_r+0x78c>
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	4658      	mov	r0, fp
 8009f4e:	f001 f849 	bl	800afe4 <__pow5mult>
 8009f52:	4681      	mov	r9, r0
 8009f54:	2101      	movs	r1, #1
 8009f56:	4658      	mov	r0, fp
 8009f58:	f000 ff84 	bl	800ae64 <__i2b>
 8009f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f5e:	4604      	mov	r4, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 81cf 	beq.w	800a304 <_dtoa_r+0xb3c>
 8009f66:	461a      	mov	r2, r3
 8009f68:	4601      	mov	r1, r0
 8009f6a:	4658      	mov	r0, fp
 8009f6c:	f001 f83a 	bl	800afe4 <__pow5mult>
 8009f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	4604      	mov	r4, r0
 8009f76:	f300 8095 	bgt.w	800a0a4 <_dtoa_r+0x8dc>
 8009f7a:	9b02      	ldr	r3, [sp, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f040 8087 	bne.w	800a090 <_dtoa_r+0x8c8>
 8009f82:	9b03      	ldr	r3, [sp, #12]
 8009f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f040 8089 	bne.w	800a0a0 <_dtoa_r+0x8d8>
 8009f8e:	9b03      	ldr	r3, [sp, #12]
 8009f90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f94:	0d1b      	lsrs	r3, r3, #20
 8009f96:	051b      	lsls	r3, r3, #20
 8009f98:	b12b      	cbz	r3, 8009fa6 <_dtoa_r+0x7de>
 8009f9a:	9b08      	ldr	r3, [sp, #32]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	9308      	str	r3, [sp, #32]
 8009fa0:	f108 0801 	add.w	r8, r8, #1
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 81b0 	beq.w	800a310 <_dtoa_r+0xb48>
 8009fb0:	6923      	ldr	r3, [r4, #16]
 8009fb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fb6:	6918      	ldr	r0, [r3, #16]
 8009fb8:	f000 ff08 	bl	800adcc <__hi0bits>
 8009fbc:	f1c0 0020 	rsb	r0, r0, #32
 8009fc0:	9b08      	ldr	r3, [sp, #32]
 8009fc2:	4418      	add	r0, r3
 8009fc4:	f010 001f 	ands.w	r0, r0, #31
 8009fc8:	d077      	beq.n	800a0ba <_dtoa_r+0x8f2>
 8009fca:	f1c0 0320 	rsb	r3, r0, #32
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	dd6b      	ble.n	800a0aa <_dtoa_r+0x8e2>
 8009fd2:	9b08      	ldr	r3, [sp, #32]
 8009fd4:	f1c0 001c 	rsb	r0, r0, #28
 8009fd8:	4403      	add	r3, r0
 8009fda:	4480      	add	r8, r0
 8009fdc:	4406      	add	r6, r0
 8009fde:	9308      	str	r3, [sp, #32]
 8009fe0:	f1b8 0f00 	cmp.w	r8, #0
 8009fe4:	dd05      	ble.n	8009ff2 <_dtoa_r+0x82a>
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	4642      	mov	r2, r8
 8009fea:	4658      	mov	r0, fp
 8009fec:	f001 f854 	bl	800b098 <__lshift>
 8009ff0:	4681      	mov	r9, r0
 8009ff2:	9b08      	ldr	r3, [sp, #32]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	dd05      	ble.n	800a004 <_dtoa_r+0x83c>
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	4658      	mov	r0, fp
 8009ffe:	f001 f84b 	bl	800b098 <__lshift>
 800a002:	4604      	mov	r4, r0
 800a004:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a006:	2b00      	cmp	r3, #0
 800a008:	d059      	beq.n	800a0be <_dtoa_r+0x8f6>
 800a00a:	4621      	mov	r1, r4
 800a00c:	4648      	mov	r0, r9
 800a00e:	f001 f8af 	bl	800b170 <__mcmp>
 800a012:	2800      	cmp	r0, #0
 800a014:	da53      	bge.n	800a0be <_dtoa_r+0x8f6>
 800a016:	1e7b      	subs	r3, r7, #1
 800a018:	9304      	str	r3, [sp, #16]
 800a01a:	4649      	mov	r1, r9
 800a01c:	2300      	movs	r3, #0
 800a01e:	220a      	movs	r2, #10
 800a020:	4658      	mov	r0, fp
 800a022:	f000 fe43 	bl	800acac <__multadd>
 800a026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a028:	4681      	mov	r9, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f000 8172 	beq.w	800a314 <_dtoa_r+0xb4c>
 800a030:	2300      	movs	r3, #0
 800a032:	4629      	mov	r1, r5
 800a034:	220a      	movs	r2, #10
 800a036:	4658      	mov	r0, fp
 800a038:	f000 fe38 	bl	800acac <__multadd>
 800a03c:	9b00      	ldr	r3, [sp, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	4605      	mov	r5, r0
 800a042:	dc67      	bgt.n	800a114 <_dtoa_r+0x94c>
 800a044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a046:	2b02      	cmp	r3, #2
 800a048:	dc41      	bgt.n	800a0ce <_dtoa_r+0x906>
 800a04a:	e063      	b.n	800a114 <_dtoa_r+0x94c>
 800a04c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a04e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a052:	e746      	b.n	8009ee2 <_dtoa_r+0x71a>
 800a054:	9b07      	ldr	r3, [sp, #28]
 800a056:	1e5c      	subs	r4, r3, #1
 800a058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a05a:	42a3      	cmp	r3, r4
 800a05c:	bfbf      	itttt	lt
 800a05e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a060:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a062:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a064:	1ae3      	sublt	r3, r4, r3
 800a066:	bfb4      	ite	lt
 800a068:	18d2      	addlt	r2, r2, r3
 800a06a:	1b1c      	subge	r4, r3, r4
 800a06c:	9b07      	ldr	r3, [sp, #28]
 800a06e:	bfbc      	itt	lt
 800a070:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a072:	2400      	movlt	r4, #0
 800a074:	2b00      	cmp	r3, #0
 800a076:	bfb5      	itete	lt
 800a078:	eba8 0603 	sublt.w	r6, r8, r3
 800a07c:	9b07      	ldrge	r3, [sp, #28]
 800a07e:	2300      	movlt	r3, #0
 800a080:	4646      	movge	r6, r8
 800a082:	e730      	b.n	8009ee6 <_dtoa_r+0x71e>
 800a084:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a086:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a088:	4646      	mov	r6, r8
 800a08a:	e735      	b.n	8009ef8 <_dtoa_r+0x730>
 800a08c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a08e:	e75c      	b.n	8009f4a <_dtoa_r+0x782>
 800a090:	2300      	movs	r3, #0
 800a092:	e788      	b.n	8009fa6 <_dtoa_r+0x7de>
 800a094:	3fe00000 	.word	0x3fe00000
 800a098:	40240000 	.word	0x40240000
 800a09c:	40140000 	.word	0x40140000
 800a0a0:	9b02      	ldr	r3, [sp, #8]
 800a0a2:	e780      	b.n	8009fa6 <_dtoa_r+0x7de>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0a8:	e782      	b.n	8009fb0 <_dtoa_r+0x7e8>
 800a0aa:	d099      	beq.n	8009fe0 <_dtoa_r+0x818>
 800a0ac:	9a08      	ldr	r2, [sp, #32]
 800a0ae:	331c      	adds	r3, #28
 800a0b0:	441a      	add	r2, r3
 800a0b2:	4498      	add	r8, r3
 800a0b4:	441e      	add	r6, r3
 800a0b6:	9208      	str	r2, [sp, #32]
 800a0b8:	e792      	b.n	8009fe0 <_dtoa_r+0x818>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	e7f6      	b.n	800a0ac <_dtoa_r+0x8e4>
 800a0be:	9b07      	ldr	r3, [sp, #28]
 800a0c0:	9704      	str	r7, [sp, #16]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dc20      	bgt.n	800a108 <_dtoa_r+0x940>
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	dd1e      	ble.n	800a10c <_dtoa_r+0x944>
 800a0ce:	9b00      	ldr	r3, [sp, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f47f aec0 	bne.w	8009e56 <_dtoa_r+0x68e>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	2205      	movs	r2, #5
 800a0da:	4658      	mov	r0, fp
 800a0dc:	f000 fde6 	bl	800acac <__multadd>
 800a0e0:	4601      	mov	r1, r0
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4648      	mov	r0, r9
 800a0e6:	f001 f843 	bl	800b170 <__mcmp>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	f77f aeb3 	ble.w	8009e56 <_dtoa_r+0x68e>
 800a0f0:	4656      	mov	r6, sl
 800a0f2:	2331      	movs	r3, #49	@ 0x31
 800a0f4:	f806 3b01 	strb.w	r3, [r6], #1
 800a0f8:	9b04      	ldr	r3, [sp, #16]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	e6ae      	b.n	8009e5e <_dtoa_r+0x696>
 800a100:	9c07      	ldr	r4, [sp, #28]
 800a102:	9704      	str	r7, [sp, #16]
 800a104:	4625      	mov	r5, r4
 800a106:	e7f3      	b.n	800a0f0 <_dtoa_r+0x928>
 800a108:	9b07      	ldr	r3, [sp, #28]
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f000 8104 	beq.w	800a31c <_dtoa_r+0xb54>
 800a114:	2e00      	cmp	r6, #0
 800a116:	dd05      	ble.n	800a124 <_dtoa_r+0x95c>
 800a118:	4629      	mov	r1, r5
 800a11a:	4632      	mov	r2, r6
 800a11c:	4658      	mov	r0, fp
 800a11e:	f000 ffbb 	bl	800b098 <__lshift>
 800a122:	4605      	mov	r5, r0
 800a124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a126:	2b00      	cmp	r3, #0
 800a128:	d05a      	beq.n	800a1e0 <_dtoa_r+0xa18>
 800a12a:	6869      	ldr	r1, [r5, #4]
 800a12c:	4658      	mov	r0, fp
 800a12e:	f000 fd5b 	bl	800abe8 <_Balloc>
 800a132:	4606      	mov	r6, r0
 800a134:	b928      	cbnz	r0, 800a142 <_dtoa_r+0x97a>
 800a136:	4b84      	ldr	r3, [pc, #528]	@ (800a348 <_dtoa_r+0xb80>)
 800a138:	4602      	mov	r2, r0
 800a13a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a13e:	f7ff bb5a 	b.w	80097f6 <_dtoa_r+0x2e>
 800a142:	692a      	ldr	r2, [r5, #16]
 800a144:	3202      	adds	r2, #2
 800a146:	0092      	lsls	r2, r2, #2
 800a148:	f105 010c 	add.w	r1, r5, #12
 800a14c:	300c      	adds	r0, #12
 800a14e:	f7ff fa9a 	bl	8009686 <memcpy>
 800a152:	2201      	movs	r2, #1
 800a154:	4631      	mov	r1, r6
 800a156:	4658      	mov	r0, fp
 800a158:	f000 ff9e 	bl	800b098 <__lshift>
 800a15c:	f10a 0301 	add.w	r3, sl, #1
 800a160:	9307      	str	r3, [sp, #28]
 800a162:	9b00      	ldr	r3, [sp, #0]
 800a164:	4453      	add	r3, sl
 800a166:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a168:	9b02      	ldr	r3, [sp, #8]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	462f      	mov	r7, r5
 800a170:	930a      	str	r3, [sp, #40]	@ 0x28
 800a172:	4605      	mov	r5, r0
 800a174:	9b07      	ldr	r3, [sp, #28]
 800a176:	4621      	mov	r1, r4
 800a178:	3b01      	subs	r3, #1
 800a17a:	4648      	mov	r0, r9
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	f7ff fa9b 	bl	80096b8 <quorem>
 800a182:	4639      	mov	r1, r7
 800a184:	9002      	str	r0, [sp, #8]
 800a186:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a18a:	4648      	mov	r0, r9
 800a18c:	f000 fff0 	bl	800b170 <__mcmp>
 800a190:	462a      	mov	r2, r5
 800a192:	9008      	str	r0, [sp, #32]
 800a194:	4621      	mov	r1, r4
 800a196:	4658      	mov	r0, fp
 800a198:	f001 f806 	bl	800b1a8 <__mdiff>
 800a19c:	68c2      	ldr	r2, [r0, #12]
 800a19e:	4606      	mov	r6, r0
 800a1a0:	bb02      	cbnz	r2, 800a1e4 <_dtoa_r+0xa1c>
 800a1a2:	4601      	mov	r1, r0
 800a1a4:	4648      	mov	r0, r9
 800a1a6:	f000 ffe3 	bl	800b170 <__mcmp>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	4658      	mov	r0, fp
 800a1b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1b2:	f000 fd59 	bl	800ac68 <_Bfree>
 800a1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1ba:	9e07      	ldr	r6, [sp, #28]
 800a1bc:	ea43 0102 	orr.w	r1, r3, r2
 800a1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1c2:	4319      	orrs	r1, r3
 800a1c4:	d110      	bne.n	800a1e8 <_dtoa_r+0xa20>
 800a1c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a1ca:	d029      	beq.n	800a220 <_dtoa_r+0xa58>
 800a1cc:	9b08      	ldr	r3, [sp, #32]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	dd02      	ble.n	800a1d8 <_dtoa_r+0xa10>
 800a1d2:	9b02      	ldr	r3, [sp, #8]
 800a1d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a1d8:	9b00      	ldr	r3, [sp, #0]
 800a1da:	f883 8000 	strb.w	r8, [r3]
 800a1de:	e63f      	b.n	8009e60 <_dtoa_r+0x698>
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	e7bb      	b.n	800a15c <_dtoa_r+0x994>
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	e7e1      	b.n	800a1ac <_dtoa_r+0x9e4>
 800a1e8:	9b08      	ldr	r3, [sp, #32]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	db04      	blt.n	800a1f8 <_dtoa_r+0xa30>
 800a1ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a1f4:	430b      	orrs	r3, r1
 800a1f6:	d120      	bne.n	800a23a <_dtoa_r+0xa72>
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	dded      	ble.n	800a1d8 <_dtoa_r+0xa10>
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	2201      	movs	r2, #1
 800a200:	4658      	mov	r0, fp
 800a202:	f000 ff49 	bl	800b098 <__lshift>
 800a206:	4621      	mov	r1, r4
 800a208:	4681      	mov	r9, r0
 800a20a:	f000 ffb1 	bl	800b170 <__mcmp>
 800a20e:	2800      	cmp	r0, #0
 800a210:	dc03      	bgt.n	800a21a <_dtoa_r+0xa52>
 800a212:	d1e1      	bne.n	800a1d8 <_dtoa_r+0xa10>
 800a214:	f018 0f01 	tst.w	r8, #1
 800a218:	d0de      	beq.n	800a1d8 <_dtoa_r+0xa10>
 800a21a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a21e:	d1d8      	bne.n	800a1d2 <_dtoa_r+0xa0a>
 800a220:	9a00      	ldr	r2, [sp, #0]
 800a222:	2339      	movs	r3, #57	@ 0x39
 800a224:	7013      	strb	r3, [r2, #0]
 800a226:	4633      	mov	r3, r6
 800a228:	461e      	mov	r6, r3
 800a22a:	3b01      	subs	r3, #1
 800a22c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a230:	2a39      	cmp	r2, #57	@ 0x39
 800a232:	d052      	beq.n	800a2da <_dtoa_r+0xb12>
 800a234:	3201      	adds	r2, #1
 800a236:	701a      	strb	r2, [r3, #0]
 800a238:	e612      	b.n	8009e60 <_dtoa_r+0x698>
 800a23a:	2a00      	cmp	r2, #0
 800a23c:	dd07      	ble.n	800a24e <_dtoa_r+0xa86>
 800a23e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a242:	d0ed      	beq.n	800a220 <_dtoa_r+0xa58>
 800a244:	9a00      	ldr	r2, [sp, #0]
 800a246:	f108 0301 	add.w	r3, r8, #1
 800a24a:	7013      	strb	r3, [r2, #0]
 800a24c:	e608      	b.n	8009e60 <_dtoa_r+0x698>
 800a24e:	9b07      	ldr	r3, [sp, #28]
 800a250:	9a07      	ldr	r2, [sp, #28]
 800a252:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a258:	4293      	cmp	r3, r2
 800a25a:	d028      	beq.n	800a2ae <_dtoa_r+0xae6>
 800a25c:	4649      	mov	r1, r9
 800a25e:	2300      	movs	r3, #0
 800a260:	220a      	movs	r2, #10
 800a262:	4658      	mov	r0, fp
 800a264:	f000 fd22 	bl	800acac <__multadd>
 800a268:	42af      	cmp	r7, r5
 800a26a:	4681      	mov	r9, r0
 800a26c:	f04f 0300 	mov.w	r3, #0
 800a270:	f04f 020a 	mov.w	r2, #10
 800a274:	4639      	mov	r1, r7
 800a276:	4658      	mov	r0, fp
 800a278:	d107      	bne.n	800a28a <_dtoa_r+0xac2>
 800a27a:	f000 fd17 	bl	800acac <__multadd>
 800a27e:	4607      	mov	r7, r0
 800a280:	4605      	mov	r5, r0
 800a282:	9b07      	ldr	r3, [sp, #28]
 800a284:	3301      	adds	r3, #1
 800a286:	9307      	str	r3, [sp, #28]
 800a288:	e774      	b.n	800a174 <_dtoa_r+0x9ac>
 800a28a:	f000 fd0f 	bl	800acac <__multadd>
 800a28e:	4629      	mov	r1, r5
 800a290:	4607      	mov	r7, r0
 800a292:	2300      	movs	r3, #0
 800a294:	220a      	movs	r2, #10
 800a296:	4658      	mov	r0, fp
 800a298:	f000 fd08 	bl	800acac <__multadd>
 800a29c:	4605      	mov	r5, r0
 800a29e:	e7f0      	b.n	800a282 <_dtoa_r+0xaba>
 800a2a0:	9b00      	ldr	r3, [sp, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	bfcc      	ite	gt
 800a2a6:	461e      	movgt	r6, r3
 800a2a8:	2601      	movle	r6, #1
 800a2aa:	4456      	add	r6, sl
 800a2ac:	2700      	movs	r7, #0
 800a2ae:	4649      	mov	r1, r9
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	4658      	mov	r0, fp
 800a2b4:	f000 fef0 	bl	800b098 <__lshift>
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	4681      	mov	r9, r0
 800a2bc:	f000 ff58 	bl	800b170 <__mcmp>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	dcb0      	bgt.n	800a226 <_dtoa_r+0xa5e>
 800a2c4:	d102      	bne.n	800a2cc <_dtoa_r+0xb04>
 800a2c6:	f018 0f01 	tst.w	r8, #1
 800a2ca:	d1ac      	bne.n	800a226 <_dtoa_r+0xa5e>
 800a2cc:	4633      	mov	r3, r6
 800a2ce:	461e      	mov	r6, r3
 800a2d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2d4:	2a30      	cmp	r2, #48	@ 0x30
 800a2d6:	d0fa      	beq.n	800a2ce <_dtoa_r+0xb06>
 800a2d8:	e5c2      	b.n	8009e60 <_dtoa_r+0x698>
 800a2da:	459a      	cmp	sl, r3
 800a2dc:	d1a4      	bne.n	800a228 <_dtoa_r+0xa60>
 800a2de:	9b04      	ldr	r3, [sp, #16]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	2331      	movs	r3, #49	@ 0x31
 800a2e6:	f88a 3000 	strb.w	r3, [sl]
 800a2ea:	e5b9      	b.n	8009e60 <_dtoa_r+0x698>
 800a2ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a34c <_dtoa_r+0xb84>
 800a2f2:	b11b      	cbz	r3, 800a2fc <_dtoa_r+0xb34>
 800a2f4:	f10a 0308 	add.w	r3, sl, #8
 800a2f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	b019      	add	sp, #100	@ 0x64
 800a300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a306:	2b01      	cmp	r3, #1
 800a308:	f77f ae37 	ble.w	8009f7a <_dtoa_r+0x7b2>
 800a30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a30e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a310:	2001      	movs	r0, #1
 800a312:	e655      	b.n	8009fc0 <_dtoa_r+0x7f8>
 800a314:	9b00      	ldr	r3, [sp, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	f77f aed6 	ble.w	800a0c8 <_dtoa_r+0x900>
 800a31c:	4656      	mov	r6, sl
 800a31e:	4621      	mov	r1, r4
 800a320:	4648      	mov	r0, r9
 800a322:	f7ff f9c9 	bl	80096b8 <quorem>
 800a326:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a32a:	f806 8b01 	strb.w	r8, [r6], #1
 800a32e:	9b00      	ldr	r3, [sp, #0]
 800a330:	eba6 020a 	sub.w	r2, r6, sl
 800a334:	4293      	cmp	r3, r2
 800a336:	ddb3      	ble.n	800a2a0 <_dtoa_r+0xad8>
 800a338:	4649      	mov	r1, r9
 800a33a:	2300      	movs	r3, #0
 800a33c:	220a      	movs	r2, #10
 800a33e:	4658      	mov	r0, fp
 800a340:	f000 fcb4 	bl	800acac <__multadd>
 800a344:	4681      	mov	r9, r0
 800a346:	e7ea      	b.n	800a31e <_dtoa_r+0xb56>
 800a348:	0800bed8 	.word	0x0800bed8
 800a34c:	0800be5c 	.word	0x0800be5c

0800a350 <_free_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4605      	mov	r5, r0
 800a354:	2900      	cmp	r1, #0
 800a356:	d041      	beq.n	800a3dc <_free_r+0x8c>
 800a358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a35c:	1f0c      	subs	r4, r1, #4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	bfb8      	it	lt
 800a362:	18e4      	addlt	r4, r4, r3
 800a364:	f000 fc34 	bl	800abd0 <__malloc_lock>
 800a368:	4a1d      	ldr	r2, [pc, #116]	@ (800a3e0 <_free_r+0x90>)
 800a36a:	6813      	ldr	r3, [r2, #0]
 800a36c:	b933      	cbnz	r3, 800a37c <_free_r+0x2c>
 800a36e:	6063      	str	r3, [r4, #4]
 800a370:	6014      	str	r4, [r2, #0]
 800a372:	4628      	mov	r0, r5
 800a374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a378:	f000 bc30 	b.w	800abdc <__malloc_unlock>
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d908      	bls.n	800a392 <_free_r+0x42>
 800a380:	6820      	ldr	r0, [r4, #0]
 800a382:	1821      	adds	r1, r4, r0
 800a384:	428b      	cmp	r3, r1
 800a386:	bf01      	itttt	eq
 800a388:	6819      	ldreq	r1, [r3, #0]
 800a38a:	685b      	ldreq	r3, [r3, #4]
 800a38c:	1809      	addeq	r1, r1, r0
 800a38e:	6021      	streq	r1, [r4, #0]
 800a390:	e7ed      	b.n	800a36e <_free_r+0x1e>
 800a392:	461a      	mov	r2, r3
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	b10b      	cbz	r3, 800a39c <_free_r+0x4c>
 800a398:	42a3      	cmp	r3, r4
 800a39a:	d9fa      	bls.n	800a392 <_free_r+0x42>
 800a39c:	6811      	ldr	r1, [r2, #0]
 800a39e:	1850      	adds	r0, r2, r1
 800a3a0:	42a0      	cmp	r0, r4
 800a3a2:	d10b      	bne.n	800a3bc <_free_r+0x6c>
 800a3a4:	6820      	ldr	r0, [r4, #0]
 800a3a6:	4401      	add	r1, r0
 800a3a8:	1850      	adds	r0, r2, r1
 800a3aa:	4283      	cmp	r3, r0
 800a3ac:	6011      	str	r1, [r2, #0]
 800a3ae:	d1e0      	bne.n	800a372 <_free_r+0x22>
 800a3b0:	6818      	ldr	r0, [r3, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	6053      	str	r3, [r2, #4]
 800a3b6:	4408      	add	r0, r1
 800a3b8:	6010      	str	r0, [r2, #0]
 800a3ba:	e7da      	b.n	800a372 <_free_r+0x22>
 800a3bc:	d902      	bls.n	800a3c4 <_free_r+0x74>
 800a3be:	230c      	movs	r3, #12
 800a3c0:	602b      	str	r3, [r5, #0]
 800a3c2:	e7d6      	b.n	800a372 <_free_r+0x22>
 800a3c4:	6820      	ldr	r0, [r4, #0]
 800a3c6:	1821      	adds	r1, r4, r0
 800a3c8:	428b      	cmp	r3, r1
 800a3ca:	bf04      	itt	eq
 800a3cc:	6819      	ldreq	r1, [r3, #0]
 800a3ce:	685b      	ldreq	r3, [r3, #4]
 800a3d0:	6063      	str	r3, [r4, #4]
 800a3d2:	bf04      	itt	eq
 800a3d4:	1809      	addeq	r1, r1, r0
 800a3d6:	6021      	streq	r1, [r4, #0]
 800a3d8:	6054      	str	r4, [r2, #4]
 800a3da:	e7ca      	b.n	800a372 <_free_r+0x22>
 800a3dc:	bd38      	pop	{r3, r4, r5, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000728 	.word	0x20000728

0800a3e4 <rshift>:
 800a3e4:	6903      	ldr	r3, [r0, #16]
 800a3e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3f2:	f100 0414 	add.w	r4, r0, #20
 800a3f6:	dd45      	ble.n	800a484 <rshift+0xa0>
 800a3f8:	f011 011f 	ands.w	r1, r1, #31
 800a3fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a400:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a404:	d10c      	bne.n	800a420 <rshift+0x3c>
 800a406:	f100 0710 	add.w	r7, r0, #16
 800a40a:	4629      	mov	r1, r5
 800a40c:	42b1      	cmp	r1, r6
 800a40e:	d334      	bcc.n	800a47a <rshift+0x96>
 800a410:	1a9b      	subs	r3, r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	1eea      	subs	r2, r5, #3
 800a416:	4296      	cmp	r6, r2
 800a418:	bf38      	it	cc
 800a41a:	2300      	movcc	r3, #0
 800a41c:	4423      	add	r3, r4
 800a41e:	e015      	b.n	800a44c <rshift+0x68>
 800a420:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a424:	f1c1 0820 	rsb	r8, r1, #32
 800a428:	40cf      	lsrs	r7, r1
 800a42a:	f105 0e04 	add.w	lr, r5, #4
 800a42e:	46a1      	mov	r9, r4
 800a430:	4576      	cmp	r6, lr
 800a432:	46f4      	mov	ip, lr
 800a434:	d815      	bhi.n	800a462 <rshift+0x7e>
 800a436:	1a9a      	subs	r2, r3, r2
 800a438:	0092      	lsls	r2, r2, #2
 800a43a:	3a04      	subs	r2, #4
 800a43c:	3501      	adds	r5, #1
 800a43e:	42ae      	cmp	r6, r5
 800a440:	bf38      	it	cc
 800a442:	2200      	movcc	r2, #0
 800a444:	18a3      	adds	r3, r4, r2
 800a446:	50a7      	str	r7, [r4, r2]
 800a448:	b107      	cbz	r7, 800a44c <rshift+0x68>
 800a44a:	3304      	adds	r3, #4
 800a44c:	1b1a      	subs	r2, r3, r4
 800a44e:	42a3      	cmp	r3, r4
 800a450:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a454:	bf08      	it	eq
 800a456:	2300      	moveq	r3, #0
 800a458:	6102      	str	r2, [r0, #16]
 800a45a:	bf08      	it	eq
 800a45c:	6143      	streq	r3, [r0, #20]
 800a45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a462:	f8dc c000 	ldr.w	ip, [ip]
 800a466:	fa0c fc08 	lsl.w	ip, ip, r8
 800a46a:	ea4c 0707 	orr.w	r7, ip, r7
 800a46e:	f849 7b04 	str.w	r7, [r9], #4
 800a472:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a476:	40cf      	lsrs	r7, r1
 800a478:	e7da      	b.n	800a430 <rshift+0x4c>
 800a47a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a47e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a482:	e7c3      	b.n	800a40c <rshift+0x28>
 800a484:	4623      	mov	r3, r4
 800a486:	e7e1      	b.n	800a44c <rshift+0x68>

0800a488 <__hexdig_fun>:
 800a488:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a48c:	2b09      	cmp	r3, #9
 800a48e:	d802      	bhi.n	800a496 <__hexdig_fun+0xe>
 800a490:	3820      	subs	r0, #32
 800a492:	b2c0      	uxtb	r0, r0
 800a494:	4770      	bx	lr
 800a496:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	d801      	bhi.n	800a4a2 <__hexdig_fun+0x1a>
 800a49e:	3847      	subs	r0, #71	@ 0x47
 800a4a0:	e7f7      	b.n	800a492 <__hexdig_fun+0xa>
 800a4a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a4a6:	2b05      	cmp	r3, #5
 800a4a8:	d801      	bhi.n	800a4ae <__hexdig_fun+0x26>
 800a4aa:	3827      	subs	r0, #39	@ 0x27
 800a4ac:	e7f1      	b.n	800a492 <__hexdig_fun+0xa>
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	4770      	bx	lr
	...

0800a4b4 <__gethex>:
 800a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	468a      	mov	sl, r1
 800a4bc:	9302      	str	r3, [sp, #8]
 800a4be:	680b      	ldr	r3, [r1, #0]
 800a4c0:	9001      	str	r0, [sp, #4]
 800a4c2:	4690      	mov	r8, r2
 800a4c4:	1c9c      	adds	r4, r3, #2
 800a4c6:	46a1      	mov	r9, r4
 800a4c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a4cc:	2830      	cmp	r0, #48	@ 0x30
 800a4ce:	d0fa      	beq.n	800a4c6 <__gethex+0x12>
 800a4d0:	eba9 0303 	sub.w	r3, r9, r3
 800a4d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a4d8:	f7ff ffd6 	bl	800a488 <__hexdig_fun>
 800a4dc:	4605      	mov	r5, r0
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d168      	bne.n	800a5b4 <__gethex+0x100>
 800a4e2:	49a0      	ldr	r1, [pc, #640]	@ (800a764 <__gethex+0x2b0>)
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	4648      	mov	r0, r9
 800a4e8:	f7ff f831 	bl	800954e <strncmp>
 800a4ec:	4607      	mov	r7, r0
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d167      	bne.n	800a5c2 <__gethex+0x10e>
 800a4f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a4f6:	4626      	mov	r6, r4
 800a4f8:	f7ff ffc6 	bl	800a488 <__hexdig_fun>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d062      	beq.n	800a5c6 <__gethex+0x112>
 800a500:	4623      	mov	r3, r4
 800a502:	7818      	ldrb	r0, [r3, #0]
 800a504:	2830      	cmp	r0, #48	@ 0x30
 800a506:	4699      	mov	r9, r3
 800a508:	f103 0301 	add.w	r3, r3, #1
 800a50c:	d0f9      	beq.n	800a502 <__gethex+0x4e>
 800a50e:	f7ff ffbb 	bl	800a488 <__hexdig_fun>
 800a512:	fab0 f580 	clz	r5, r0
 800a516:	096d      	lsrs	r5, r5, #5
 800a518:	f04f 0b01 	mov.w	fp, #1
 800a51c:	464a      	mov	r2, r9
 800a51e:	4616      	mov	r6, r2
 800a520:	3201      	adds	r2, #1
 800a522:	7830      	ldrb	r0, [r6, #0]
 800a524:	f7ff ffb0 	bl	800a488 <__hexdig_fun>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d1f8      	bne.n	800a51e <__gethex+0x6a>
 800a52c:	498d      	ldr	r1, [pc, #564]	@ (800a764 <__gethex+0x2b0>)
 800a52e:	2201      	movs	r2, #1
 800a530:	4630      	mov	r0, r6
 800a532:	f7ff f80c 	bl	800954e <strncmp>
 800a536:	2800      	cmp	r0, #0
 800a538:	d13f      	bne.n	800a5ba <__gethex+0x106>
 800a53a:	b944      	cbnz	r4, 800a54e <__gethex+0x9a>
 800a53c:	1c74      	adds	r4, r6, #1
 800a53e:	4622      	mov	r2, r4
 800a540:	4616      	mov	r6, r2
 800a542:	3201      	adds	r2, #1
 800a544:	7830      	ldrb	r0, [r6, #0]
 800a546:	f7ff ff9f 	bl	800a488 <__hexdig_fun>
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d1f8      	bne.n	800a540 <__gethex+0x8c>
 800a54e:	1ba4      	subs	r4, r4, r6
 800a550:	00a7      	lsls	r7, r4, #2
 800a552:	7833      	ldrb	r3, [r6, #0]
 800a554:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a558:	2b50      	cmp	r3, #80	@ 0x50
 800a55a:	d13e      	bne.n	800a5da <__gethex+0x126>
 800a55c:	7873      	ldrb	r3, [r6, #1]
 800a55e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a560:	d033      	beq.n	800a5ca <__gethex+0x116>
 800a562:	2b2d      	cmp	r3, #45	@ 0x2d
 800a564:	d034      	beq.n	800a5d0 <__gethex+0x11c>
 800a566:	1c71      	adds	r1, r6, #1
 800a568:	2400      	movs	r4, #0
 800a56a:	7808      	ldrb	r0, [r1, #0]
 800a56c:	f7ff ff8c 	bl	800a488 <__hexdig_fun>
 800a570:	1e43      	subs	r3, r0, #1
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b18      	cmp	r3, #24
 800a576:	d830      	bhi.n	800a5da <__gethex+0x126>
 800a578:	f1a0 0210 	sub.w	r2, r0, #16
 800a57c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a580:	f7ff ff82 	bl	800a488 <__hexdig_fun>
 800a584:	f100 3cff 	add.w	ip, r0, #4294967295
 800a588:	fa5f fc8c 	uxtb.w	ip, ip
 800a58c:	f1bc 0f18 	cmp.w	ip, #24
 800a590:	f04f 030a 	mov.w	r3, #10
 800a594:	d91e      	bls.n	800a5d4 <__gethex+0x120>
 800a596:	b104      	cbz	r4, 800a59a <__gethex+0xe6>
 800a598:	4252      	negs	r2, r2
 800a59a:	4417      	add	r7, r2
 800a59c:	f8ca 1000 	str.w	r1, [sl]
 800a5a0:	b1ed      	cbz	r5, 800a5de <__gethex+0x12a>
 800a5a2:	f1bb 0f00 	cmp.w	fp, #0
 800a5a6:	bf0c      	ite	eq
 800a5a8:	2506      	moveq	r5, #6
 800a5aa:	2500      	movne	r5, #0
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	b005      	add	sp, #20
 800a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b4:	2500      	movs	r5, #0
 800a5b6:	462c      	mov	r4, r5
 800a5b8:	e7b0      	b.n	800a51c <__gethex+0x68>
 800a5ba:	2c00      	cmp	r4, #0
 800a5bc:	d1c7      	bne.n	800a54e <__gethex+0x9a>
 800a5be:	4627      	mov	r7, r4
 800a5c0:	e7c7      	b.n	800a552 <__gethex+0x9e>
 800a5c2:	464e      	mov	r6, r9
 800a5c4:	462f      	mov	r7, r5
 800a5c6:	2501      	movs	r5, #1
 800a5c8:	e7c3      	b.n	800a552 <__gethex+0x9e>
 800a5ca:	2400      	movs	r4, #0
 800a5cc:	1cb1      	adds	r1, r6, #2
 800a5ce:	e7cc      	b.n	800a56a <__gethex+0xb6>
 800a5d0:	2401      	movs	r4, #1
 800a5d2:	e7fb      	b.n	800a5cc <__gethex+0x118>
 800a5d4:	fb03 0002 	mla	r0, r3, r2, r0
 800a5d8:	e7ce      	b.n	800a578 <__gethex+0xc4>
 800a5da:	4631      	mov	r1, r6
 800a5dc:	e7de      	b.n	800a59c <__gethex+0xe8>
 800a5de:	eba6 0309 	sub.w	r3, r6, r9
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	2b07      	cmp	r3, #7
 800a5e8:	dc0a      	bgt.n	800a600 <__gethex+0x14c>
 800a5ea:	9801      	ldr	r0, [sp, #4]
 800a5ec:	f000 fafc 	bl	800abe8 <_Balloc>
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	b940      	cbnz	r0, 800a606 <__gethex+0x152>
 800a5f4:	4b5c      	ldr	r3, [pc, #368]	@ (800a768 <__gethex+0x2b4>)
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	21e4      	movs	r1, #228	@ 0xe4
 800a5fa:	485c      	ldr	r0, [pc, #368]	@ (800a76c <__gethex+0x2b8>)
 800a5fc:	f001 fa44 	bl	800ba88 <__assert_func>
 800a600:	3101      	adds	r1, #1
 800a602:	105b      	asrs	r3, r3, #1
 800a604:	e7ef      	b.n	800a5e6 <__gethex+0x132>
 800a606:	f100 0a14 	add.w	sl, r0, #20
 800a60a:	2300      	movs	r3, #0
 800a60c:	4655      	mov	r5, sl
 800a60e:	469b      	mov	fp, r3
 800a610:	45b1      	cmp	r9, r6
 800a612:	d337      	bcc.n	800a684 <__gethex+0x1d0>
 800a614:	f845 bb04 	str.w	fp, [r5], #4
 800a618:	eba5 050a 	sub.w	r5, r5, sl
 800a61c:	10ad      	asrs	r5, r5, #2
 800a61e:	6125      	str	r5, [r4, #16]
 800a620:	4658      	mov	r0, fp
 800a622:	f000 fbd3 	bl	800adcc <__hi0bits>
 800a626:	016d      	lsls	r5, r5, #5
 800a628:	f8d8 6000 	ldr.w	r6, [r8]
 800a62c:	1a2d      	subs	r5, r5, r0
 800a62e:	42b5      	cmp	r5, r6
 800a630:	dd54      	ble.n	800a6dc <__gethex+0x228>
 800a632:	1bad      	subs	r5, r5, r6
 800a634:	4629      	mov	r1, r5
 800a636:	4620      	mov	r0, r4
 800a638:	f000 ff67 	bl	800b50a <__any_on>
 800a63c:	4681      	mov	r9, r0
 800a63e:	b178      	cbz	r0, 800a660 <__gethex+0x1ac>
 800a640:	1e6b      	subs	r3, r5, #1
 800a642:	1159      	asrs	r1, r3, #5
 800a644:	f003 021f 	and.w	r2, r3, #31
 800a648:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a64c:	f04f 0901 	mov.w	r9, #1
 800a650:	fa09 f202 	lsl.w	r2, r9, r2
 800a654:	420a      	tst	r2, r1
 800a656:	d003      	beq.n	800a660 <__gethex+0x1ac>
 800a658:	454b      	cmp	r3, r9
 800a65a:	dc36      	bgt.n	800a6ca <__gethex+0x216>
 800a65c:	f04f 0902 	mov.w	r9, #2
 800a660:	4629      	mov	r1, r5
 800a662:	4620      	mov	r0, r4
 800a664:	f7ff febe 	bl	800a3e4 <rshift>
 800a668:	442f      	add	r7, r5
 800a66a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a66e:	42bb      	cmp	r3, r7
 800a670:	da42      	bge.n	800a6f8 <__gethex+0x244>
 800a672:	9801      	ldr	r0, [sp, #4]
 800a674:	4621      	mov	r1, r4
 800a676:	f000 faf7 	bl	800ac68 <_Bfree>
 800a67a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a67c:	2300      	movs	r3, #0
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	25a3      	movs	r5, #163	@ 0xa3
 800a682:	e793      	b.n	800a5ac <__gethex+0xf8>
 800a684:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a688:	2a2e      	cmp	r2, #46	@ 0x2e
 800a68a:	d012      	beq.n	800a6b2 <__gethex+0x1fe>
 800a68c:	2b20      	cmp	r3, #32
 800a68e:	d104      	bne.n	800a69a <__gethex+0x1e6>
 800a690:	f845 bb04 	str.w	fp, [r5], #4
 800a694:	f04f 0b00 	mov.w	fp, #0
 800a698:	465b      	mov	r3, fp
 800a69a:	7830      	ldrb	r0, [r6, #0]
 800a69c:	9303      	str	r3, [sp, #12]
 800a69e:	f7ff fef3 	bl	800a488 <__hexdig_fun>
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	f000 000f 	and.w	r0, r0, #15
 800a6a8:	4098      	lsls	r0, r3
 800a6aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800a6ae:	3304      	adds	r3, #4
 800a6b0:	e7ae      	b.n	800a610 <__gethex+0x15c>
 800a6b2:	45b1      	cmp	r9, r6
 800a6b4:	d8ea      	bhi.n	800a68c <__gethex+0x1d8>
 800a6b6:	492b      	ldr	r1, [pc, #172]	@ (800a764 <__gethex+0x2b0>)
 800a6b8:	9303      	str	r3, [sp, #12]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	4630      	mov	r0, r6
 800a6be:	f7fe ff46 	bl	800954e <strncmp>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d1e1      	bne.n	800a68c <__gethex+0x1d8>
 800a6c8:	e7a2      	b.n	800a610 <__gethex+0x15c>
 800a6ca:	1ea9      	subs	r1, r5, #2
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f000 ff1c 	bl	800b50a <__any_on>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d0c2      	beq.n	800a65c <__gethex+0x1a8>
 800a6d6:	f04f 0903 	mov.w	r9, #3
 800a6da:	e7c1      	b.n	800a660 <__gethex+0x1ac>
 800a6dc:	da09      	bge.n	800a6f2 <__gethex+0x23e>
 800a6de:	1b75      	subs	r5, r6, r5
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	9801      	ldr	r0, [sp, #4]
 800a6e4:	462a      	mov	r2, r5
 800a6e6:	f000 fcd7 	bl	800b098 <__lshift>
 800a6ea:	1b7f      	subs	r7, r7, r5
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	f100 0a14 	add.w	sl, r0, #20
 800a6f2:	f04f 0900 	mov.w	r9, #0
 800a6f6:	e7b8      	b.n	800a66a <__gethex+0x1b6>
 800a6f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6fc:	42bd      	cmp	r5, r7
 800a6fe:	dd6f      	ble.n	800a7e0 <__gethex+0x32c>
 800a700:	1bed      	subs	r5, r5, r7
 800a702:	42ae      	cmp	r6, r5
 800a704:	dc34      	bgt.n	800a770 <__gethex+0x2bc>
 800a706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d022      	beq.n	800a754 <__gethex+0x2a0>
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d024      	beq.n	800a75c <__gethex+0x2a8>
 800a712:	2b01      	cmp	r3, #1
 800a714:	d115      	bne.n	800a742 <__gethex+0x28e>
 800a716:	42ae      	cmp	r6, r5
 800a718:	d113      	bne.n	800a742 <__gethex+0x28e>
 800a71a:	2e01      	cmp	r6, #1
 800a71c:	d10b      	bne.n	800a736 <__gethex+0x282>
 800a71e:	9a02      	ldr	r2, [sp, #8]
 800a720:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	2301      	movs	r3, #1
 800a728:	6123      	str	r3, [r4, #16]
 800a72a:	f8ca 3000 	str.w	r3, [sl]
 800a72e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a730:	2562      	movs	r5, #98	@ 0x62
 800a732:	601c      	str	r4, [r3, #0]
 800a734:	e73a      	b.n	800a5ac <__gethex+0xf8>
 800a736:	1e71      	subs	r1, r6, #1
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 fee6 	bl	800b50a <__any_on>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d1ed      	bne.n	800a71e <__gethex+0x26a>
 800a742:	9801      	ldr	r0, [sp, #4]
 800a744:	4621      	mov	r1, r4
 800a746:	f000 fa8f 	bl	800ac68 <_Bfree>
 800a74a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a74c:	2300      	movs	r3, #0
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	2550      	movs	r5, #80	@ 0x50
 800a752:	e72b      	b.n	800a5ac <__gethex+0xf8>
 800a754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1f3      	bne.n	800a742 <__gethex+0x28e>
 800a75a:	e7e0      	b.n	800a71e <__gethex+0x26a>
 800a75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1dd      	bne.n	800a71e <__gethex+0x26a>
 800a762:	e7ee      	b.n	800a742 <__gethex+0x28e>
 800a764:	0800bdc8 	.word	0x0800bdc8
 800a768:	0800bed8 	.word	0x0800bed8
 800a76c:	0800bee9 	.word	0x0800bee9
 800a770:	1e6f      	subs	r7, r5, #1
 800a772:	f1b9 0f00 	cmp.w	r9, #0
 800a776:	d130      	bne.n	800a7da <__gethex+0x326>
 800a778:	b127      	cbz	r7, 800a784 <__gethex+0x2d0>
 800a77a:	4639      	mov	r1, r7
 800a77c:	4620      	mov	r0, r4
 800a77e:	f000 fec4 	bl	800b50a <__any_on>
 800a782:	4681      	mov	r9, r0
 800a784:	117a      	asrs	r2, r7, #5
 800a786:	2301      	movs	r3, #1
 800a788:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a78c:	f007 071f 	and.w	r7, r7, #31
 800a790:	40bb      	lsls	r3, r7
 800a792:	4213      	tst	r3, r2
 800a794:	4629      	mov	r1, r5
 800a796:	4620      	mov	r0, r4
 800a798:	bf18      	it	ne
 800a79a:	f049 0902 	orrne.w	r9, r9, #2
 800a79e:	f7ff fe21 	bl	800a3e4 <rshift>
 800a7a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a7a6:	1b76      	subs	r6, r6, r5
 800a7a8:	2502      	movs	r5, #2
 800a7aa:	f1b9 0f00 	cmp.w	r9, #0
 800a7ae:	d047      	beq.n	800a840 <__gethex+0x38c>
 800a7b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d015      	beq.n	800a7e4 <__gethex+0x330>
 800a7b8:	2b03      	cmp	r3, #3
 800a7ba:	d017      	beq.n	800a7ec <__gethex+0x338>
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d109      	bne.n	800a7d4 <__gethex+0x320>
 800a7c0:	f019 0f02 	tst.w	r9, #2
 800a7c4:	d006      	beq.n	800a7d4 <__gethex+0x320>
 800a7c6:	f8da 3000 	ldr.w	r3, [sl]
 800a7ca:	ea49 0903 	orr.w	r9, r9, r3
 800a7ce:	f019 0f01 	tst.w	r9, #1
 800a7d2:	d10e      	bne.n	800a7f2 <__gethex+0x33e>
 800a7d4:	f045 0510 	orr.w	r5, r5, #16
 800a7d8:	e032      	b.n	800a840 <__gethex+0x38c>
 800a7da:	f04f 0901 	mov.w	r9, #1
 800a7de:	e7d1      	b.n	800a784 <__gethex+0x2d0>
 800a7e0:	2501      	movs	r5, #1
 800a7e2:	e7e2      	b.n	800a7aa <__gethex+0x2f6>
 800a7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7e6:	f1c3 0301 	rsb	r3, r3, #1
 800a7ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d0f0      	beq.n	800a7d4 <__gethex+0x320>
 800a7f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7f6:	f104 0314 	add.w	r3, r4, #20
 800a7fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a802:	f04f 0c00 	mov.w	ip, #0
 800a806:	4618      	mov	r0, r3
 800a808:	f853 2b04 	ldr.w	r2, [r3], #4
 800a80c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a810:	d01b      	beq.n	800a84a <__gethex+0x396>
 800a812:	3201      	adds	r2, #1
 800a814:	6002      	str	r2, [r0, #0]
 800a816:	2d02      	cmp	r5, #2
 800a818:	f104 0314 	add.w	r3, r4, #20
 800a81c:	d13c      	bne.n	800a898 <__gethex+0x3e4>
 800a81e:	f8d8 2000 	ldr.w	r2, [r8]
 800a822:	3a01      	subs	r2, #1
 800a824:	42b2      	cmp	r2, r6
 800a826:	d109      	bne.n	800a83c <__gethex+0x388>
 800a828:	1171      	asrs	r1, r6, #5
 800a82a:	2201      	movs	r2, #1
 800a82c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a830:	f006 061f 	and.w	r6, r6, #31
 800a834:	fa02 f606 	lsl.w	r6, r2, r6
 800a838:	421e      	tst	r6, r3
 800a83a:	d13a      	bne.n	800a8b2 <__gethex+0x3fe>
 800a83c:	f045 0520 	orr.w	r5, r5, #32
 800a840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a842:	601c      	str	r4, [r3, #0]
 800a844:	9b02      	ldr	r3, [sp, #8]
 800a846:	601f      	str	r7, [r3, #0]
 800a848:	e6b0      	b.n	800a5ac <__gethex+0xf8>
 800a84a:	4299      	cmp	r1, r3
 800a84c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a850:	d8d9      	bhi.n	800a806 <__gethex+0x352>
 800a852:	68a3      	ldr	r3, [r4, #8]
 800a854:	459b      	cmp	fp, r3
 800a856:	db17      	blt.n	800a888 <__gethex+0x3d4>
 800a858:	6861      	ldr	r1, [r4, #4]
 800a85a:	9801      	ldr	r0, [sp, #4]
 800a85c:	3101      	adds	r1, #1
 800a85e:	f000 f9c3 	bl	800abe8 <_Balloc>
 800a862:	4681      	mov	r9, r0
 800a864:	b918      	cbnz	r0, 800a86e <__gethex+0x3ba>
 800a866:	4b1a      	ldr	r3, [pc, #104]	@ (800a8d0 <__gethex+0x41c>)
 800a868:	4602      	mov	r2, r0
 800a86a:	2184      	movs	r1, #132	@ 0x84
 800a86c:	e6c5      	b.n	800a5fa <__gethex+0x146>
 800a86e:	6922      	ldr	r2, [r4, #16]
 800a870:	3202      	adds	r2, #2
 800a872:	f104 010c 	add.w	r1, r4, #12
 800a876:	0092      	lsls	r2, r2, #2
 800a878:	300c      	adds	r0, #12
 800a87a:	f7fe ff04 	bl	8009686 <memcpy>
 800a87e:	4621      	mov	r1, r4
 800a880:	9801      	ldr	r0, [sp, #4]
 800a882:	f000 f9f1 	bl	800ac68 <_Bfree>
 800a886:	464c      	mov	r4, r9
 800a888:	6923      	ldr	r3, [r4, #16]
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a890:	6122      	str	r2, [r4, #16]
 800a892:	2201      	movs	r2, #1
 800a894:	615a      	str	r2, [r3, #20]
 800a896:	e7be      	b.n	800a816 <__gethex+0x362>
 800a898:	6922      	ldr	r2, [r4, #16]
 800a89a:	455a      	cmp	r2, fp
 800a89c:	dd0b      	ble.n	800a8b6 <__gethex+0x402>
 800a89e:	2101      	movs	r1, #1
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f7ff fd9f 	bl	800a3e4 <rshift>
 800a8a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8aa:	3701      	adds	r7, #1
 800a8ac:	42bb      	cmp	r3, r7
 800a8ae:	f6ff aee0 	blt.w	800a672 <__gethex+0x1be>
 800a8b2:	2501      	movs	r5, #1
 800a8b4:	e7c2      	b.n	800a83c <__gethex+0x388>
 800a8b6:	f016 061f 	ands.w	r6, r6, #31
 800a8ba:	d0fa      	beq.n	800a8b2 <__gethex+0x3fe>
 800a8bc:	4453      	add	r3, sl
 800a8be:	f1c6 0620 	rsb	r6, r6, #32
 800a8c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a8c6:	f000 fa81 	bl	800adcc <__hi0bits>
 800a8ca:	42b0      	cmp	r0, r6
 800a8cc:	dbe7      	blt.n	800a89e <__gethex+0x3ea>
 800a8ce:	e7f0      	b.n	800a8b2 <__gethex+0x3fe>
 800a8d0:	0800bed8 	.word	0x0800bed8

0800a8d4 <L_shift>:
 800a8d4:	f1c2 0208 	rsb	r2, r2, #8
 800a8d8:	0092      	lsls	r2, r2, #2
 800a8da:	b570      	push	{r4, r5, r6, lr}
 800a8dc:	f1c2 0620 	rsb	r6, r2, #32
 800a8e0:	6843      	ldr	r3, [r0, #4]
 800a8e2:	6804      	ldr	r4, [r0, #0]
 800a8e4:	fa03 f506 	lsl.w	r5, r3, r6
 800a8e8:	432c      	orrs	r4, r5
 800a8ea:	40d3      	lsrs	r3, r2
 800a8ec:	6004      	str	r4, [r0, #0]
 800a8ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8f2:	4288      	cmp	r0, r1
 800a8f4:	d3f4      	bcc.n	800a8e0 <L_shift+0xc>
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}

0800a8f8 <__match>:
 800a8f8:	b530      	push	{r4, r5, lr}
 800a8fa:	6803      	ldr	r3, [r0, #0]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a902:	b914      	cbnz	r4, 800a90a <__match+0x12>
 800a904:	6003      	str	r3, [r0, #0]
 800a906:	2001      	movs	r0, #1
 800a908:	bd30      	pop	{r4, r5, pc}
 800a90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a90e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a912:	2d19      	cmp	r5, #25
 800a914:	bf98      	it	ls
 800a916:	3220      	addls	r2, #32
 800a918:	42a2      	cmp	r2, r4
 800a91a:	d0f0      	beq.n	800a8fe <__match+0x6>
 800a91c:	2000      	movs	r0, #0
 800a91e:	e7f3      	b.n	800a908 <__match+0x10>

0800a920 <__hexnan>:
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	680b      	ldr	r3, [r1, #0]
 800a926:	6801      	ldr	r1, [r0, #0]
 800a928:	115e      	asrs	r6, r3, #5
 800a92a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a92e:	f013 031f 	ands.w	r3, r3, #31
 800a932:	b087      	sub	sp, #28
 800a934:	bf18      	it	ne
 800a936:	3604      	addne	r6, #4
 800a938:	2500      	movs	r5, #0
 800a93a:	1f37      	subs	r7, r6, #4
 800a93c:	4682      	mov	sl, r0
 800a93e:	4690      	mov	r8, r2
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	f846 5c04 	str.w	r5, [r6, #-4]
 800a946:	46b9      	mov	r9, r7
 800a948:	463c      	mov	r4, r7
 800a94a:	9502      	str	r5, [sp, #8]
 800a94c:	46ab      	mov	fp, r5
 800a94e:	784a      	ldrb	r2, [r1, #1]
 800a950:	1c4b      	adds	r3, r1, #1
 800a952:	9303      	str	r3, [sp, #12]
 800a954:	b342      	cbz	r2, 800a9a8 <__hexnan+0x88>
 800a956:	4610      	mov	r0, r2
 800a958:	9105      	str	r1, [sp, #20]
 800a95a:	9204      	str	r2, [sp, #16]
 800a95c:	f7ff fd94 	bl	800a488 <__hexdig_fun>
 800a960:	2800      	cmp	r0, #0
 800a962:	d151      	bne.n	800aa08 <__hexnan+0xe8>
 800a964:	9a04      	ldr	r2, [sp, #16]
 800a966:	9905      	ldr	r1, [sp, #20]
 800a968:	2a20      	cmp	r2, #32
 800a96a:	d818      	bhi.n	800a99e <__hexnan+0x7e>
 800a96c:	9b02      	ldr	r3, [sp, #8]
 800a96e:	459b      	cmp	fp, r3
 800a970:	dd13      	ble.n	800a99a <__hexnan+0x7a>
 800a972:	454c      	cmp	r4, r9
 800a974:	d206      	bcs.n	800a984 <__hexnan+0x64>
 800a976:	2d07      	cmp	r5, #7
 800a978:	dc04      	bgt.n	800a984 <__hexnan+0x64>
 800a97a:	462a      	mov	r2, r5
 800a97c:	4649      	mov	r1, r9
 800a97e:	4620      	mov	r0, r4
 800a980:	f7ff ffa8 	bl	800a8d4 <L_shift>
 800a984:	4544      	cmp	r4, r8
 800a986:	d952      	bls.n	800aa2e <__hexnan+0x10e>
 800a988:	2300      	movs	r3, #0
 800a98a:	f1a4 0904 	sub.w	r9, r4, #4
 800a98e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a992:	f8cd b008 	str.w	fp, [sp, #8]
 800a996:	464c      	mov	r4, r9
 800a998:	461d      	mov	r5, r3
 800a99a:	9903      	ldr	r1, [sp, #12]
 800a99c:	e7d7      	b.n	800a94e <__hexnan+0x2e>
 800a99e:	2a29      	cmp	r2, #41	@ 0x29
 800a9a0:	d157      	bne.n	800aa52 <__hexnan+0x132>
 800a9a2:	3102      	adds	r1, #2
 800a9a4:	f8ca 1000 	str.w	r1, [sl]
 800a9a8:	f1bb 0f00 	cmp.w	fp, #0
 800a9ac:	d051      	beq.n	800aa52 <__hexnan+0x132>
 800a9ae:	454c      	cmp	r4, r9
 800a9b0:	d206      	bcs.n	800a9c0 <__hexnan+0xa0>
 800a9b2:	2d07      	cmp	r5, #7
 800a9b4:	dc04      	bgt.n	800a9c0 <__hexnan+0xa0>
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7ff ff8a 	bl	800a8d4 <L_shift>
 800a9c0:	4544      	cmp	r4, r8
 800a9c2:	d936      	bls.n	800aa32 <__hexnan+0x112>
 800a9c4:	f1a8 0204 	sub.w	r2, r8, #4
 800a9c8:	4623      	mov	r3, r4
 800a9ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9d2:	429f      	cmp	r7, r3
 800a9d4:	d2f9      	bcs.n	800a9ca <__hexnan+0xaa>
 800a9d6:	1b3b      	subs	r3, r7, r4
 800a9d8:	f023 0303 	bic.w	r3, r3, #3
 800a9dc:	3304      	adds	r3, #4
 800a9de:	3401      	adds	r4, #1
 800a9e0:	3e03      	subs	r6, #3
 800a9e2:	42b4      	cmp	r4, r6
 800a9e4:	bf88      	it	hi
 800a9e6:	2304      	movhi	r3, #4
 800a9e8:	4443      	add	r3, r8
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f843 2b04 	str.w	r2, [r3], #4
 800a9f0:	429f      	cmp	r7, r3
 800a9f2:	d2fb      	bcs.n	800a9ec <__hexnan+0xcc>
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	b91b      	cbnz	r3, 800aa00 <__hexnan+0xe0>
 800a9f8:	4547      	cmp	r7, r8
 800a9fa:	d128      	bne.n	800aa4e <__hexnan+0x12e>
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	2005      	movs	r0, #5
 800aa02:	b007      	add	sp, #28
 800aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa08:	3501      	adds	r5, #1
 800aa0a:	2d08      	cmp	r5, #8
 800aa0c:	f10b 0b01 	add.w	fp, fp, #1
 800aa10:	dd06      	ble.n	800aa20 <__hexnan+0x100>
 800aa12:	4544      	cmp	r4, r8
 800aa14:	d9c1      	bls.n	800a99a <__hexnan+0x7a>
 800aa16:	2300      	movs	r3, #0
 800aa18:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa1c:	2501      	movs	r5, #1
 800aa1e:	3c04      	subs	r4, #4
 800aa20:	6822      	ldr	r2, [r4, #0]
 800aa22:	f000 000f 	and.w	r0, r0, #15
 800aa26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa2a:	6020      	str	r0, [r4, #0]
 800aa2c:	e7b5      	b.n	800a99a <__hexnan+0x7a>
 800aa2e:	2508      	movs	r5, #8
 800aa30:	e7b3      	b.n	800a99a <__hexnan+0x7a>
 800aa32:	9b01      	ldr	r3, [sp, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d0dd      	beq.n	800a9f4 <__hexnan+0xd4>
 800aa38:	f1c3 0320 	rsb	r3, r3, #32
 800aa3c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa40:	40da      	lsrs	r2, r3
 800aa42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aa46:	4013      	ands	r3, r2
 800aa48:	f846 3c04 	str.w	r3, [r6, #-4]
 800aa4c:	e7d2      	b.n	800a9f4 <__hexnan+0xd4>
 800aa4e:	3f04      	subs	r7, #4
 800aa50:	e7d0      	b.n	800a9f4 <__hexnan+0xd4>
 800aa52:	2004      	movs	r0, #4
 800aa54:	e7d5      	b.n	800aa02 <__hexnan+0xe2>
	...

0800aa58 <malloc>:
 800aa58:	4b02      	ldr	r3, [pc, #8]	@ (800aa64 <malloc+0xc>)
 800aa5a:	4601      	mov	r1, r0
 800aa5c:	6818      	ldr	r0, [r3, #0]
 800aa5e:	f000 b825 	b.w	800aaac <_malloc_r>
 800aa62:	bf00      	nop
 800aa64:	20000184 	.word	0x20000184

0800aa68 <sbrk_aligned>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	4e0f      	ldr	r6, [pc, #60]	@ (800aaa8 <sbrk_aligned+0x40>)
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	6831      	ldr	r1, [r6, #0]
 800aa70:	4605      	mov	r5, r0
 800aa72:	b911      	cbnz	r1, 800aa7a <sbrk_aligned+0x12>
 800aa74:	f000 fff8 	bl	800ba68 <_sbrk_r>
 800aa78:	6030      	str	r0, [r6, #0]
 800aa7a:	4621      	mov	r1, r4
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	f000 fff3 	bl	800ba68 <_sbrk_r>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	d103      	bne.n	800aa8e <sbrk_aligned+0x26>
 800aa86:	f04f 34ff 	mov.w	r4, #4294967295
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	bd70      	pop	{r4, r5, r6, pc}
 800aa8e:	1cc4      	adds	r4, r0, #3
 800aa90:	f024 0403 	bic.w	r4, r4, #3
 800aa94:	42a0      	cmp	r0, r4
 800aa96:	d0f8      	beq.n	800aa8a <sbrk_aligned+0x22>
 800aa98:	1a21      	subs	r1, r4, r0
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f000 ffe4 	bl	800ba68 <_sbrk_r>
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	d1f2      	bne.n	800aa8a <sbrk_aligned+0x22>
 800aaa4:	e7ef      	b.n	800aa86 <sbrk_aligned+0x1e>
 800aaa6:	bf00      	nop
 800aaa8:	20000724 	.word	0x20000724

0800aaac <_malloc_r>:
 800aaac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab0:	1ccd      	adds	r5, r1, #3
 800aab2:	f025 0503 	bic.w	r5, r5, #3
 800aab6:	3508      	adds	r5, #8
 800aab8:	2d0c      	cmp	r5, #12
 800aaba:	bf38      	it	cc
 800aabc:	250c      	movcc	r5, #12
 800aabe:	2d00      	cmp	r5, #0
 800aac0:	4606      	mov	r6, r0
 800aac2:	db01      	blt.n	800aac8 <_malloc_r+0x1c>
 800aac4:	42a9      	cmp	r1, r5
 800aac6:	d904      	bls.n	800aad2 <_malloc_r+0x26>
 800aac8:	230c      	movs	r3, #12
 800aaca:	6033      	str	r3, [r6, #0]
 800aacc:	2000      	movs	r0, #0
 800aace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aba8 <_malloc_r+0xfc>
 800aad6:	f000 f87b 	bl	800abd0 <__malloc_lock>
 800aada:	f8d8 3000 	ldr.w	r3, [r8]
 800aade:	461c      	mov	r4, r3
 800aae0:	bb44      	cbnz	r4, 800ab34 <_malloc_r+0x88>
 800aae2:	4629      	mov	r1, r5
 800aae4:	4630      	mov	r0, r6
 800aae6:	f7ff ffbf 	bl	800aa68 <sbrk_aligned>
 800aaea:	1c43      	adds	r3, r0, #1
 800aaec:	4604      	mov	r4, r0
 800aaee:	d158      	bne.n	800aba2 <_malloc_r+0xf6>
 800aaf0:	f8d8 4000 	ldr.w	r4, [r8]
 800aaf4:	4627      	mov	r7, r4
 800aaf6:	2f00      	cmp	r7, #0
 800aaf8:	d143      	bne.n	800ab82 <_malloc_r+0xd6>
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	d04b      	beq.n	800ab96 <_malloc_r+0xea>
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	4639      	mov	r1, r7
 800ab02:	4630      	mov	r0, r6
 800ab04:	eb04 0903 	add.w	r9, r4, r3
 800ab08:	f000 ffae 	bl	800ba68 <_sbrk_r>
 800ab0c:	4581      	cmp	r9, r0
 800ab0e:	d142      	bne.n	800ab96 <_malloc_r+0xea>
 800ab10:	6821      	ldr	r1, [r4, #0]
 800ab12:	1a6d      	subs	r5, r5, r1
 800ab14:	4629      	mov	r1, r5
 800ab16:	4630      	mov	r0, r6
 800ab18:	f7ff ffa6 	bl	800aa68 <sbrk_aligned>
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d03a      	beq.n	800ab96 <_malloc_r+0xea>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	442b      	add	r3, r5
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	f8d8 3000 	ldr.w	r3, [r8]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	bb62      	cbnz	r2, 800ab88 <_malloc_r+0xdc>
 800ab2e:	f8c8 7000 	str.w	r7, [r8]
 800ab32:	e00f      	b.n	800ab54 <_malloc_r+0xa8>
 800ab34:	6822      	ldr	r2, [r4, #0]
 800ab36:	1b52      	subs	r2, r2, r5
 800ab38:	d420      	bmi.n	800ab7c <_malloc_r+0xd0>
 800ab3a:	2a0b      	cmp	r2, #11
 800ab3c:	d917      	bls.n	800ab6e <_malloc_r+0xc2>
 800ab3e:	1961      	adds	r1, r4, r5
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	6025      	str	r5, [r4, #0]
 800ab44:	bf18      	it	ne
 800ab46:	6059      	strne	r1, [r3, #4]
 800ab48:	6863      	ldr	r3, [r4, #4]
 800ab4a:	bf08      	it	eq
 800ab4c:	f8c8 1000 	streq.w	r1, [r8]
 800ab50:	5162      	str	r2, [r4, r5]
 800ab52:	604b      	str	r3, [r1, #4]
 800ab54:	4630      	mov	r0, r6
 800ab56:	f000 f841 	bl	800abdc <__malloc_unlock>
 800ab5a:	f104 000b 	add.w	r0, r4, #11
 800ab5e:	1d23      	adds	r3, r4, #4
 800ab60:	f020 0007 	bic.w	r0, r0, #7
 800ab64:	1ac2      	subs	r2, r0, r3
 800ab66:	bf1c      	itt	ne
 800ab68:	1a1b      	subne	r3, r3, r0
 800ab6a:	50a3      	strne	r3, [r4, r2]
 800ab6c:	e7af      	b.n	800aace <_malloc_r+0x22>
 800ab6e:	6862      	ldr	r2, [r4, #4]
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	bf0c      	ite	eq
 800ab74:	f8c8 2000 	streq.w	r2, [r8]
 800ab78:	605a      	strne	r2, [r3, #4]
 800ab7a:	e7eb      	b.n	800ab54 <_malloc_r+0xa8>
 800ab7c:	4623      	mov	r3, r4
 800ab7e:	6864      	ldr	r4, [r4, #4]
 800ab80:	e7ae      	b.n	800aae0 <_malloc_r+0x34>
 800ab82:	463c      	mov	r4, r7
 800ab84:	687f      	ldr	r7, [r7, #4]
 800ab86:	e7b6      	b.n	800aaf6 <_malloc_r+0x4a>
 800ab88:	461a      	mov	r2, r3
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	42a3      	cmp	r3, r4
 800ab8e:	d1fb      	bne.n	800ab88 <_malloc_r+0xdc>
 800ab90:	2300      	movs	r3, #0
 800ab92:	6053      	str	r3, [r2, #4]
 800ab94:	e7de      	b.n	800ab54 <_malloc_r+0xa8>
 800ab96:	230c      	movs	r3, #12
 800ab98:	6033      	str	r3, [r6, #0]
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	f000 f81e 	bl	800abdc <__malloc_unlock>
 800aba0:	e794      	b.n	800aacc <_malloc_r+0x20>
 800aba2:	6005      	str	r5, [r0, #0]
 800aba4:	e7d6      	b.n	800ab54 <_malloc_r+0xa8>
 800aba6:	bf00      	nop
 800aba8:	20000728 	.word	0x20000728

0800abac <__ascii_mbtowc>:
 800abac:	b082      	sub	sp, #8
 800abae:	b901      	cbnz	r1, 800abb2 <__ascii_mbtowc+0x6>
 800abb0:	a901      	add	r1, sp, #4
 800abb2:	b142      	cbz	r2, 800abc6 <__ascii_mbtowc+0x1a>
 800abb4:	b14b      	cbz	r3, 800abca <__ascii_mbtowc+0x1e>
 800abb6:	7813      	ldrb	r3, [r2, #0]
 800abb8:	600b      	str	r3, [r1, #0]
 800abba:	7812      	ldrb	r2, [r2, #0]
 800abbc:	1e10      	subs	r0, r2, #0
 800abbe:	bf18      	it	ne
 800abc0:	2001      	movne	r0, #1
 800abc2:	b002      	add	sp, #8
 800abc4:	4770      	bx	lr
 800abc6:	4610      	mov	r0, r2
 800abc8:	e7fb      	b.n	800abc2 <__ascii_mbtowc+0x16>
 800abca:	f06f 0001 	mvn.w	r0, #1
 800abce:	e7f8      	b.n	800abc2 <__ascii_mbtowc+0x16>

0800abd0 <__malloc_lock>:
 800abd0:	4801      	ldr	r0, [pc, #4]	@ (800abd8 <__malloc_lock+0x8>)
 800abd2:	f7fe bd56 	b.w	8009682 <__retarget_lock_acquire_recursive>
 800abd6:	bf00      	nop
 800abd8:	20000720 	.word	0x20000720

0800abdc <__malloc_unlock>:
 800abdc:	4801      	ldr	r0, [pc, #4]	@ (800abe4 <__malloc_unlock+0x8>)
 800abde:	f7fe bd51 	b.w	8009684 <__retarget_lock_release_recursive>
 800abe2:	bf00      	nop
 800abe4:	20000720 	.word	0x20000720

0800abe8 <_Balloc>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	69c6      	ldr	r6, [r0, #28]
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	b976      	cbnz	r6, 800ac10 <_Balloc+0x28>
 800abf2:	2010      	movs	r0, #16
 800abf4:	f7ff ff30 	bl	800aa58 <malloc>
 800abf8:	4602      	mov	r2, r0
 800abfa:	61e0      	str	r0, [r4, #28]
 800abfc:	b920      	cbnz	r0, 800ac08 <_Balloc+0x20>
 800abfe:	4b18      	ldr	r3, [pc, #96]	@ (800ac60 <_Balloc+0x78>)
 800ac00:	4818      	ldr	r0, [pc, #96]	@ (800ac64 <_Balloc+0x7c>)
 800ac02:	216b      	movs	r1, #107	@ 0x6b
 800ac04:	f000 ff40 	bl	800ba88 <__assert_func>
 800ac08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac0c:	6006      	str	r6, [r0, #0]
 800ac0e:	60c6      	str	r6, [r0, #12]
 800ac10:	69e6      	ldr	r6, [r4, #28]
 800ac12:	68f3      	ldr	r3, [r6, #12]
 800ac14:	b183      	cbz	r3, 800ac38 <_Balloc+0x50>
 800ac16:	69e3      	ldr	r3, [r4, #28]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac1e:	b9b8      	cbnz	r0, 800ac50 <_Balloc+0x68>
 800ac20:	2101      	movs	r1, #1
 800ac22:	fa01 f605 	lsl.w	r6, r1, r5
 800ac26:	1d72      	adds	r2, r6, #5
 800ac28:	0092      	lsls	r2, r2, #2
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 ff4a 	bl	800bac4 <_calloc_r>
 800ac30:	b160      	cbz	r0, 800ac4c <_Balloc+0x64>
 800ac32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ac36:	e00e      	b.n	800ac56 <_Balloc+0x6e>
 800ac38:	2221      	movs	r2, #33	@ 0x21
 800ac3a:	2104      	movs	r1, #4
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f000 ff41 	bl	800bac4 <_calloc_r>
 800ac42:	69e3      	ldr	r3, [r4, #28]
 800ac44:	60f0      	str	r0, [r6, #12]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e4      	bne.n	800ac16 <_Balloc+0x2e>
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	6802      	ldr	r2, [r0, #0]
 800ac52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac56:	2300      	movs	r3, #0
 800ac58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac5c:	e7f7      	b.n	800ac4e <_Balloc+0x66>
 800ac5e:	bf00      	nop
 800ac60:	0800be69 	.word	0x0800be69
 800ac64:	0800bf49 	.word	0x0800bf49

0800ac68 <_Bfree>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	69c6      	ldr	r6, [r0, #28]
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	460c      	mov	r4, r1
 800ac70:	b976      	cbnz	r6, 800ac90 <_Bfree+0x28>
 800ac72:	2010      	movs	r0, #16
 800ac74:	f7ff fef0 	bl	800aa58 <malloc>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	61e8      	str	r0, [r5, #28]
 800ac7c:	b920      	cbnz	r0, 800ac88 <_Bfree+0x20>
 800ac7e:	4b09      	ldr	r3, [pc, #36]	@ (800aca4 <_Bfree+0x3c>)
 800ac80:	4809      	ldr	r0, [pc, #36]	@ (800aca8 <_Bfree+0x40>)
 800ac82:	218f      	movs	r1, #143	@ 0x8f
 800ac84:	f000 ff00 	bl	800ba88 <__assert_func>
 800ac88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac8c:	6006      	str	r6, [r0, #0]
 800ac8e:	60c6      	str	r6, [r0, #12]
 800ac90:	b13c      	cbz	r4, 800aca2 <_Bfree+0x3a>
 800ac92:	69eb      	ldr	r3, [r5, #28]
 800ac94:	6862      	ldr	r2, [r4, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac9c:	6021      	str	r1, [r4, #0]
 800ac9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
 800aca4:	0800be69 	.word	0x0800be69
 800aca8:	0800bf49 	.word	0x0800bf49

0800acac <__multadd>:
 800acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb0:	690d      	ldr	r5, [r1, #16]
 800acb2:	4607      	mov	r7, r0
 800acb4:	460c      	mov	r4, r1
 800acb6:	461e      	mov	r6, r3
 800acb8:	f101 0c14 	add.w	ip, r1, #20
 800acbc:	2000      	movs	r0, #0
 800acbe:	f8dc 3000 	ldr.w	r3, [ip]
 800acc2:	b299      	uxth	r1, r3
 800acc4:	fb02 6101 	mla	r1, r2, r1, r6
 800acc8:	0c1e      	lsrs	r6, r3, #16
 800acca:	0c0b      	lsrs	r3, r1, #16
 800accc:	fb02 3306 	mla	r3, r2, r6, r3
 800acd0:	b289      	uxth	r1, r1
 800acd2:	3001      	adds	r0, #1
 800acd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800acd8:	4285      	cmp	r5, r0
 800acda:	f84c 1b04 	str.w	r1, [ip], #4
 800acde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ace2:	dcec      	bgt.n	800acbe <__multadd+0x12>
 800ace4:	b30e      	cbz	r6, 800ad2a <__multadd+0x7e>
 800ace6:	68a3      	ldr	r3, [r4, #8]
 800ace8:	42ab      	cmp	r3, r5
 800acea:	dc19      	bgt.n	800ad20 <__multadd+0x74>
 800acec:	6861      	ldr	r1, [r4, #4]
 800acee:	4638      	mov	r0, r7
 800acf0:	3101      	adds	r1, #1
 800acf2:	f7ff ff79 	bl	800abe8 <_Balloc>
 800acf6:	4680      	mov	r8, r0
 800acf8:	b928      	cbnz	r0, 800ad06 <__multadd+0x5a>
 800acfa:	4602      	mov	r2, r0
 800acfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad30 <__multadd+0x84>)
 800acfe:	480d      	ldr	r0, [pc, #52]	@ (800ad34 <__multadd+0x88>)
 800ad00:	21ba      	movs	r1, #186	@ 0xba
 800ad02:	f000 fec1 	bl	800ba88 <__assert_func>
 800ad06:	6922      	ldr	r2, [r4, #16]
 800ad08:	3202      	adds	r2, #2
 800ad0a:	f104 010c 	add.w	r1, r4, #12
 800ad0e:	0092      	lsls	r2, r2, #2
 800ad10:	300c      	adds	r0, #12
 800ad12:	f7fe fcb8 	bl	8009686 <memcpy>
 800ad16:	4621      	mov	r1, r4
 800ad18:	4638      	mov	r0, r7
 800ad1a:	f7ff ffa5 	bl	800ac68 <_Bfree>
 800ad1e:	4644      	mov	r4, r8
 800ad20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ad24:	3501      	adds	r5, #1
 800ad26:	615e      	str	r6, [r3, #20]
 800ad28:	6125      	str	r5, [r4, #16]
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad30:	0800bed8 	.word	0x0800bed8
 800ad34:	0800bf49 	.word	0x0800bf49

0800ad38 <__s2b>:
 800ad38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	4615      	mov	r5, r2
 800ad40:	461f      	mov	r7, r3
 800ad42:	2209      	movs	r2, #9
 800ad44:	3308      	adds	r3, #8
 800ad46:	4606      	mov	r6, r0
 800ad48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	2201      	movs	r2, #1
 800ad50:	429a      	cmp	r2, r3
 800ad52:	db09      	blt.n	800ad68 <__s2b+0x30>
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7ff ff47 	bl	800abe8 <_Balloc>
 800ad5a:	b940      	cbnz	r0, 800ad6e <__s2b+0x36>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	4b19      	ldr	r3, [pc, #100]	@ (800adc4 <__s2b+0x8c>)
 800ad60:	4819      	ldr	r0, [pc, #100]	@ (800adc8 <__s2b+0x90>)
 800ad62:	21d3      	movs	r1, #211	@ 0xd3
 800ad64:	f000 fe90 	bl	800ba88 <__assert_func>
 800ad68:	0052      	lsls	r2, r2, #1
 800ad6a:	3101      	adds	r1, #1
 800ad6c:	e7f0      	b.n	800ad50 <__s2b+0x18>
 800ad6e:	9b08      	ldr	r3, [sp, #32]
 800ad70:	6143      	str	r3, [r0, #20]
 800ad72:	2d09      	cmp	r5, #9
 800ad74:	f04f 0301 	mov.w	r3, #1
 800ad78:	6103      	str	r3, [r0, #16]
 800ad7a:	dd16      	ble.n	800adaa <__s2b+0x72>
 800ad7c:	f104 0909 	add.w	r9, r4, #9
 800ad80:	46c8      	mov	r8, r9
 800ad82:	442c      	add	r4, r5
 800ad84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad88:	4601      	mov	r1, r0
 800ad8a:	3b30      	subs	r3, #48	@ 0x30
 800ad8c:	220a      	movs	r2, #10
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ff8c 	bl	800acac <__multadd>
 800ad94:	45a0      	cmp	r8, r4
 800ad96:	d1f5      	bne.n	800ad84 <__s2b+0x4c>
 800ad98:	f1a5 0408 	sub.w	r4, r5, #8
 800ad9c:	444c      	add	r4, r9
 800ad9e:	1b2d      	subs	r5, r5, r4
 800ada0:	1963      	adds	r3, r4, r5
 800ada2:	42bb      	cmp	r3, r7
 800ada4:	db04      	blt.n	800adb0 <__s2b+0x78>
 800ada6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adaa:	340a      	adds	r4, #10
 800adac:	2509      	movs	r5, #9
 800adae:	e7f6      	b.n	800ad9e <__s2b+0x66>
 800adb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800adb4:	4601      	mov	r1, r0
 800adb6:	3b30      	subs	r3, #48	@ 0x30
 800adb8:	220a      	movs	r2, #10
 800adba:	4630      	mov	r0, r6
 800adbc:	f7ff ff76 	bl	800acac <__multadd>
 800adc0:	e7ee      	b.n	800ada0 <__s2b+0x68>
 800adc2:	bf00      	nop
 800adc4:	0800bed8 	.word	0x0800bed8
 800adc8:	0800bf49 	.word	0x0800bf49

0800adcc <__hi0bits>:
 800adcc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800add0:	4603      	mov	r3, r0
 800add2:	bf36      	itet	cc
 800add4:	0403      	lslcc	r3, r0, #16
 800add6:	2000      	movcs	r0, #0
 800add8:	2010      	movcc	r0, #16
 800adda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800adde:	bf3c      	itt	cc
 800ade0:	021b      	lslcc	r3, r3, #8
 800ade2:	3008      	addcc	r0, #8
 800ade4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ade8:	bf3c      	itt	cc
 800adea:	011b      	lslcc	r3, r3, #4
 800adec:	3004      	addcc	r0, #4
 800adee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adf2:	bf3c      	itt	cc
 800adf4:	009b      	lslcc	r3, r3, #2
 800adf6:	3002      	addcc	r0, #2
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	db05      	blt.n	800ae08 <__hi0bits+0x3c>
 800adfc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae00:	f100 0001 	add.w	r0, r0, #1
 800ae04:	bf08      	it	eq
 800ae06:	2020      	moveq	r0, #32
 800ae08:	4770      	bx	lr

0800ae0a <__lo0bits>:
 800ae0a:	6803      	ldr	r3, [r0, #0]
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	f013 0007 	ands.w	r0, r3, #7
 800ae12:	d00b      	beq.n	800ae2c <__lo0bits+0x22>
 800ae14:	07d9      	lsls	r1, r3, #31
 800ae16:	d421      	bmi.n	800ae5c <__lo0bits+0x52>
 800ae18:	0798      	lsls	r0, r3, #30
 800ae1a:	bf49      	itett	mi
 800ae1c:	085b      	lsrmi	r3, r3, #1
 800ae1e:	089b      	lsrpl	r3, r3, #2
 800ae20:	2001      	movmi	r0, #1
 800ae22:	6013      	strmi	r3, [r2, #0]
 800ae24:	bf5c      	itt	pl
 800ae26:	6013      	strpl	r3, [r2, #0]
 800ae28:	2002      	movpl	r0, #2
 800ae2a:	4770      	bx	lr
 800ae2c:	b299      	uxth	r1, r3
 800ae2e:	b909      	cbnz	r1, 800ae34 <__lo0bits+0x2a>
 800ae30:	0c1b      	lsrs	r3, r3, #16
 800ae32:	2010      	movs	r0, #16
 800ae34:	b2d9      	uxtb	r1, r3
 800ae36:	b909      	cbnz	r1, 800ae3c <__lo0bits+0x32>
 800ae38:	3008      	adds	r0, #8
 800ae3a:	0a1b      	lsrs	r3, r3, #8
 800ae3c:	0719      	lsls	r1, r3, #28
 800ae3e:	bf04      	itt	eq
 800ae40:	091b      	lsreq	r3, r3, #4
 800ae42:	3004      	addeq	r0, #4
 800ae44:	0799      	lsls	r1, r3, #30
 800ae46:	bf04      	itt	eq
 800ae48:	089b      	lsreq	r3, r3, #2
 800ae4a:	3002      	addeq	r0, #2
 800ae4c:	07d9      	lsls	r1, r3, #31
 800ae4e:	d403      	bmi.n	800ae58 <__lo0bits+0x4e>
 800ae50:	085b      	lsrs	r3, r3, #1
 800ae52:	f100 0001 	add.w	r0, r0, #1
 800ae56:	d003      	beq.n	800ae60 <__lo0bits+0x56>
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	4770      	bx	lr
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	4770      	bx	lr
 800ae60:	2020      	movs	r0, #32
 800ae62:	4770      	bx	lr

0800ae64 <__i2b>:
 800ae64:	b510      	push	{r4, lr}
 800ae66:	460c      	mov	r4, r1
 800ae68:	2101      	movs	r1, #1
 800ae6a:	f7ff febd 	bl	800abe8 <_Balloc>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	b928      	cbnz	r0, 800ae7e <__i2b+0x1a>
 800ae72:	4b05      	ldr	r3, [pc, #20]	@ (800ae88 <__i2b+0x24>)
 800ae74:	4805      	ldr	r0, [pc, #20]	@ (800ae8c <__i2b+0x28>)
 800ae76:	f240 1145 	movw	r1, #325	@ 0x145
 800ae7a:	f000 fe05 	bl	800ba88 <__assert_func>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	6144      	str	r4, [r0, #20]
 800ae82:	6103      	str	r3, [r0, #16]
 800ae84:	bd10      	pop	{r4, pc}
 800ae86:	bf00      	nop
 800ae88:	0800bed8 	.word	0x0800bed8
 800ae8c:	0800bf49 	.word	0x0800bf49

0800ae90 <__multiply>:
 800ae90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	4614      	mov	r4, r2
 800ae96:	690a      	ldr	r2, [r1, #16]
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	bfa8      	it	ge
 800ae9e:	4623      	movge	r3, r4
 800aea0:	460f      	mov	r7, r1
 800aea2:	bfa4      	itt	ge
 800aea4:	460c      	movge	r4, r1
 800aea6:	461f      	movge	r7, r3
 800aea8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aeac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	6861      	ldr	r1, [r4, #4]
 800aeb4:	eb0a 0609 	add.w	r6, sl, r9
 800aeb8:	42b3      	cmp	r3, r6
 800aeba:	b085      	sub	sp, #20
 800aebc:	bfb8      	it	lt
 800aebe:	3101      	addlt	r1, #1
 800aec0:	f7ff fe92 	bl	800abe8 <_Balloc>
 800aec4:	b930      	cbnz	r0, 800aed4 <__multiply+0x44>
 800aec6:	4602      	mov	r2, r0
 800aec8:	4b44      	ldr	r3, [pc, #272]	@ (800afdc <__multiply+0x14c>)
 800aeca:	4845      	ldr	r0, [pc, #276]	@ (800afe0 <__multiply+0x150>)
 800aecc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aed0:	f000 fdda 	bl	800ba88 <__assert_func>
 800aed4:	f100 0514 	add.w	r5, r0, #20
 800aed8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aedc:	462b      	mov	r3, r5
 800aede:	2200      	movs	r2, #0
 800aee0:	4543      	cmp	r3, r8
 800aee2:	d321      	bcc.n	800af28 <__multiply+0x98>
 800aee4:	f107 0114 	add.w	r1, r7, #20
 800aee8:	f104 0214 	add.w	r2, r4, #20
 800aeec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aef0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aef4:	9302      	str	r3, [sp, #8]
 800aef6:	1b13      	subs	r3, r2, r4
 800aef8:	3b15      	subs	r3, #21
 800aefa:	f023 0303 	bic.w	r3, r3, #3
 800aefe:	3304      	adds	r3, #4
 800af00:	f104 0715 	add.w	r7, r4, #21
 800af04:	42ba      	cmp	r2, r7
 800af06:	bf38      	it	cc
 800af08:	2304      	movcc	r3, #4
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	9b02      	ldr	r3, [sp, #8]
 800af0e:	9103      	str	r1, [sp, #12]
 800af10:	428b      	cmp	r3, r1
 800af12:	d80c      	bhi.n	800af2e <__multiply+0x9e>
 800af14:	2e00      	cmp	r6, #0
 800af16:	dd03      	ble.n	800af20 <__multiply+0x90>
 800af18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d05b      	beq.n	800afd8 <__multiply+0x148>
 800af20:	6106      	str	r6, [r0, #16]
 800af22:	b005      	add	sp, #20
 800af24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af28:	f843 2b04 	str.w	r2, [r3], #4
 800af2c:	e7d8      	b.n	800aee0 <__multiply+0x50>
 800af2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800af32:	f1ba 0f00 	cmp.w	sl, #0
 800af36:	d024      	beq.n	800af82 <__multiply+0xf2>
 800af38:	f104 0e14 	add.w	lr, r4, #20
 800af3c:	46a9      	mov	r9, r5
 800af3e:	f04f 0c00 	mov.w	ip, #0
 800af42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af46:	f8d9 3000 	ldr.w	r3, [r9]
 800af4a:	fa1f fb87 	uxth.w	fp, r7
 800af4e:	b29b      	uxth	r3, r3
 800af50:	fb0a 330b 	mla	r3, sl, fp, r3
 800af54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800af58:	f8d9 7000 	ldr.w	r7, [r9]
 800af5c:	4463      	add	r3, ip
 800af5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af62:	fb0a c70b 	mla	r7, sl, fp, ip
 800af66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800af70:	4572      	cmp	r2, lr
 800af72:	f849 3b04 	str.w	r3, [r9], #4
 800af76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800af7a:	d8e2      	bhi.n	800af42 <__multiply+0xb2>
 800af7c:	9b01      	ldr	r3, [sp, #4]
 800af7e:	f845 c003 	str.w	ip, [r5, r3]
 800af82:	9b03      	ldr	r3, [sp, #12]
 800af84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800af88:	3104      	adds	r1, #4
 800af8a:	f1b9 0f00 	cmp.w	r9, #0
 800af8e:	d021      	beq.n	800afd4 <__multiply+0x144>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	f104 0c14 	add.w	ip, r4, #20
 800af96:	46ae      	mov	lr, r5
 800af98:	f04f 0a00 	mov.w	sl, #0
 800af9c:	f8bc b000 	ldrh.w	fp, [ip]
 800afa0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800afa4:	fb09 770b 	mla	r7, r9, fp, r7
 800afa8:	4457      	add	r7, sl
 800afaa:	b29b      	uxth	r3, r3
 800afac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800afb0:	f84e 3b04 	str.w	r3, [lr], #4
 800afb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afbc:	f8be 3000 	ldrh.w	r3, [lr]
 800afc0:	fb09 330a 	mla	r3, r9, sl, r3
 800afc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800afc8:	4562      	cmp	r2, ip
 800afca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afce:	d8e5      	bhi.n	800af9c <__multiply+0x10c>
 800afd0:	9f01      	ldr	r7, [sp, #4]
 800afd2:	51eb      	str	r3, [r5, r7]
 800afd4:	3504      	adds	r5, #4
 800afd6:	e799      	b.n	800af0c <__multiply+0x7c>
 800afd8:	3e01      	subs	r6, #1
 800afda:	e79b      	b.n	800af14 <__multiply+0x84>
 800afdc:	0800bed8 	.word	0x0800bed8
 800afe0:	0800bf49 	.word	0x0800bf49

0800afe4 <__pow5mult>:
 800afe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe8:	4615      	mov	r5, r2
 800afea:	f012 0203 	ands.w	r2, r2, #3
 800afee:	4607      	mov	r7, r0
 800aff0:	460e      	mov	r6, r1
 800aff2:	d007      	beq.n	800b004 <__pow5mult+0x20>
 800aff4:	4c25      	ldr	r4, [pc, #148]	@ (800b08c <__pow5mult+0xa8>)
 800aff6:	3a01      	subs	r2, #1
 800aff8:	2300      	movs	r3, #0
 800affa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800affe:	f7ff fe55 	bl	800acac <__multadd>
 800b002:	4606      	mov	r6, r0
 800b004:	10ad      	asrs	r5, r5, #2
 800b006:	d03d      	beq.n	800b084 <__pow5mult+0xa0>
 800b008:	69fc      	ldr	r4, [r7, #28]
 800b00a:	b97c      	cbnz	r4, 800b02c <__pow5mult+0x48>
 800b00c:	2010      	movs	r0, #16
 800b00e:	f7ff fd23 	bl	800aa58 <malloc>
 800b012:	4602      	mov	r2, r0
 800b014:	61f8      	str	r0, [r7, #28]
 800b016:	b928      	cbnz	r0, 800b024 <__pow5mult+0x40>
 800b018:	4b1d      	ldr	r3, [pc, #116]	@ (800b090 <__pow5mult+0xac>)
 800b01a:	481e      	ldr	r0, [pc, #120]	@ (800b094 <__pow5mult+0xb0>)
 800b01c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b020:	f000 fd32 	bl	800ba88 <__assert_func>
 800b024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b028:	6004      	str	r4, [r0, #0]
 800b02a:	60c4      	str	r4, [r0, #12]
 800b02c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b034:	b94c      	cbnz	r4, 800b04a <__pow5mult+0x66>
 800b036:	f240 2171 	movw	r1, #625	@ 0x271
 800b03a:	4638      	mov	r0, r7
 800b03c:	f7ff ff12 	bl	800ae64 <__i2b>
 800b040:	2300      	movs	r3, #0
 800b042:	f8c8 0008 	str.w	r0, [r8, #8]
 800b046:	4604      	mov	r4, r0
 800b048:	6003      	str	r3, [r0, #0]
 800b04a:	f04f 0900 	mov.w	r9, #0
 800b04e:	07eb      	lsls	r3, r5, #31
 800b050:	d50a      	bpl.n	800b068 <__pow5mult+0x84>
 800b052:	4631      	mov	r1, r6
 800b054:	4622      	mov	r2, r4
 800b056:	4638      	mov	r0, r7
 800b058:	f7ff ff1a 	bl	800ae90 <__multiply>
 800b05c:	4631      	mov	r1, r6
 800b05e:	4680      	mov	r8, r0
 800b060:	4638      	mov	r0, r7
 800b062:	f7ff fe01 	bl	800ac68 <_Bfree>
 800b066:	4646      	mov	r6, r8
 800b068:	106d      	asrs	r5, r5, #1
 800b06a:	d00b      	beq.n	800b084 <__pow5mult+0xa0>
 800b06c:	6820      	ldr	r0, [r4, #0]
 800b06e:	b938      	cbnz	r0, 800b080 <__pow5mult+0x9c>
 800b070:	4622      	mov	r2, r4
 800b072:	4621      	mov	r1, r4
 800b074:	4638      	mov	r0, r7
 800b076:	f7ff ff0b 	bl	800ae90 <__multiply>
 800b07a:	6020      	str	r0, [r4, #0]
 800b07c:	f8c0 9000 	str.w	r9, [r0]
 800b080:	4604      	mov	r4, r0
 800b082:	e7e4      	b.n	800b04e <__pow5mult+0x6a>
 800b084:	4630      	mov	r0, r6
 800b086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b08a:	bf00      	nop
 800b08c:	0800bfa4 	.word	0x0800bfa4
 800b090:	0800be69 	.word	0x0800be69
 800b094:	0800bf49 	.word	0x0800bf49

0800b098 <__lshift>:
 800b098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b09c:	460c      	mov	r4, r1
 800b09e:	6849      	ldr	r1, [r1, #4]
 800b0a0:	6923      	ldr	r3, [r4, #16]
 800b0a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0a6:	68a3      	ldr	r3, [r4, #8]
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	4691      	mov	r9, r2
 800b0ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0b0:	f108 0601 	add.w	r6, r8, #1
 800b0b4:	42b3      	cmp	r3, r6
 800b0b6:	db0b      	blt.n	800b0d0 <__lshift+0x38>
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f7ff fd95 	bl	800abe8 <_Balloc>
 800b0be:	4605      	mov	r5, r0
 800b0c0:	b948      	cbnz	r0, 800b0d6 <__lshift+0x3e>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	4b28      	ldr	r3, [pc, #160]	@ (800b168 <__lshift+0xd0>)
 800b0c6:	4829      	ldr	r0, [pc, #164]	@ (800b16c <__lshift+0xd4>)
 800b0c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b0cc:	f000 fcdc 	bl	800ba88 <__assert_func>
 800b0d0:	3101      	adds	r1, #1
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	e7ee      	b.n	800b0b4 <__lshift+0x1c>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f100 0114 	add.w	r1, r0, #20
 800b0dc:	f100 0210 	add.w	r2, r0, #16
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	4553      	cmp	r3, sl
 800b0e4:	db33      	blt.n	800b14e <__lshift+0xb6>
 800b0e6:	6920      	ldr	r0, [r4, #16]
 800b0e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0ec:	f104 0314 	add.w	r3, r4, #20
 800b0f0:	f019 091f 	ands.w	r9, r9, #31
 800b0f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0fc:	d02b      	beq.n	800b156 <__lshift+0xbe>
 800b0fe:	f1c9 0e20 	rsb	lr, r9, #32
 800b102:	468a      	mov	sl, r1
 800b104:	2200      	movs	r2, #0
 800b106:	6818      	ldr	r0, [r3, #0]
 800b108:	fa00 f009 	lsl.w	r0, r0, r9
 800b10c:	4310      	orrs	r0, r2
 800b10e:	f84a 0b04 	str.w	r0, [sl], #4
 800b112:	f853 2b04 	ldr.w	r2, [r3], #4
 800b116:	459c      	cmp	ip, r3
 800b118:	fa22 f20e 	lsr.w	r2, r2, lr
 800b11c:	d8f3      	bhi.n	800b106 <__lshift+0x6e>
 800b11e:	ebac 0304 	sub.w	r3, ip, r4
 800b122:	3b15      	subs	r3, #21
 800b124:	f023 0303 	bic.w	r3, r3, #3
 800b128:	3304      	adds	r3, #4
 800b12a:	f104 0015 	add.w	r0, r4, #21
 800b12e:	4584      	cmp	ip, r0
 800b130:	bf38      	it	cc
 800b132:	2304      	movcc	r3, #4
 800b134:	50ca      	str	r2, [r1, r3]
 800b136:	b10a      	cbz	r2, 800b13c <__lshift+0xa4>
 800b138:	f108 0602 	add.w	r6, r8, #2
 800b13c:	3e01      	subs	r6, #1
 800b13e:	4638      	mov	r0, r7
 800b140:	612e      	str	r6, [r5, #16]
 800b142:	4621      	mov	r1, r4
 800b144:	f7ff fd90 	bl	800ac68 <_Bfree>
 800b148:	4628      	mov	r0, r5
 800b14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b152:	3301      	adds	r3, #1
 800b154:	e7c5      	b.n	800b0e2 <__lshift+0x4a>
 800b156:	3904      	subs	r1, #4
 800b158:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b160:	459c      	cmp	ip, r3
 800b162:	d8f9      	bhi.n	800b158 <__lshift+0xc0>
 800b164:	e7ea      	b.n	800b13c <__lshift+0xa4>
 800b166:	bf00      	nop
 800b168:	0800bed8 	.word	0x0800bed8
 800b16c:	0800bf49 	.word	0x0800bf49

0800b170 <__mcmp>:
 800b170:	690a      	ldr	r2, [r1, #16]
 800b172:	4603      	mov	r3, r0
 800b174:	6900      	ldr	r0, [r0, #16]
 800b176:	1a80      	subs	r0, r0, r2
 800b178:	b530      	push	{r4, r5, lr}
 800b17a:	d10e      	bne.n	800b19a <__mcmp+0x2a>
 800b17c:	3314      	adds	r3, #20
 800b17e:	3114      	adds	r1, #20
 800b180:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b184:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b188:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b18c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b190:	4295      	cmp	r5, r2
 800b192:	d003      	beq.n	800b19c <__mcmp+0x2c>
 800b194:	d205      	bcs.n	800b1a2 <__mcmp+0x32>
 800b196:	f04f 30ff 	mov.w	r0, #4294967295
 800b19a:	bd30      	pop	{r4, r5, pc}
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	d3f3      	bcc.n	800b188 <__mcmp+0x18>
 800b1a0:	e7fb      	b.n	800b19a <__mcmp+0x2a>
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	e7f9      	b.n	800b19a <__mcmp+0x2a>
	...

0800b1a8 <__mdiff>:
 800b1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	4689      	mov	r9, r1
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	4611      	mov	r1, r2
 800b1b2:	4648      	mov	r0, r9
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	f7ff ffdb 	bl	800b170 <__mcmp>
 800b1ba:	1e05      	subs	r5, r0, #0
 800b1bc:	d112      	bne.n	800b1e4 <__mdiff+0x3c>
 800b1be:	4629      	mov	r1, r5
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f7ff fd11 	bl	800abe8 <_Balloc>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	b928      	cbnz	r0, 800b1d6 <__mdiff+0x2e>
 800b1ca:	4b3f      	ldr	r3, [pc, #252]	@ (800b2c8 <__mdiff+0x120>)
 800b1cc:	f240 2137 	movw	r1, #567	@ 0x237
 800b1d0:	483e      	ldr	r0, [pc, #248]	@ (800b2cc <__mdiff+0x124>)
 800b1d2:	f000 fc59 	bl	800ba88 <__assert_func>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1dc:	4610      	mov	r0, r2
 800b1de:	b003      	add	sp, #12
 800b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	bfbc      	itt	lt
 800b1e6:	464b      	movlt	r3, r9
 800b1e8:	46a1      	movlt	r9, r4
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b1f0:	bfba      	itte	lt
 800b1f2:	461c      	movlt	r4, r3
 800b1f4:	2501      	movlt	r5, #1
 800b1f6:	2500      	movge	r5, #0
 800b1f8:	f7ff fcf6 	bl	800abe8 <_Balloc>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	b918      	cbnz	r0, 800b208 <__mdiff+0x60>
 800b200:	4b31      	ldr	r3, [pc, #196]	@ (800b2c8 <__mdiff+0x120>)
 800b202:	f240 2145 	movw	r1, #581	@ 0x245
 800b206:	e7e3      	b.n	800b1d0 <__mdiff+0x28>
 800b208:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b20c:	6926      	ldr	r6, [r4, #16]
 800b20e:	60c5      	str	r5, [r0, #12]
 800b210:	f109 0310 	add.w	r3, r9, #16
 800b214:	f109 0514 	add.w	r5, r9, #20
 800b218:	f104 0e14 	add.w	lr, r4, #20
 800b21c:	f100 0b14 	add.w	fp, r0, #20
 800b220:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b224:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	46d9      	mov	r9, fp
 800b22c:	f04f 0c00 	mov.w	ip, #0
 800b230:	9b01      	ldr	r3, [sp, #4]
 800b232:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b236:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	fa1f f38a 	uxth.w	r3, sl
 800b240:	4619      	mov	r1, r3
 800b242:	b283      	uxth	r3, r0
 800b244:	1acb      	subs	r3, r1, r3
 800b246:	0c00      	lsrs	r0, r0, #16
 800b248:	4463      	add	r3, ip
 800b24a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b24e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b252:	b29b      	uxth	r3, r3
 800b254:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b258:	4576      	cmp	r6, lr
 800b25a:	f849 3b04 	str.w	r3, [r9], #4
 800b25e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b262:	d8e5      	bhi.n	800b230 <__mdiff+0x88>
 800b264:	1b33      	subs	r3, r6, r4
 800b266:	3b15      	subs	r3, #21
 800b268:	f023 0303 	bic.w	r3, r3, #3
 800b26c:	3415      	adds	r4, #21
 800b26e:	3304      	adds	r3, #4
 800b270:	42a6      	cmp	r6, r4
 800b272:	bf38      	it	cc
 800b274:	2304      	movcc	r3, #4
 800b276:	441d      	add	r5, r3
 800b278:	445b      	add	r3, fp
 800b27a:	461e      	mov	r6, r3
 800b27c:	462c      	mov	r4, r5
 800b27e:	4544      	cmp	r4, r8
 800b280:	d30e      	bcc.n	800b2a0 <__mdiff+0xf8>
 800b282:	f108 0103 	add.w	r1, r8, #3
 800b286:	1b49      	subs	r1, r1, r5
 800b288:	f021 0103 	bic.w	r1, r1, #3
 800b28c:	3d03      	subs	r5, #3
 800b28e:	45a8      	cmp	r8, r5
 800b290:	bf38      	it	cc
 800b292:	2100      	movcc	r1, #0
 800b294:	440b      	add	r3, r1
 800b296:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b29a:	b191      	cbz	r1, 800b2c2 <__mdiff+0x11a>
 800b29c:	6117      	str	r7, [r2, #16]
 800b29e:	e79d      	b.n	800b1dc <__mdiff+0x34>
 800b2a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b2a4:	46e6      	mov	lr, ip
 800b2a6:	0c08      	lsrs	r0, r1, #16
 800b2a8:	fa1c fc81 	uxtah	ip, ip, r1
 800b2ac:	4471      	add	r1, lr
 800b2ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b2b2:	b289      	uxth	r1, r1
 800b2b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b2b8:	f846 1b04 	str.w	r1, [r6], #4
 800b2bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2c0:	e7dd      	b.n	800b27e <__mdiff+0xd6>
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	e7e7      	b.n	800b296 <__mdiff+0xee>
 800b2c6:	bf00      	nop
 800b2c8:	0800bed8 	.word	0x0800bed8
 800b2cc:	0800bf49 	.word	0x0800bf49

0800b2d0 <__ulp>:
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	ed8d 0b00 	vstr	d0, [sp]
 800b2d6:	9a01      	ldr	r2, [sp, #4]
 800b2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800b318 <__ulp+0x48>)
 800b2da:	4013      	ands	r3, r2
 800b2dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dc08      	bgt.n	800b2f6 <__ulp+0x26>
 800b2e4:	425b      	negs	r3, r3
 800b2e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b2ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b2ee:	da04      	bge.n	800b2fa <__ulp+0x2a>
 800b2f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b2f4:	4113      	asrs	r3, r2
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	e008      	b.n	800b30c <__ulp+0x3c>
 800b2fa:	f1a2 0314 	sub.w	r3, r2, #20
 800b2fe:	2b1e      	cmp	r3, #30
 800b300:	bfda      	itte	le
 800b302:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b306:	40da      	lsrle	r2, r3
 800b308:	2201      	movgt	r2, #1
 800b30a:	2300      	movs	r3, #0
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	ec41 0b10 	vmov	d0, r0, r1
 800b314:	b002      	add	sp, #8
 800b316:	4770      	bx	lr
 800b318:	7ff00000 	.word	0x7ff00000

0800b31c <__b2d>:
 800b31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b320:	6906      	ldr	r6, [r0, #16]
 800b322:	f100 0814 	add.w	r8, r0, #20
 800b326:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b32a:	1f37      	subs	r7, r6, #4
 800b32c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b330:	4610      	mov	r0, r2
 800b332:	f7ff fd4b 	bl	800adcc <__hi0bits>
 800b336:	f1c0 0320 	rsb	r3, r0, #32
 800b33a:	280a      	cmp	r0, #10
 800b33c:	600b      	str	r3, [r1, #0]
 800b33e:	491b      	ldr	r1, [pc, #108]	@ (800b3ac <__b2d+0x90>)
 800b340:	dc15      	bgt.n	800b36e <__b2d+0x52>
 800b342:	f1c0 0c0b 	rsb	ip, r0, #11
 800b346:	fa22 f30c 	lsr.w	r3, r2, ip
 800b34a:	45b8      	cmp	r8, r7
 800b34c:	ea43 0501 	orr.w	r5, r3, r1
 800b350:	bf34      	ite	cc
 800b352:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b356:	2300      	movcs	r3, #0
 800b358:	3015      	adds	r0, #21
 800b35a:	fa02 f000 	lsl.w	r0, r2, r0
 800b35e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b362:	4303      	orrs	r3, r0
 800b364:	461c      	mov	r4, r3
 800b366:	ec45 4b10 	vmov	d0, r4, r5
 800b36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36e:	45b8      	cmp	r8, r7
 800b370:	bf3a      	itte	cc
 800b372:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b376:	f1a6 0708 	subcc.w	r7, r6, #8
 800b37a:	2300      	movcs	r3, #0
 800b37c:	380b      	subs	r0, #11
 800b37e:	d012      	beq.n	800b3a6 <__b2d+0x8a>
 800b380:	f1c0 0120 	rsb	r1, r0, #32
 800b384:	fa23 f401 	lsr.w	r4, r3, r1
 800b388:	4082      	lsls	r2, r0
 800b38a:	4322      	orrs	r2, r4
 800b38c:	4547      	cmp	r7, r8
 800b38e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b392:	bf8c      	ite	hi
 800b394:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b398:	2200      	movls	r2, #0
 800b39a:	4083      	lsls	r3, r0
 800b39c:	40ca      	lsrs	r2, r1
 800b39e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	e7de      	b.n	800b364 <__b2d+0x48>
 800b3a6:	ea42 0501 	orr.w	r5, r2, r1
 800b3aa:	e7db      	b.n	800b364 <__b2d+0x48>
 800b3ac:	3ff00000 	.word	0x3ff00000

0800b3b0 <__d2b>:
 800b3b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3b4:	460f      	mov	r7, r1
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	ec59 8b10 	vmov	r8, r9, d0
 800b3bc:	4616      	mov	r6, r2
 800b3be:	f7ff fc13 	bl	800abe8 <_Balloc>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	b930      	cbnz	r0, 800b3d4 <__d2b+0x24>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	4b23      	ldr	r3, [pc, #140]	@ (800b458 <__d2b+0xa8>)
 800b3ca:	4824      	ldr	r0, [pc, #144]	@ (800b45c <__d2b+0xac>)
 800b3cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b3d0:	f000 fb5a 	bl	800ba88 <__assert_func>
 800b3d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b3d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3dc:	b10d      	cbz	r5, 800b3e2 <__d2b+0x32>
 800b3de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	f1b8 0300 	subs.w	r3, r8, #0
 800b3e8:	d023      	beq.n	800b432 <__d2b+0x82>
 800b3ea:	4668      	mov	r0, sp
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	f7ff fd0c 	bl	800ae0a <__lo0bits>
 800b3f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b3f6:	b1d0      	cbz	r0, 800b42e <__d2b+0x7e>
 800b3f8:	f1c0 0320 	rsb	r3, r0, #32
 800b3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b400:	430b      	orrs	r3, r1
 800b402:	40c2      	lsrs	r2, r0
 800b404:	6163      	str	r3, [r4, #20]
 800b406:	9201      	str	r2, [sp, #4]
 800b408:	9b01      	ldr	r3, [sp, #4]
 800b40a:	61a3      	str	r3, [r4, #24]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	bf0c      	ite	eq
 800b410:	2201      	moveq	r2, #1
 800b412:	2202      	movne	r2, #2
 800b414:	6122      	str	r2, [r4, #16]
 800b416:	b1a5      	cbz	r5, 800b442 <__d2b+0x92>
 800b418:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b41c:	4405      	add	r5, r0
 800b41e:	603d      	str	r5, [r7, #0]
 800b420:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b424:	6030      	str	r0, [r6, #0]
 800b426:	4620      	mov	r0, r4
 800b428:	b003      	add	sp, #12
 800b42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b42e:	6161      	str	r1, [r4, #20]
 800b430:	e7ea      	b.n	800b408 <__d2b+0x58>
 800b432:	a801      	add	r0, sp, #4
 800b434:	f7ff fce9 	bl	800ae0a <__lo0bits>
 800b438:	9b01      	ldr	r3, [sp, #4]
 800b43a:	6163      	str	r3, [r4, #20]
 800b43c:	3020      	adds	r0, #32
 800b43e:	2201      	movs	r2, #1
 800b440:	e7e8      	b.n	800b414 <__d2b+0x64>
 800b442:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b446:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b44a:	6038      	str	r0, [r7, #0]
 800b44c:	6918      	ldr	r0, [r3, #16]
 800b44e:	f7ff fcbd 	bl	800adcc <__hi0bits>
 800b452:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b456:	e7e5      	b.n	800b424 <__d2b+0x74>
 800b458:	0800bed8 	.word	0x0800bed8
 800b45c:	0800bf49 	.word	0x0800bf49

0800b460 <__ratio>:
 800b460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	b085      	sub	sp, #20
 800b466:	e9cd 1000 	strd	r1, r0, [sp]
 800b46a:	a902      	add	r1, sp, #8
 800b46c:	f7ff ff56 	bl	800b31c <__b2d>
 800b470:	9800      	ldr	r0, [sp, #0]
 800b472:	a903      	add	r1, sp, #12
 800b474:	ec55 4b10 	vmov	r4, r5, d0
 800b478:	f7ff ff50 	bl	800b31c <__b2d>
 800b47c:	9b01      	ldr	r3, [sp, #4]
 800b47e:	6919      	ldr	r1, [r3, #16]
 800b480:	9b00      	ldr	r3, [sp, #0]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	1ac9      	subs	r1, r1, r3
 800b486:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	ec5b ab10 	vmov	sl, fp, d0
 800b490:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b494:	2b00      	cmp	r3, #0
 800b496:	bfce      	itee	gt
 800b498:	462a      	movgt	r2, r5
 800b49a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b49e:	465a      	movle	r2, fp
 800b4a0:	462f      	mov	r7, r5
 800b4a2:	46d9      	mov	r9, fp
 800b4a4:	bfcc      	ite	gt
 800b4a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b4aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	4652      	mov	r2, sl
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	4639      	mov	r1, r7
 800b4b6:	f7f5 f9c9 	bl	800084c <__aeabi_ddiv>
 800b4ba:	ec41 0b10 	vmov	d0, r0, r1
 800b4be:	b005      	add	sp, #20
 800b4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4c4 <__copybits>:
 800b4c4:	3901      	subs	r1, #1
 800b4c6:	b570      	push	{r4, r5, r6, lr}
 800b4c8:	1149      	asrs	r1, r1, #5
 800b4ca:	6914      	ldr	r4, [r2, #16]
 800b4cc:	3101      	adds	r1, #1
 800b4ce:	f102 0314 	add.w	r3, r2, #20
 800b4d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b4d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4da:	1f05      	subs	r5, r0, #4
 800b4dc:	42a3      	cmp	r3, r4
 800b4de:	d30c      	bcc.n	800b4fa <__copybits+0x36>
 800b4e0:	1aa3      	subs	r3, r4, r2
 800b4e2:	3b11      	subs	r3, #17
 800b4e4:	f023 0303 	bic.w	r3, r3, #3
 800b4e8:	3211      	adds	r2, #17
 800b4ea:	42a2      	cmp	r2, r4
 800b4ec:	bf88      	it	hi
 800b4ee:	2300      	movhi	r3, #0
 800b4f0:	4418      	add	r0, r3
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	4288      	cmp	r0, r1
 800b4f6:	d305      	bcc.n	800b504 <__copybits+0x40>
 800b4f8:	bd70      	pop	{r4, r5, r6, pc}
 800b4fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b4fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800b502:	e7eb      	b.n	800b4dc <__copybits+0x18>
 800b504:	f840 3b04 	str.w	r3, [r0], #4
 800b508:	e7f4      	b.n	800b4f4 <__copybits+0x30>

0800b50a <__any_on>:
 800b50a:	f100 0214 	add.w	r2, r0, #20
 800b50e:	6900      	ldr	r0, [r0, #16]
 800b510:	114b      	asrs	r3, r1, #5
 800b512:	4298      	cmp	r0, r3
 800b514:	b510      	push	{r4, lr}
 800b516:	db11      	blt.n	800b53c <__any_on+0x32>
 800b518:	dd0a      	ble.n	800b530 <__any_on+0x26>
 800b51a:	f011 011f 	ands.w	r1, r1, #31
 800b51e:	d007      	beq.n	800b530 <__any_on+0x26>
 800b520:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b524:	fa24 f001 	lsr.w	r0, r4, r1
 800b528:	fa00 f101 	lsl.w	r1, r0, r1
 800b52c:	428c      	cmp	r4, r1
 800b52e:	d10b      	bne.n	800b548 <__any_on+0x3e>
 800b530:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b534:	4293      	cmp	r3, r2
 800b536:	d803      	bhi.n	800b540 <__any_on+0x36>
 800b538:	2000      	movs	r0, #0
 800b53a:	bd10      	pop	{r4, pc}
 800b53c:	4603      	mov	r3, r0
 800b53e:	e7f7      	b.n	800b530 <__any_on+0x26>
 800b540:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b544:	2900      	cmp	r1, #0
 800b546:	d0f5      	beq.n	800b534 <__any_on+0x2a>
 800b548:	2001      	movs	r0, #1
 800b54a:	e7f6      	b.n	800b53a <__any_on+0x30>

0800b54c <__ascii_wctomb>:
 800b54c:	4603      	mov	r3, r0
 800b54e:	4608      	mov	r0, r1
 800b550:	b141      	cbz	r1, 800b564 <__ascii_wctomb+0x18>
 800b552:	2aff      	cmp	r2, #255	@ 0xff
 800b554:	d904      	bls.n	800b560 <__ascii_wctomb+0x14>
 800b556:	228a      	movs	r2, #138	@ 0x8a
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	f04f 30ff 	mov.w	r0, #4294967295
 800b55e:	4770      	bx	lr
 800b560:	700a      	strb	r2, [r1, #0]
 800b562:	2001      	movs	r0, #1
 800b564:	4770      	bx	lr

0800b566 <__sfputc_r>:
 800b566:	6893      	ldr	r3, [r2, #8]
 800b568:	3b01      	subs	r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	b410      	push	{r4}
 800b56e:	6093      	str	r3, [r2, #8]
 800b570:	da08      	bge.n	800b584 <__sfputc_r+0x1e>
 800b572:	6994      	ldr	r4, [r2, #24]
 800b574:	42a3      	cmp	r3, r4
 800b576:	db01      	blt.n	800b57c <__sfputc_r+0x16>
 800b578:	290a      	cmp	r1, #10
 800b57a:	d103      	bne.n	800b584 <__sfputc_r+0x1e>
 800b57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b580:	f000 b9de 	b.w	800b940 <__swbuf_r>
 800b584:	6813      	ldr	r3, [r2, #0]
 800b586:	1c58      	adds	r0, r3, #1
 800b588:	6010      	str	r0, [r2, #0]
 800b58a:	7019      	strb	r1, [r3, #0]
 800b58c:	4608      	mov	r0, r1
 800b58e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <__sfputs_r>:
 800b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b596:	4606      	mov	r6, r0
 800b598:	460f      	mov	r7, r1
 800b59a:	4614      	mov	r4, r2
 800b59c:	18d5      	adds	r5, r2, r3
 800b59e:	42ac      	cmp	r4, r5
 800b5a0:	d101      	bne.n	800b5a6 <__sfputs_r+0x12>
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	e007      	b.n	800b5b6 <__sfputs_r+0x22>
 800b5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5aa:	463a      	mov	r2, r7
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7ff ffda 	bl	800b566 <__sfputc_r>
 800b5b2:	1c43      	adds	r3, r0, #1
 800b5b4:	d1f3      	bne.n	800b59e <__sfputs_r+0xa>
 800b5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5b8 <_vfiprintf_r>:
 800b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	460d      	mov	r5, r1
 800b5be:	b09d      	sub	sp, #116	@ 0x74
 800b5c0:	4614      	mov	r4, r2
 800b5c2:	4698      	mov	r8, r3
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	b118      	cbz	r0, 800b5d0 <_vfiprintf_r+0x18>
 800b5c8:	6a03      	ldr	r3, [r0, #32]
 800b5ca:	b90b      	cbnz	r3, 800b5d0 <_vfiprintf_r+0x18>
 800b5cc:	f7fd ff2c 	bl	8009428 <__sinit>
 800b5d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5d2:	07d9      	lsls	r1, r3, #31
 800b5d4:	d405      	bmi.n	800b5e2 <_vfiprintf_r+0x2a>
 800b5d6:	89ab      	ldrh	r3, [r5, #12]
 800b5d8:	059a      	lsls	r2, r3, #22
 800b5da:	d402      	bmi.n	800b5e2 <_vfiprintf_r+0x2a>
 800b5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5de:	f7fe f850 	bl	8009682 <__retarget_lock_acquire_recursive>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	071b      	lsls	r3, r3, #28
 800b5e6:	d501      	bpl.n	800b5ec <_vfiprintf_r+0x34>
 800b5e8:	692b      	ldr	r3, [r5, #16]
 800b5ea:	b99b      	cbnz	r3, 800b614 <_vfiprintf_r+0x5c>
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f000 f9e4 	bl	800b9bc <__swsetup_r>
 800b5f4:	b170      	cbz	r0, 800b614 <_vfiprintf_r+0x5c>
 800b5f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5f8:	07dc      	lsls	r4, r3, #31
 800b5fa:	d504      	bpl.n	800b606 <_vfiprintf_r+0x4e>
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b600:	b01d      	add	sp, #116	@ 0x74
 800b602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b606:	89ab      	ldrh	r3, [r5, #12]
 800b608:	0598      	lsls	r0, r3, #22
 800b60a:	d4f7      	bmi.n	800b5fc <_vfiprintf_r+0x44>
 800b60c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b60e:	f7fe f839 	bl	8009684 <__retarget_lock_release_recursive>
 800b612:	e7f3      	b.n	800b5fc <_vfiprintf_r+0x44>
 800b614:	2300      	movs	r3, #0
 800b616:	9309      	str	r3, [sp, #36]	@ 0x24
 800b618:	2320      	movs	r3, #32
 800b61a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b61e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b622:	2330      	movs	r3, #48	@ 0x30
 800b624:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b7d4 <_vfiprintf_r+0x21c>
 800b628:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b62c:	f04f 0901 	mov.w	r9, #1
 800b630:	4623      	mov	r3, r4
 800b632:	469a      	mov	sl, r3
 800b634:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b638:	b10a      	cbz	r2, 800b63e <_vfiprintf_r+0x86>
 800b63a:	2a25      	cmp	r2, #37	@ 0x25
 800b63c:	d1f9      	bne.n	800b632 <_vfiprintf_r+0x7a>
 800b63e:	ebba 0b04 	subs.w	fp, sl, r4
 800b642:	d00b      	beq.n	800b65c <_vfiprintf_r+0xa4>
 800b644:	465b      	mov	r3, fp
 800b646:	4622      	mov	r2, r4
 800b648:	4629      	mov	r1, r5
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff ffa2 	bl	800b594 <__sfputs_r>
 800b650:	3001      	adds	r0, #1
 800b652:	f000 80a7 	beq.w	800b7a4 <_vfiprintf_r+0x1ec>
 800b656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b658:	445a      	add	r2, fp
 800b65a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b65c:	f89a 3000 	ldrb.w	r3, [sl]
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 809f 	beq.w	800b7a4 <_vfiprintf_r+0x1ec>
 800b666:	2300      	movs	r3, #0
 800b668:	f04f 32ff 	mov.w	r2, #4294967295
 800b66c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b670:	f10a 0a01 	add.w	sl, sl, #1
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	9307      	str	r3, [sp, #28]
 800b678:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b67c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b67e:	4654      	mov	r4, sl
 800b680:	2205      	movs	r2, #5
 800b682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b686:	4853      	ldr	r0, [pc, #332]	@ (800b7d4 <_vfiprintf_r+0x21c>)
 800b688:	f7f4 fda2 	bl	80001d0 <memchr>
 800b68c:	9a04      	ldr	r2, [sp, #16]
 800b68e:	b9d8      	cbnz	r0, 800b6c8 <_vfiprintf_r+0x110>
 800b690:	06d1      	lsls	r1, r2, #27
 800b692:	bf44      	itt	mi
 800b694:	2320      	movmi	r3, #32
 800b696:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b69a:	0713      	lsls	r3, r2, #28
 800b69c:	bf44      	itt	mi
 800b69e:	232b      	movmi	r3, #43	@ 0x2b
 800b6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6aa:	d015      	beq.n	800b6d8 <_vfiprintf_r+0x120>
 800b6ac:	9a07      	ldr	r2, [sp, #28]
 800b6ae:	4654      	mov	r4, sl
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	f04f 0c0a 	mov.w	ip, #10
 800b6b6:	4621      	mov	r1, r4
 800b6b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6bc:	3b30      	subs	r3, #48	@ 0x30
 800b6be:	2b09      	cmp	r3, #9
 800b6c0:	d94b      	bls.n	800b75a <_vfiprintf_r+0x1a2>
 800b6c2:	b1b0      	cbz	r0, 800b6f2 <_vfiprintf_r+0x13a>
 800b6c4:	9207      	str	r2, [sp, #28]
 800b6c6:	e014      	b.n	800b6f2 <_vfiprintf_r+0x13a>
 800b6c8:	eba0 0308 	sub.w	r3, r0, r8
 800b6cc:	fa09 f303 	lsl.w	r3, r9, r3
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	9304      	str	r3, [sp, #16]
 800b6d4:	46a2      	mov	sl, r4
 800b6d6:	e7d2      	b.n	800b67e <_vfiprintf_r+0xc6>
 800b6d8:	9b03      	ldr	r3, [sp, #12]
 800b6da:	1d19      	adds	r1, r3, #4
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	9103      	str	r1, [sp, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	bfbb      	ittet	lt
 800b6e4:	425b      	neglt	r3, r3
 800b6e6:	f042 0202 	orrlt.w	r2, r2, #2
 800b6ea:	9307      	strge	r3, [sp, #28]
 800b6ec:	9307      	strlt	r3, [sp, #28]
 800b6ee:	bfb8      	it	lt
 800b6f0:	9204      	strlt	r2, [sp, #16]
 800b6f2:	7823      	ldrb	r3, [r4, #0]
 800b6f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6f6:	d10a      	bne.n	800b70e <_vfiprintf_r+0x156>
 800b6f8:	7863      	ldrb	r3, [r4, #1]
 800b6fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6fc:	d132      	bne.n	800b764 <_vfiprintf_r+0x1ac>
 800b6fe:	9b03      	ldr	r3, [sp, #12]
 800b700:	1d1a      	adds	r2, r3, #4
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	9203      	str	r2, [sp, #12]
 800b706:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b70a:	3402      	adds	r4, #2
 800b70c:	9305      	str	r3, [sp, #20]
 800b70e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b7e4 <_vfiprintf_r+0x22c>
 800b712:	7821      	ldrb	r1, [r4, #0]
 800b714:	2203      	movs	r2, #3
 800b716:	4650      	mov	r0, sl
 800b718:	f7f4 fd5a 	bl	80001d0 <memchr>
 800b71c:	b138      	cbz	r0, 800b72e <_vfiprintf_r+0x176>
 800b71e:	9b04      	ldr	r3, [sp, #16]
 800b720:	eba0 000a 	sub.w	r0, r0, sl
 800b724:	2240      	movs	r2, #64	@ 0x40
 800b726:	4082      	lsls	r2, r0
 800b728:	4313      	orrs	r3, r2
 800b72a:	3401      	adds	r4, #1
 800b72c:	9304      	str	r3, [sp, #16]
 800b72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b732:	4829      	ldr	r0, [pc, #164]	@ (800b7d8 <_vfiprintf_r+0x220>)
 800b734:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b738:	2206      	movs	r2, #6
 800b73a:	f7f4 fd49 	bl	80001d0 <memchr>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d03f      	beq.n	800b7c2 <_vfiprintf_r+0x20a>
 800b742:	4b26      	ldr	r3, [pc, #152]	@ (800b7dc <_vfiprintf_r+0x224>)
 800b744:	bb1b      	cbnz	r3, 800b78e <_vfiprintf_r+0x1d6>
 800b746:	9b03      	ldr	r3, [sp, #12]
 800b748:	3307      	adds	r3, #7
 800b74a:	f023 0307 	bic.w	r3, r3, #7
 800b74e:	3308      	adds	r3, #8
 800b750:	9303      	str	r3, [sp, #12]
 800b752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b754:	443b      	add	r3, r7
 800b756:	9309      	str	r3, [sp, #36]	@ 0x24
 800b758:	e76a      	b.n	800b630 <_vfiprintf_r+0x78>
 800b75a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b75e:	460c      	mov	r4, r1
 800b760:	2001      	movs	r0, #1
 800b762:	e7a8      	b.n	800b6b6 <_vfiprintf_r+0xfe>
 800b764:	2300      	movs	r3, #0
 800b766:	3401      	adds	r4, #1
 800b768:	9305      	str	r3, [sp, #20]
 800b76a:	4619      	mov	r1, r3
 800b76c:	f04f 0c0a 	mov.w	ip, #10
 800b770:	4620      	mov	r0, r4
 800b772:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b776:	3a30      	subs	r2, #48	@ 0x30
 800b778:	2a09      	cmp	r2, #9
 800b77a:	d903      	bls.n	800b784 <_vfiprintf_r+0x1cc>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0c6      	beq.n	800b70e <_vfiprintf_r+0x156>
 800b780:	9105      	str	r1, [sp, #20]
 800b782:	e7c4      	b.n	800b70e <_vfiprintf_r+0x156>
 800b784:	fb0c 2101 	mla	r1, ip, r1, r2
 800b788:	4604      	mov	r4, r0
 800b78a:	2301      	movs	r3, #1
 800b78c:	e7f0      	b.n	800b770 <_vfiprintf_r+0x1b8>
 800b78e:	ab03      	add	r3, sp, #12
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	462a      	mov	r2, r5
 800b794:	4b12      	ldr	r3, [pc, #72]	@ (800b7e0 <_vfiprintf_r+0x228>)
 800b796:	a904      	add	r1, sp, #16
 800b798:	4630      	mov	r0, r6
 800b79a:	f7fd fa01 	bl	8008ba0 <_printf_float>
 800b79e:	4607      	mov	r7, r0
 800b7a0:	1c78      	adds	r0, r7, #1
 800b7a2:	d1d6      	bne.n	800b752 <_vfiprintf_r+0x19a>
 800b7a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7a6:	07d9      	lsls	r1, r3, #31
 800b7a8:	d405      	bmi.n	800b7b6 <_vfiprintf_r+0x1fe>
 800b7aa:	89ab      	ldrh	r3, [r5, #12]
 800b7ac:	059a      	lsls	r2, r3, #22
 800b7ae:	d402      	bmi.n	800b7b6 <_vfiprintf_r+0x1fe>
 800b7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7b2:	f7fd ff67 	bl	8009684 <__retarget_lock_release_recursive>
 800b7b6:	89ab      	ldrh	r3, [r5, #12]
 800b7b8:	065b      	lsls	r3, r3, #25
 800b7ba:	f53f af1f 	bmi.w	800b5fc <_vfiprintf_r+0x44>
 800b7be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7c0:	e71e      	b.n	800b600 <_vfiprintf_r+0x48>
 800b7c2:	ab03      	add	r3, sp, #12
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	462a      	mov	r2, r5
 800b7c8:	4b05      	ldr	r3, [pc, #20]	@ (800b7e0 <_vfiprintf_r+0x228>)
 800b7ca:	a904      	add	r1, sp, #16
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7fd fc7f 	bl	80090d0 <_printf_i>
 800b7d2:	e7e4      	b.n	800b79e <_vfiprintf_r+0x1e6>
 800b7d4:	0800c1a1 	.word	0x0800c1a1
 800b7d8:	0800c1ab 	.word	0x0800c1ab
 800b7dc:	08008ba1 	.word	0x08008ba1
 800b7e0:	0800b595 	.word	0x0800b595
 800b7e4:	0800c1a7 	.word	0x0800c1a7

0800b7e8 <__sflush_r>:
 800b7e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	0716      	lsls	r6, r2, #28
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	d454      	bmi.n	800b8a2 <__sflush_r+0xba>
 800b7f8:	684b      	ldr	r3, [r1, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	dc02      	bgt.n	800b804 <__sflush_r+0x1c>
 800b7fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b800:	2b00      	cmp	r3, #0
 800b802:	dd48      	ble.n	800b896 <__sflush_r+0xae>
 800b804:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b806:	2e00      	cmp	r6, #0
 800b808:	d045      	beq.n	800b896 <__sflush_r+0xae>
 800b80a:	2300      	movs	r3, #0
 800b80c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b810:	682f      	ldr	r7, [r5, #0]
 800b812:	6a21      	ldr	r1, [r4, #32]
 800b814:	602b      	str	r3, [r5, #0]
 800b816:	d030      	beq.n	800b87a <__sflush_r+0x92>
 800b818:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	0759      	lsls	r1, r3, #29
 800b81e:	d505      	bpl.n	800b82c <__sflush_r+0x44>
 800b820:	6863      	ldr	r3, [r4, #4]
 800b822:	1ad2      	subs	r2, r2, r3
 800b824:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b826:	b10b      	cbz	r3, 800b82c <__sflush_r+0x44>
 800b828:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b82a:	1ad2      	subs	r2, r2, r3
 800b82c:	2300      	movs	r3, #0
 800b82e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b830:	6a21      	ldr	r1, [r4, #32]
 800b832:	4628      	mov	r0, r5
 800b834:	47b0      	blx	r6
 800b836:	1c43      	adds	r3, r0, #1
 800b838:	89a3      	ldrh	r3, [r4, #12]
 800b83a:	d106      	bne.n	800b84a <__sflush_r+0x62>
 800b83c:	6829      	ldr	r1, [r5, #0]
 800b83e:	291d      	cmp	r1, #29
 800b840:	d82b      	bhi.n	800b89a <__sflush_r+0xb2>
 800b842:	4a2a      	ldr	r2, [pc, #168]	@ (800b8ec <__sflush_r+0x104>)
 800b844:	410a      	asrs	r2, r1
 800b846:	07d6      	lsls	r6, r2, #31
 800b848:	d427      	bmi.n	800b89a <__sflush_r+0xb2>
 800b84a:	2200      	movs	r2, #0
 800b84c:	6062      	str	r2, [r4, #4]
 800b84e:	04d9      	lsls	r1, r3, #19
 800b850:	6922      	ldr	r2, [r4, #16]
 800b852:	6022      	str	r2, [r4, #0]
 800b854:	d504      	bpl.n	800b860 <__sflush_r+0x78>
 800b856:	1c42      	adds	r2, r0, #1
 800b858:	d101      	bne.n	800b85e <__sflush_r+0x76>
 800b85a:	682b      	ldr	r3, [r5, #0]
 800b85c:	b903      	cbnz	r3, 800b860 <__sflush_r+0x78>
 800b85e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b862:	602f      	str	r7, [r5, #0]
 800b864:	b1b9      	cbz	r1, 800b896 <__sflush_r+0xae>
 800b866:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b86a:	4299      	cmp	r1, r3
 800b86c:	d002      	beq.n	800b874 <__sflush_r+0x8c>
 800b86e:	4628      	mov	r0, r5
 800b870:	f7fe fd6e 	bl	800a350 <_free_r>
 800b874:	2300      	movs	r3, #0
 800b876:	6363      	str	r3, [r4, #52]	@ 0x34
 800b878:	e00d      	b.n	800b896 <__sflush_r+0xae>
 800b87a:	2301      	movs	r3, #1
 800b87c:	4628      	mov	r0, r5
 800b87e:	47b0      	blx	r6
 800b880:	4602      	mov	r2, r0
 800b882:	1c50      	adds	r0, r2, #1
 800b884:	d1c9      	bne.n	800b81a <__sflush_r+0x32>
 800b886:	682b      	ldr	r3, [r5, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d0c6      	beq.n	800b81a <__sflush_r+0x32>
 800b88c:	2b1d      	cmp	r3, #29
 800b88e:	d001      	beq.n	800b894 <__sflush_r+0xac>
 800b890:	2b16      	cmp	r3, #22
 800b892:	d11e      	bne.n	800b8d2 <__sflush_r+0xea>
 800b894:	602f      	str	r7, [r5, #0]
 800b896:	2000      	movs	r0, #0
 800b898:	e022      	b.n	800b8e0 <__sflush_r+0xf8>
 800b89a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b89e:	b21b      	sxth	r3, r3
 800b8a0:	e01b      	b.n	800b8da <__sflush_r+0xf2>
 800b8a2:	690f      	ldr	r7, [r1, #16]
 800b8a4:	2f00      	cmp	r7, #0
 800b8a6:	d0f6      	beq.n	800b896 <__sflush_r+0xae>
 800b8a8:	0793      	lsls	r3, r2, #30
 800b8aa:	680e      	ldr	r6, [r1, #0]
 800b8ac:	bf08      	it	eq
 800b8ae:	694b      	ldreq	r3, [r1, #20]
 800b8b0:	600f      	str	r7, [r1, #0]
 800b8b2:	bf18      	it	ne
 800b8b4:	2300      	movne	r3, #0
 800b8b6:	eba6 0807 	sub.w	r8, r6, r7
 800b8ba:	608b      	str	r3, [r1, #8]
 800b8bc:	f1b8 0f00 	cmp.w	r8, #0
 800b8c0:	dde9      	ble.n	800b896 <__sflush_r+0xae>
 800b8c2:	6a21      	ldr	r1, [r4, #32]
 800b8c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8c6:	4643      	mov	r3, r8
 800b8c8:	463a      	mov	r2, r7
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	47b0      	blx	r6
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	dc08      	bgt.n	800b8e4 <__sflush_r+0xfc>
 800b8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e4:	4407      	add	r7, r0
 800b8e6:	eba8 0800 	sub.w	r8, r8, r0
 800b8ea:	e7e7      	b.n	800b8bc <__sflush_r+0xd4>
 800b8ec:	dfbffffe 	.word	0xdfbffffe

0800b8f0 <_fflush_r>:
 800b8f0:	b538      	push	{r3, r4, r5, lr}
 800b8f2:	690b      	ldr	r3, [r1, #16]
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	b913      	cbnz	r3, 800b900 <_fflush_r+0x10>
 800b8fa:	2500      	movs	r5, #0
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	b118      	cbz	r0, 800b90a <_fflush_r+0x1a>
 800b902:	6a03      	ldr	r3, [r0, #32]
 800b904:	b90b      	cbnz	r3, 800b90a <_fflush_r+0x1a>
 800b906:	f7fd fd8f 	bl	8009428 <__sinit>
 800b90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d0f3      	beq.n	800b8fa <_fflush_r+0xa>
 800b912:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b914:	07d0      	lsls	r0, r2, #31
 800b916:	d404      	bmi.n	800b922 <_fflush_r+0x32>
 800b918:	0599      	lsls	r1, r3, #22
 800b91a:	d402      	bmi.n	800b922 <_fflush_r+0x32>
 800b91c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b91e:	f7fd feb0 	bl	8009682 <__retarget_lock_acquire_recursive>
 800b922:	4628      	mov	r0, r5
 800b924:	4621      	mov	r1, r4
 800b926:	f7ff ff5f 	bl	800b7e8 <__sflush_r>
 800b92a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b92c:	07da      	lsls	r2, r3, #31
 800b92e:	4605      	mov	r5, r0
 800b930:	d4e4      	bmi.n	800b8fc <_fflush_r+0xc>
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	059b      	lsls	r3, r3, #22
 800b936:	d4e1      	bmi.n	800b8fc <_fflush_r+0xc>
 800b938:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b93a:	f7fd fea3 	bl	8009684 <__retarget_lock_release_recursive>
 800b93e:	e7dd      	b.n	800b8fc <_fflush_r+0xc>

0800b940 <__swbuf_r>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	460e      	mov	r6, r1
 800b944:	4614      	mov	r4, r2
 800b946:	4605      	mov	r5, r0
 800b948:	b118      	cbz	r0, 800b952 <__swbuf_r+0x12>
 800b94a:	6a03      	ldr	r3, [r0, #32]
 800b94c:	b90b      	cbnz	r3, 800b952 <__swbuf_r+0x12>
 800b94e:	f7fd fd6b 	bl	8009428 <__sinit>
 800b952:	69a3      	ldr	r3, [r4, #24]
 800b954:	60a3      	str	r3, [r4, #8]
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	071a      	lsls	r2, r3, #28
 800b95a:	d501      	bpl.n	800b960 <__swbuf_r+0x20>
 800b95c:	6923      	ldr	r3, [r4, #16]
 800b95e:	b943      	cbnz	r3, 800b972 <__swbuf_r+0x32>
 800b960:	4621      	mov	r1, r4
 800b962:	4628      	mov	r0, r5
 800b964:	f000 f82a 	bl	800b9bc <__swsetup_r>
 800b968:	b118      	cbz	r0, 800b972 <__swbuf_r+0x32>
 800b96a:	f04f 37ff 	mov.w	r7, #4294967295
 800b96e:	4638      	mov	r0, r7
 800b970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	6922      	ldr	r2, [r4, #16]
 800b976:	1a98      	subs	r0, r3, r2
 800b978:	6963      	ldr	r3, [r4, #20]
 800b97a:	b2f6      	uxtb	r6, r6
 800b97c:	4283      	cmp	r3, r0
 800b97e:	4637      	mov	r7, r6
 800b980:	dc05      	bgt.n	800b98e <__swbuf_r+0x4e>
 800b982:	4621      	mov	r1, r4
 800b984:	4628      	mov	r0, r5
 800b986:	f7ff ffb3 	bl	800b8f0 <_fflush_r>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d1ed      	bne.n	800b96a <__swbuf_r+0x2a>
 800b98e:	68a3      	ldr	r3, [r4, #8]
 800b990:	3b01      	subs	r3, #1
 800b992:	60a3      	str	r3, [r4, #8]
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	6022      	str	r2, [r4, #0]
 800b99a:	701e      	strb	r6, [r3, #0]
 800b99c:	6962      	ldr	r2, [r4, #20]
 800b99e:	1c43      	adds	r3, r0, #1
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d004      	beq.n	800b9ae <__swbuf_r+0x6e>
 800b9a4:	89a3      	ldrh	r3, [r4, #12]
 800b9a6:	07db      	lsls	r3, r3, #31
 800b9a8:	d5e1      	bpl.n	800b96e <__swbuf_r+0x2e>
 800b9aa:	2e0a      	cmp	r6, #10
 800b9ac:	d1df      	bne.n	800b96e <__swbuf_r+0x2e>
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f7ff ff9d 	bl	800b8f0 <_fflush_r>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d0d9      	beq.n	800b96e <__swbuf_r+0x2e>
 800b9ba:	e7d6      	b.n	800b96a <__swbuf_r+0x2a>

0800b9bc <__swsetup_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4b29      	ldr	r3, [pc, #164]	@ (800ba64 <__swsetup_r+0xa8>)
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	6818      	ldr	r0, [r3, #0]
 800b9c4:	460c      	mov	r4, r1
 800b9c6:	b118      	cbz	r0, 800b9d0 <__swsetup_r+0x14>
 800b9c8:	6a03      	ldr	r3, [r0, #32]
 800b9ca:	b90b      	cbnz	r3, 800b9d0 <__swsetup_r+0x14>
 800b9cc:	f7fd fd2c 	bl	8009428 <__sinit>
 800b9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9d4:	0719      	lsls	r1, r3, #28
 800b9d6:	d422      	bmi.n	800ba1e <__swsetup_r+0x62>
 800b9d8:	06da      	lsls	r2, r3, #27
 800b9da:	d407      	bmi.n	800b9ec <__swsetup_r+0x30>
 800b9dc:	2209      	movs	r2, #9
 800b9de:	602a      	str	r2, [r5, #0]
 800b9e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9e4:	81a3      	strh	r3, [r4, #12]
 800b9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ea:	e033      	b.n	800ba54 <__swsetup_r+0x98>
 800b9ec:	0758      	lsls	r0, r3, #29
 800b9ee:	d512      	bpl.n	800ba16 <__swsetup_r+0x5a>
 800b9f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9f2:	b141      	cbz	r1, 800ba06 <__swsetup_r+0x4a>
 800b9f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b9f8:	4299      	cmp	r1, r3
 800b9fa:	d002      	beq.n	800ba02 <__swsetup_r+0x46>
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f7fe fca7 	bl	800a350 <_free_r>
 800ba02:	2300      	movs	r3, #0
 800ba04:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba06:	89a3      	ldrh	r3, [r4, #12]
 800ba08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ba0c:	81a3      	strh	r3, [r4, #12]
 800ba0e:	2300      	movs	r3, #0
 800ba10:	6063      	str	r3, [r4, #4]
 800ba12:	6923      	ldr	r3, [r4, #16]
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	f043 0308 	orr.w	r3, r3, #8
 800ba1c:	81a3      	strh	r3, [r4, #12]
 800ba1e:	6923      	ldr	r3, [r4, #16]
 800ba20:	b94b      	cbnz	r3, 800ba36 <__swsetup_r+0x7a>
 800ba22:	89a3      	ldrh	r3, [r4, #12]
 800ba24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ba28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba2c:	d003      	beq.n	800ba36 <__swsetup_r+0x7a>
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4628      	mov	r0, r5
 800ba32:	f000 f893 	bl	800bb5c <__smakebuf_r>
 800ba36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba3a:	f013 0201 	ands.w	r2, r3, #1
 800ba3e:	d00a      	beq.n	800ba56 <__swsetup_r+0x9a>
 800ba40:	2200      	movs	r2, #0
 800ba42:	60a2      	str	r2, [r4, #8]
 800ba44:	6962      	ldr	r2, [r4, #20]
 800ba46:	4252      	negs	r2, r2
 800ba48:	61a2      	str	r2, [r4, #24]
 800ba4a:	6922      	ldr	r2, [r4, #16]
 800ba4c:	b942      	cbnz	r2, 800ba60 <__swsetup_r+0xa4>
 800ba4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ba52:	d1c5      	bne.n	800b9e0 <__swsetup_r+0x24>
 800ba54:	bd38      	pop	{r3, r4, r5, pc}
 800ba56:	0799      	lsls	r1, r3, #30
 800ba58:	bf58      	it	pl
 800ba5a:	6962      	ldrpl	r2, [r4, #20]
 800ba5c:	60a2      	str	r2, [r4, #8]
 800ba5e:	e7f4      	b.n	800ba4a <__swsetup_r+0x8e>
 800ba60:	2000      	movs	r0, #0
 800ba62:	e7f7      	b.n	800ba54 <__swsetup_r+0x98>
 800ba64:	20000184 	.word	0x20000184

0800ba68 <_sbrk_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d06      	ldr	r5, [pc, #24]	@ (800ba84 <_sbrk_r+0x1c>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4604      	mov	r4, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	602b      	str	r3, [r5, #0]
 800ba74:	f7f5 ffac 	bl	80019d0 <_sbrk>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_sbrk_r+0x1a>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_sbrk_r+0x1a>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	2000071c 	.word	0x2000071c

0800ba88 <__assert_func>:
 800ba88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba8a:	4614      	mov	r4, r2
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4b09      	ldr	r3, [pc, #36]	@ (800bab4 <__assert_func+0x2c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4605      	mov	r5, r0
 800ba94:	68d8      	ldr	r0, [r3, #12]
 800ba96:	b954      	cbnz	r4, 800baae <__assert_func+0x26>
 800ba98:	4b07      	ldr	r3, [pc, #28]	@ (800bab8 <__assert_func+0x30>)
 800ba9a:	461c      	mov	r4, r3
 800ba9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baa0:	9100      	str	r1, [sp, #0]
 800baa2:	462b      	mov	r3, r5
 800baa4:	4905      	ldr	r1, [pc, #20]	@ (800babc <__assert_func+0x34>)
 800baa6:	f000 f821 	bl	800baec <fiprintf>
 800baaa:	f000 f8b5 	bl	800bc18 <abort>
 800baae:	4b04      	ldr	r3, [pc, #16]	@ (800bac0 <__assert_func+0x38>)
 800bab0:	e7f4      	b.n	800ba9c <__assert_func+0x14>
 800bab2:	bf00      	nop
 800bab4:	20000184 	.word	0x20000184
 800bab8:	0800c1ed 	.word	0x0800c1ed
 800babc:	0800c1bf 	.word	0x0800c1bf
 800bac0:	0800c1b2 	.word	0x0800c1b2

0800bac4 <_calloc_r>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	fba1 5402 	umull	r5, r4, r1, r2
 800baca:	b93c      	cbnz	r4, 800badc <_calloc_r+0x18>
 800bacc:	4629      	mov	r1, r5
 800bace:	f7fe ffed 	bl	800aaac <_malloc_r>
 800bad2:	4606      	mov	r6, r0
 800bad4:	b928      	cbnz	r0, 800bae2 <_calloc_r+0x1e>
 800bad6:	2600      	movs	r6, #0
 800bad8:	4630      	mov	r0, r6
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	220c      	movs	r2, #12
 800bade:	6002      	str	r2, [r0, #0]
 800bae0:	e7f9      	b.n	800bad6 <_calloc_r+0x12>
 800bae2:	462a      	mov	r2, r5
 800bae4:	4621      	mov	r1, r4
 800bae6:	f7fd fd2a 	bl	800953e <memset>
 800baea:	e7f5      	b.n	800bad8 <_calloc_r+0x14>

0800baec <fiprintf>:
 800baec:	b40e      	push	{r1, r2, r3}
 800baee:	b503      	push	{r0, r1, lr}
 800baf0:	4601      	mov	r1, r0
 800baf2:	ab03      	add	r3, sp, #12
 800baf4:	4805      	ldr	r0, [pc, #20]	@ (800bb0c <fiprintf+0x20>)
 800baf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bafa:	6800      	ldr	r0, [r0, #0]
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	f7ff fd5b 	bl	800b5b8 <_vfiprintf_r>
 800bb02:	b002      	add	sp, #8
 800bb04:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb08:	b003      	add	sp, #12
 800bb0a:	4770      	bx	lr
 800bb0c:	20000184 	.word	0x20000184

0800bb10 <__swhatbuf_r>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	460c      	mov	r4, r1
 800bb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb18:	2900      	cmp	r1, #0
 800bb1a:	b096      	sub	sp, #88	@ 0x58
 800bb1c:	4615      	mov	r5, r2
 800bb1e:	461e      	mov	r6, r3
 800bb20:	da0d      	bge.n	800bb3e <__swhatbuf_r+0x2e>
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bb28:	f04f 0100 	mov.w	r1, #0
 800bb2c:	bf14      	ite	ne
 800bb2e:	2340      	movne	r3, #64	@ 0x40
 800bb30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bb34:	2000      	movs	r0, #0
 800bb36:	6031      	str	r1, [r6, #0]
 800bb38:	602b      	str	r3, [r5, #0]
 800bb3a:	b016      	add	sp, #88	@ 0x58
 800bb3c:	bd70      	pop	{r4, r5, r6, pc}
 800bb3e:	466a      	mov	r2, sp
 800bb40:	f000 f848 	bl	800bbd4 <_fstat_r>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	dbec      	blt.n	800bb22 <__swhatbuf_r+0x12>
 800bb48:	9901      	ldr	r1, [sp, #4]
 800bb4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb52:	4259      	negs	r1, r3
 800bb54:	4159      	adcs	r1, r3
 800bb56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb5a:	e7eb      	b.n	800bb34 <__swhatbuf_r+0x24>

0800bb5c <__smakebuf_r>:
 800bb5c:	898b      	ldrh	r3, [r1, #12]
 800bb5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb60:	079d      	lsls	r5, r3, #30
 800bb62:	4606      	mov	r6, r0
 800bb64:	460c      	mov	r4, r1
 800bb66:	d507      	bpl.n	800bb78 <__smakebuf_r+0x1c>
 800bb68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	6123      	str	r3, [r4, #16]
 800bb70:	2301      	movs	r3, #1
 800bb72:	6163      	str	r3, [r4, #20]
 800bb74:	b003      	add	sp, #12
 800bb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb78:	ab01      	add	r3, sp, #4
 800bb7a:	466a      	mov	r2, sp
 800bb7c:	f7ff ffc8 	bl	800bb10 <__swhatbuf_r>
 800bb80:	9f00      	ldr	r7, [sp, #0]
 800bb82:	4605      	mov	r5, r0
 800bb84:	4639      	mov	r1, r7
 800bb86:	4630      	mov	r0, r6
 800bb88:	f7fe ff90 	bl	800aaac <_malloc_r>
 800bb8c:	b948      	cbnz	r0, 800bba2 <__smakebuf_r+0x46>
 800bb8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb92:	059a      	lsls	r2, r3, #22
 800bb94:	d4ee      	bmi.n	800bb74 <__smakebuf_r+0x18>
 800bb96:	f023 0303 	bic.w	r3, r3, #3
 800bb9a:	f043 0302 	orr.w	r3, r3, #2
 800bb9e:	81a3      	strh	r3, [r4, #12]
 800bba0:	e7e2      	b.n	800bb68 <__smakebuf_r+0xc>
 800bba2:	89a3      	ldrh	r3, [r4, #12]
 800bba4:	6020      	str	r0, [r4, #0]
 800bba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbaa:	81a3      	strh	r3, [r4, #12]
 800bbac:	9b01      	ldr	r3, [sp, #4]
 800bbae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bbb2:	b15b      	cbz	r3, 800bbcc <__smakebuf_r+0x70>
 800bbb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f000 f81d 	bl	800bbf8 <_isatty_r>
 800bbbe:	b128      	cbz	r0, 800bbcc <__smakebuf_r+0x70>
 800bbc0:	89a3      	ldrh	r3, [r4, #12]
 800bbc2:	f023 0303 	bic.w	r3, r3, #3
 800bbc6:	f043 0301 	orr.w	r3, r3, #1
 800bbca:	81a3      	strh	r3, [r4, #12]
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	431d      	orrs	r5, r3
 800bbd0:	81a5      	strh	r5, [r4, #12]
 800bbd2:	e7cf      	b.n	800bb74 <__smakebuf_r+0x18>

0800bbd4 <_fstat_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4d07      	ldr	r5, [pc, #28]	@ (800bbf4 <_fstat_r+0x20>)
 800bbd8:	2300      	movs	r3, #0
 800bbda:	4604      	mov	r4, r0
 800bbdc:	4608      	mov	r0, r1
 800bbde:	4611      	mov	r1, r2
 800bbe0:	602b      	str	r3, [r5, #0]
 800bbe2:	f7f5 fecd 	bl	8001980 <_fstat>
 800bbe6:	1c43      	adds	r3, r0, #1
 800bbe8:	d102      	bne.n	800bbf0 <_fstat_r+0x1c>
 800bbea:	682b      	ldr	r3, [r5, #0]
 800bbec:	b103      	cbz	r3, 800bbf0 <_fstat_r+0x1c>
 800bbee:	6023      	str	r3, [r4, #0]
 800bbf0:	bd38      	pop	{r3, r4, r5, pc}
 800bbf2:	bf00      	nop
 800bbf4:	2000071c 	.word	0x2000071c

0800bbf8 <_isatty_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4d06      	ldr	r5, [pc, #24]	@ (800bc14 <_isatty_r+0x1c>)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4604      	mov	r4, r0
 800bc00:	4608      	mov	r0, r1
 800bc02:	602b      	str	r3, [r5, #0]
 800bc04:	f7f5 fecc 	bl	80019a0 <_isatty>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d102      	bne.n	800bc12 <_isatty_r+0x1a>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	b103      	cbz	r3, 800bc12 <_isatty_r+0x1a>
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	2000071c 	.word	0x2000071c

0800bc18 <abort>:
 800bc18:	b508      	push	{r3, lr}
 800bc1a:	2006      	movs	r0, #6
 800bc1c:	f000 f82c 	bl	800bc78 <raise>
 800bc20:	2001      	movs	r0, #1
 800bc22:	f7f5 fe5d 	bl	80018e0 <_exit>

0800bc26 <_raise_r>:
 800bc26:	291f      	cmp	r1, #31
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	460c      	mov	r4, r1
 800bc2e:	d904      	bls.n	800bc3a <_raise_r+0x14>
 800bc30:	2316      	movs	r3, #22
 800bc32:	6003      	str	r3, [r0, #0]
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295
 800bc38:	bd38      	pop	{r3, r4, r5, pc}
 800bc3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc3c:	b112      	cbz	r2, 800bc44 <_raise_r+0x1e>
 800bc3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc42:	b94b      	cbnz	r3, 800bc58 <_raise_r+0x32>
 800bc44:	4628      	mov	r0, r5
 800bc46:	f000 f831 	bl	800bcac <_getpid_r>
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	4601      	mov	r1, r0
 800bc4e:	4628      	mov	r0, r5
 800bc50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc54:	f000 b818 	b.w	800bc88 <_kill_r>
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d00a      	beq.n	800bc72 <_raise_r+0x4c>
 800bc5c:	1c59      	adds	r1, r3, #1
 800bc5e:	d103      	bne.n	800bc68 <_raise_r+0x42>
 800bc60:	2316      	movs	r3, #22
 800bc62:	6003      	str	r3, [r0, #0]
 800bc64:	2001      	movs	r0, #1
 800bc66:	e7e7      	b.n	800bc38 <_raise_r+0x12>
 800bc68:	2100      	movs	r1, #0
 800bc6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc6e:	4620      	mov	r0, r4
 800bc70:	4798      	blx	r3
 800bc72:	2000      	movs	r0, #0
 800bc74:	e7e0      	b.n	800bc38 <_raise_r+0x12>
	...

0800bc78 <raise>:
 800bc78:	4b02      	ldr	r3, [pc, #8]	@ (800bc84 <raise+0xc>)
 800bc7a:	4601      	mov	r1, r0
 800bc7c:	6818      	ldr	r0, [r3, #0]
 800bc7e:	f7ff bfd2 	b.w	800bc26 <_raise_r>
 800bc82:	bf00      	nop
 800bc84:	20000184 	.word	0x20000184

0800bc88 <_kill_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d07      	ldr	r5, [pc, #28]	@ (800bca8 <_kill_r+0x20>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	4611      	mov	r1, r2
 800bc94:	602b      	str	r3, [r5, #0]
 800bc96:	f7f5 fe13 	bl	80018c0 <_kill>
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	d102      	bne.n	800bca4 <_kill_r+0x1c>
 800bc9e:	682b      	ldr	r3, [r5, #0]
 800bca0:	b103      	cbz	r3, 800bca4 <_kill_r+0x1c>
 800bca2:	6023      	str	r3, [r4, #0]
 800bca4:	bd38      	pop	{r3, r4, r5, pc}
 800bca6:	bf00      	nop
 800bca8:	2000071c 	.word	0x2000071c

0800bcac <_getpid_r>:
 800bcac:	f7f5 be00 	b.w	80018b0 <_getpid>

0800bcb0 <_init>:
 800bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb2:	bf00      	nop
 800bcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb6:	bc08      	pop	{r3}
 800bcb8:	469e      	mov	lr, r3
 800bcba:	4770      	bx	lr

0800bcbc <_fini>:
 800bcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcbe:	bf00      	nop
 800bcc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc2:	bc08      	pop	{r3}
 800bcc4:	469e      	mov	lr, r3
 800bcc6:	4770      	bx	lr
